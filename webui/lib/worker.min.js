/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 12);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../lib/collect.js":
/*!*************************!*\
  !*** ../lib/collect.js ***!
  \*************************/
/*! exports provided: collect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "collect", function() { return collect; });
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function collect(_ref) {
  var values = _ref.values,
      order = _ref.order,
      max = _ref.max;
  var array = [];

  var _iterator = _createForOfIteratorHelper(values),
      _step;

  try {
    var _loop = function _loop() {
      var a = _step.value;
      var i = array.findIndex(function (b) {
        return order(a, b);
      });

      if (i === -1) {
        array.push(a);
      } else {
        array.splice(i, 0, a);
      }

      if (array.length > max) {
        array.shift();
      }
    };

    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return array;
}

/***/ }),

/***/ "../lib/constraint.js":
/*!****************************!*\
  !*** ../lib/constraint.js ***!
  \****************************/
/*! exports provided: ObjectLiteral, objectValue, Wildcard, IriStem, IriStemRange, LiteralStem, LiteralStemRange, Language, LanguageStem, LanguageStemRange, valueSetValue, lengthFacet, lengthRangeFacet, patternFacet, stringFacet, numericFacet, xsFacet, iriNodeKind, nonLiteralNodeKind, literalNodeKind, dataTypeConstraint, dataType, valueSet, NodeConstraint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectLiteral", function() { return ObjectLiteral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "objectValue", function() { return objectValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Wildcard", function() { return Wildcard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IriStem", function() { return IriStem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IriStemRange", function() { return IriStemRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiteralStem", function() { return LiteralStem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiteralStemRange", function() { return LiteralStemRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Language", function() { return Language; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LanguageStem", function() { return LanguageStem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LanguageStemRange", function() { return LanguageStemRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueSetValue", function() { return valueSetValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lengthFacet", function() { return lengthFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lengthRangeFacet", function() { return lengthRangeFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "patternFacet", function() { return patternFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringFacet", function() { return stringFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numericFacet", function() { return numericFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xsFacet", function() { return xsFacet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iriNodeKind", function() { return iriNodeKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonLiteralNodeKind", function() { return nonLiteralNodeKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "literalNodeKind", function() { return literalNodeKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataTypeConstraint", function() { return dataTypeConstraint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dataType", function() { return dataType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "valueSet", function() { return valueSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodeConstraint", function() { return NodeConstraint; });
/* harmony import */ var io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! io-ts/es6/index.js */ "../node_modules/io-ts/es6/index.js");

var ObjectLiteral = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  value: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
}), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  language: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"],
  type: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
})]);
var objectValue = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], ObjectLiteral]);
var Wildcard = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Wildcard")
});
var IriStem = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("IriStem"),
  stem: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
});
var IriStemRange = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("IriStemRange"),
  stem: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], Wildcard]),
  exclusions: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], IriStem]))
});
var LiteralStem = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("LiteralStem"),
  stem: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
});
var LiteralStemRange = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("LiteralStemRange"),
  stem: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], Wildcard]),
  exclusions: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], LiteralStem]))
});
var Language = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Language"),
  languageTag: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
});
var LanguageStem = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("LanguageStem"),
  stem: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
});
var LanguageStemRange = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("LanguageStemRange"),
  stem: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], Wildcard]),
  exclusions: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], LanguageStem]))
});
var valueSetValue = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([objectValue, IriStem, IriStemRange, LiteralStem, LiteralStemRange, Language, LanguageStem, LanguageStemRange]);
var lengthFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  length: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"]
});
var lengthRangeFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  minlength: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  maxlength: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"]
});
var patternFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  pattern: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
}), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  flags: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
})]);
var stringFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([lengthFacet, lengthRangeFacet, patternFacet]);
var numericFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  mininclusive: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  minexclusive: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  maxinclusive: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  maxexclusive: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  totaldigits: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
  fractiondigits: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"]
});
var xsFacet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([stringFacet, numericFacet]);
var iriNodeKind = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
  nodeKind: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("iri")
}), stringFacet]);
var nonLiteralNodeKind = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
  nodeKind: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("bnode"), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("nonliteral")])
});
var literalNodeKind = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
  nodeKind: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("literal")
}), xsFacet]);
var dataTypeConstraint = function dataTypeConstraint(datatype) {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
    datatype: datatype
  }), xsFacet]);
};
var dataType = dataTypeConstraint(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]);
var valueSet = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
  values: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(valueSetValue)
}), xsFacet]);
var NodeConstraint = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([iriNodeKind, nonLiteralNodeKind, literalNodeKind, dataType, valueSet, Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint")
}), stringFacet]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint")
}), numericFacet])]);

/***/ }),

/***/ "../lib/cospan.js":
/*!************************!*\
  !*** ../lib/cospan.js ***!
  \************************/
/*! exports provided: cospan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cospan", function() { return cospan; });
/* harmony import */ var n3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! n3 */ "../node_modules/n3/src/index.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "../lib/utils.js");
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




function cospan(types, datasets) {
  var coproduct = new n3__WEBPACK_IMPORTED_MODULE_0__["Store"]();

  var _iterator = _createForOfIteratorHelper(datasets.entries()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
          i = _step$value[0],
          store = _step$value[1];

      var _iterator5 = _createForOfIteratorHelper(store),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var q = _step5.value;

          if (q.subject.termType === "BlankNode") {
            var value = "d".concat(i, "-").concat(q.subject.value);
            q.subject = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(value);
          }

          if (q.object.termType === "BlankNode") {
            var _value = "d".concat(i, "-").concat(q.object.value);

            q.object = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(_value);
          }

          if (q.graph.termType === "BlankNode") {
            var _value2 = "d".concat(i, "-").concat(q.graph.value);

            q.graph = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(_value2);
          } else if (q.graph.termType === "DefaultGraph") {
            q.graph = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode("d".concat(i));
          }

          coproduct.addQuad(q);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var classes = new Map();
  var partitions = new Set();

  var _iterator2 = _createForOfIteratorHelper(types.values()),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _step2.value,
          type = _step2$value.type,
          key = _step2$value.key;
      var object = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(type);
      var subjects = coproduct.getSubjects(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["rdfTypeNode"], object, null);

      if (key !== undefined) {
        var pushouts = new Map();

        var _iterator6 = _createForOfIteratorHelper(subjects),
            _step6;

        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var subject = _step6.value;

            if (subject.termType === "BlankNode") {
              var subjectId = subject.value;
              var predicate = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(key);

              var _iterator8 = _createForOfIteratorHelper(coproduct.getObjects(subject, predicate, null)),
                  _step8;

              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var _object = _step8.value;
                  var id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_1__["toId"])(_object);

                  var _pushout = pushouts.get(id);

                  if (_pushout) {
                    _pushout.add(subjectId);
                  } else {
                    pushouts.set(id, new Set([subjectId]));
                  }
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }

        var _iterator7 = _createForOfIteratorHelper(pushouts.values()),
            _step7;

        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _subjects = _step7.value;
            var merge = new Set();

            var _iterator9 = _createForOfIteratorHelper(_subjects),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var _subject3 = _step9.value;

                if (classes.has(_subject3)) {
                  merge.add(classes.get(_subject3));
                } else {
                  merge.add(_subjects);
                  partitions.add(_subjects);
                  classes.set(_subject3, _subjects);
                }
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            if (merge.size > 1) {
              var union = new Set();
              partitions.add(union);

              var _iterator10 = _createForOfIteratorHelper(merge),
                  _step10;

              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var set = _step10.value;
                  partitions["delete"](set);

                  var _iterator12 = _createForOfIteratorHelper(set),
                      _step12;

                  try {
                    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                      var _subject = _step12.value;
                      union.add(_subject);
                    }
                  } catch (err) {
                    _iterator12.e(err);
                  } finally {
                    _iterator12.f();
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }

              var _iterator11 = _createForOfIteratorHelper(union),
                  _step11;

              try {
                for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                  var _subject2 = _step11.value;
                  classes.set(_subject2, union);
                }
              } catch (err) {
                _iterator11.e(err);
              } finally {
                _iterator11.f();
              }
            }
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
      } else {
        var _iterator13 = _createForOfIteratorHelper(subjects),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _step13$value = _step13.value,
                _value3 = _step13$value.value,
                termType = _step13$value.termType;

            if (termType === "BlankNode") {
              var partition = new Set([_value3]);
              partitions.add(partition);
              classes.set(_value3, partition);
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var names = new Map();
  var components = new Map();
  var inverse = new Map();
  var n = 0;

  var _iterator3 = _createForOfIteratorHelper(partitions),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _partition = _step3.value;
      var name = "p-".concat(n++);
      names.set(_partition, name);
      inverse.set(name, _partition);

      var _iterator14 = _createForOfIteratorHelper(_partition),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var b = _step14.value;
          components.set(b, name);
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var pushout = new n3__WEBPACK_IMPORTED_MODULE_0__["Store"]();

  var _iterator4 = _createForOfIteratorHelper(coproduct.getQuads(null, null, null, null)),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var quad = _step4.value;

      var _q = _objectSpread({}, quad);

      if (_q.subject.termType === "BlankNode" && components.has(_q.subject.value)) {
        _q.subject = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(components.get(_q.subject.value));
      }

      if (_q.object.termType === "BlankNode" && components.has(_q.object.value)) {
        _q.object = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(components.get(_q.object.value));
      }

      if (_q.graph.termType === "BlankNode" && components.has(_q.graph.value)) {
        _q.graph = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(components.get(_q.graph.value));
      }

      pushout.addQuad(_q.subject, _q.predicate, _q.object, _q.graph);
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }

  return {
    coproduct: coproduct,
    components: components,
    inverse: inverse,
    pushout: pushout
  };
}

/***/ }),

/***/ "../lib/loader.js":
/*!************************!*\
  !*** ../lib/loader.js ***!
  \************************/
/*! exports provided: loadURI, loadText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadURI", function() { return loadURI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadText", function() { return loadText; });
/* harmony import */ var _shexjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @shexjs/core */ "../shex.js/packages/shex-core/shex-core.js");
/* harmony import */ var _shexjs_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_shexjs_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _shexjs_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @shexjs/parser */ "../shex.js/packages/shex-parser/shex-parser.js");
/* harmony import */ var _shexjs_parser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_shexjs_parser__WEBPACK_IMPORTED_MODULE_1__);
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _asyncIterator(iterable) { var method; if (typeof Symbol !== "undefined") { if (Symbol.asyncIterator) { method = iterable[Symbol.asyncIterator]; if (method != null) return method.call(iterable); } if (Symbol.iterator) { method = iterable[Symbol.iterator]; if (method != null) return method.call(iterable); } } throw new TypeError("Object is not async iterable"); }



var dwebURI = /^dweb:\/ipfs\/([a-z2-7]{59})$/;

function resolveURI(_x) {
  return _resolveURI.apply(this, arguments);
}

function _resolveURI() {
  _resolveURI = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(uri) {
    var ipfs,
        parser,
        match,
        _shex,
        _iteratorNormalCompletion,
        _didIteratorError,
        _iteratorError,
        _iterator,
        _step,
        _value,
        chunk,
        shex,
        _args = arguments;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ipfs = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;
            parser = _shexjs_parser__WEBPACK_IMPORTED_MODULE_1___default.a.construct();
            match = dwebURI.exec(uri);

            if (!(match !== null && ipfs !== null)) {
              _context.next = 39;
              break;
            }

            _shex = "";
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _context.prev = 7;
            _iterator = _asyncIterator(ipfs.cat(match[1]));

          case 9:
            _context.next = 11;
            return _iterator.next();

          case 11:
            _step = _context.sent;
            _iteratorNormalCompletion = _step.done;
            _context.next = 15;
            return _step.value;

          case 15:
            _value = _context.sent;

            if (_iteratorNormalCompletion) {
              _context.next = 22;
              break;
            }

            chunk = _value;
            _shex += chunk.toString();

          case 19:
            _iteratorNormalCompletion = true;
            _context.next = 9;
            break;

          case 22:
            _context.next = 28;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 28:
            _context.prev = 28;
            _context.prev = 29;

            if (!(!_iteratorNormalCompletion && _iterator["return"] != null)) {
              _context.next = 33;
              break;
            }

            _context.next = 33;
            return _iterator["return"]();

          case 33:
            _context.prev = 33;

            if (!_didIteratorError) {
              _context.next = 36;
              break;
            }

            throw _iteratorError;

          case 36:
            return _context.finish(33);

          case 37:
            return _context.finish(28);

          case 38:
            return _context.abrupt("return", parser.parse(_shex));

          case 39:
            _context.next = 41;
            return fetch(uri).then(function (res) {
              return res.text();
            });

          case 41:
            shex = _context.sent;
            return _context.abrupt("return", parser.parse(shex));

          case 43:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 24, 28, 38], [29,, 33, 37]]);
  }));
  return _resolveURI.apply(this, arguments);
}

function loadURI(_x2) {
  return _loadURI.apply(this, arguments);
}

function _loadURI() {
  _loadURI = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(uri) {
    var ipfs,
        merged,
        loaded,
        load,
        _load,
        _args3 = arguments;

    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _load = function _load3() {
              _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(uri) {
                var schema;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        loaded.add(uri);
                        _context2.next = 3;
                        return resolveURI(uri, ipfs);

                      case 3:
                        schema = _context2.sent;

                        if (!Array.isArray(schema.imports)) {
                          _context2.next = 8;
                          break;
                        }

                        _context2.next = 7;
                        return Promise.all(schema.imports.filter(function (u) {
                          return !loaded.has(u);
                        }).map(load));

                      case 7:
                        delete schema.imports;

                      case 8:
                        _shexjs_core__WEBPACK_IMPORTED_MODULE_0___default.a.Util.merge(merged, schema, false, true);

                      case 9:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));
              return _load.apply(this, arguments);
            };

            load = function _load2(_x4) {
              return _load.apply(this, arguments);
            };

            ipfs = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : null;
            merged = _shexjs_core__WEBPACK_IMPORTED_MODULE_0___default.a.Util.emptySchema();
            loaded = new Set([]);
            _context3.next = 7;
            return load(uri);

          case 7:
            return _context3.abrupt("return", merged);

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _loadURI.apply(this, arguments);
}

function loadText(_x3) {
  return _loadText.apply(this, arguments);
}

function _loadText() {
  _loadText = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(shex) {
    var ipfs,
        merged,
        loaded,
        load,
        _load4,
        _args5 = arguments;

    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _load4 = function _load6() {
              _load4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(schema) {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _shexjs_core__WEBPACK_IMPORTED_MODULE_0___default.a.Util.merge(merged, schema, false, true);

                        if (!Array.isArray(schema.imports)) {
                          _context4.next = 5;
                          break;
                        }

                        _context4.next = 4;
                        return Promise.all(schema.imports.filter(function (uri) {
                          return !loaded.has(uri);
                        }).map(function (schema) {
                          return resolveURI(schema, ipfs).then(load);
                        }));

                      case 4:
                        delete schema.imports;

                      case 5:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));
              return _load4.apply(this, arguments);
            };

            load = function _load5(_x5) {
              return _load4.apply(this, arguments);
            };

            ipfs = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : null;
            merged = _shexjs_core__WEBPACK_IMPORTED_MODULE_0___default.a.Util.emptySchema();
            loaded = new Set([]);
            _context5.next = 7;
            return load(_shexjs_parser__WEBPACK_IMPORTED_MODULE_1___default.a.construct().parse(shex));

          case 7:
            return _context5.abrupt("return", merged);

          case 8:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _loadText.apply(this, arguments);
}

/***/ }),

/***/ "../lib/match.js":
/*!***********************!*\
  !*** ../lib/match.js ***!
  \***********************/
/*! exports provided: matchTripleConstraint, matchShape, image, preImage, getRange */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchTripleConstraint", function() { return matchTripleConstraint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchShape", function() { return matchShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "image", function() { return image; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "preImage", function() { return preImage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRange", function() { return getRange; });
/* harmony import */ var n3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! n3 */ "../node_modules/n3/src/index.js");
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schema.js */ "../lib/schema.js");
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./state.js */ "../lib/state.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "../lib/utils.js");
/* harmony import */ var _satisfies_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./satisfies.js */ "../lib/satisfies.js");
/* harmony import */ var _order_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./order.js */ "../lib/order.js");
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _marked = /*#__PURE__*/regeneratorRuntime.mark(matchTripleConstraint),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(preImage),
    _marked3 = /*#__PURE__*/regeneratorRuntime.mark(matchTypedTripleConstraint);

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }








function matchTripleConstraint(subject, _ref, state) {
  var predicate, valueExpr, p, objects, _iterator, _step, object, node;

  return regeneratorRuntime.wrap(function matchTripleConstraint$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          predicate = _ref.predicate, valueExpr = _ref.valueExpr;
          p = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(predicate);
          objects = state.pushout.getObjects(subject, p, null);
          _iterator = _createForOfIteratorHelper(objects);
          _context.prev = 4;

          _iterator.s();

        case 6:
          if ((_step = _iterator.n()).done) {
            _context.next = 14;
            break;
          }

          object = _step.value;
          node = matchValueExpr(predicate, object, valueExpr, state);

          if (!(node !== null)) {
            _context.next = 12;
            break;
          }

          _context.next = 12;
          return node;

        case 12:
          _context.next = 6;
          break;

        case 14:
          _context.next = 19;
          break;

        case 16:
          _context.prev = 16;
          _context.t0 = _context["catch"](4);

          _iterator.e(_context.t0);

        case 19:
          _context.prev = 19;

          _iterator.f();

          return _context.finish(19);

        case 22:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[4, 16, 19, 22]]);
}

function matchValueExpr(predicate, object, valueExpr, state) {
  if (valueExpr === undefined) {
    return object;
  } else if (typeof valueExpr === "string") {
    if (object.termType === "BlankNode") {
      var _state$types$get = state.types.get(valueExpr),
          type = _state$types$get.type;

      var typeNode = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(type);
      var n = state.pushout.countQuads(object, _vocab_js__WEBPACK_IMPORTED_MODULE_6__["rdfTypeNode"], typeNode, null);

      if (n > 0) {
        var path = state.path.concat([[predicate, Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(object)]]);
        var key = "".concat(valueExpr, "\t").concat(object.value);
        var references = state.references.get(key);

        if (references === undefined) {
          state.references.set(key, [path]);
        } else {
          references.push(path);
        }

        return object;
      }
    }
  } else if (valueExpr.type === "NodeConstraint") {
    if (Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object, valueExpr)) {
      return object;
    }
  } else if (valueExpr.type === "Shape" || valueExpr.type === "ShapeAnd") {
    if (object.termType !== "Literal") {
      state.path.push([predicate, Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(object)]);
      var tree = matchShape(object, valueExpr, state);
      state.path.pop();
      return tree;
    }
  }

  return null;
}

function matchShape(subject, shapeExpr, state) {
  var _getShape = Object(_schema_js__WEBPACK_IMPORTED_MODULE_1__["getShape"])(shapeExpr),
      _getShape2 = _slicedToArray(_getShape, 2),
      nodeConstraint = _getShape2[0],
      shape = _getShape2[1];

  if (nodeConstraint !== null) {
    if (!Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_4__["default"])(subject, nodeConstraint)) {
      return null;
    }
  }

  var tree = {
    termType: "Tree",
    subject: subject,
    properties: new Map()
  };
  var references = [];

  var _iterator2 = _createForOfIteratorHelper(Object(_schema_js__WEBPACK_IMPORTED_MODULE_1__["getExpressions"])(shape)),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var tripleConstraint = _step2.value;
      var predicate = tripleConstraint.predicate,
          valueExpr = tripleConstraint.valueExpr,
          min = tripleConstraint.min,
          max = tripleConstraint.max;

      if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_1__["isDatatypeAnnotation"])(tripleConstraint)) {
        tree.properties.set(predicate, _objectSpread(_objectSpread({}, getRange(min, max)), {}, {
          order: Object(_order_js__WEBPACK_IMPORTED_MODULE_5__["getTypeOrder"])(tripleConstraint),
          values: Array.from(matchTypedTripleConstraint(subject, tripleConstraint, state))
        }));
      } else if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_1__["isWithAnnotation"])(tripleConstraint)) {
        references.push(tripleConstraint);
      } else if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_1__["isMetaAnnotation"])(tripleConstraint)) {
        var _tripleConstraint$ann2 = _slicedToArray(tripleConstraint.annotations, 2),
            metaReference = _tripleConstraint$ann2[0].object,
            sort = _tripleConstraint$ann2[1];

        if (sort === undefined) {
          var order = function order(a, b) {
            return Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(a).value < Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(b).value;
          };

          var graphs = new Map();

          var property = _objectSpread(_objectSpread({}, getRange(min, max)), {}, {
            order: order,
            values: [],
            reference: metaReference,
            graphs: graphs
          });

          var nullMatches = new Set();
          var p = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(predicate);

          var _iterator7 = _createForOfIteratorHelper(preImage(subject, state)),
              _step7;

          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var coSubject = _step7.value;
              var quads = state.coproduct.getQuads(coSubject, p, null, null);

              var _iterator9 = _createForOfIteratorHelper(quads),
                  _step9;

              try {
                for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                  var _step9$value = _step9.value,
                      object = _step9$value.object,
                      graph = _step9$value.graph;
                  var id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(object);

                  if (nullMatches.has(id)) {
                    continue;
                  } else if (graphs.has(id)) {
                    graphs.get(id).add(Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(graph));
                  } else {
                    var node = matchValueExpr(predicate, object, valueExpr, state);

                    if (node === null) {
                      nullMatches.add(id);
                    } else {
                      property.values.push(node);
                      graphs.set(id, new Set([Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(graph)]));
                    }
                  }
                }
              } catch (err) {
                _iterator9.e(err);
              } finally {
                _iterator9.f();
              }
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }

          var _iterator8 = _createForOfIteratorHelper(graphs),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var _step8$value = _slicedToArray(_step8.value, 2),
                  _id = _step8$value[0],
                  meta = _step8$value[1];

              var path = state.path.concat([[predicate, _id]]);

              var _iterator10 = _createForOfIteratorHelper(meta),
                  _step10;

              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var _graph = _step10.value;
                  var key = "".concat(metaReference, "\t").concat(_graph);

                  var _references2 = state.metaReferences.get(key);

                  if (_references2 === undefined) {
                    state.metaReferences.set(key, [path]);
                  } else {
                    _references2.push(path);
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }

          tree.properties.set(predicate, property);
        } else if (sort.predicate === _vocab_js__WEBPACK_IMPORTED_MODULE_6__["rex"]["with"]) {
          // sort.object
          var _order = function _order(a, b) {
            return Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(a).value < Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(b).value;
          };

          var _graphs = new Map();

          var _property = _objectSpread(_objectSpread({}, getRange(min, max)), {}, {
            order: _order,
            values: [],
            reference: metaReference,
            withReference: sort.object,
            graphs: _graphs
          });

          var _nullMatches = new Set();

          var _p = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(predicate);

          var _iterator11 = _createForOfIteratorHelper(preImage(subject, state)),
              _step11;

          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var _coSubject = _step11.value;

              var _quads = state.coproduct.getQuads(_coSubject, _p, null, null);

              var _iterator13 = _createForOfIteratorHelper(_quads),
                  _step13;

              try {
                for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                  var _step13$value = _step13.value,
                      _object = _step13$value.object,
                      _graph2 = _step13$value.graph;

                  var _id2 = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(_object);

                  if (_nullMatches.has(_id2)) {
                    continue;
                  } else if (_graphs.has(_id2)) {
                    _graphs.get(_id2).add(Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(_graph2));
                  } else {
                    var _node = matchValueExpr(predicate, _object, valueExpr, state);

                    if (_node === null) {
                      _nullMatches.add(_id2);
                    } else {
                      _property.values.push(_node);

                      _graphs.set(_id2, new Set([Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(_graph2)]));
                    }
                  }
                }
              } catch (err) {
                _iterator13.e(err);
              } finally {
                _iterator13.f();
              }
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }

          var _iterator12 = _createForOfIteratorHelper(_graphs),
              _step12;

          try {
            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
              var _step12$value = _slicedToArray(_step12.value, 2),
                  _id3 = _step12$value[0],
                  _meta = _step12$value[1];

              var _path = state.path.concat([[predicate, _id3]]);

              var _iterator14 = _createForOfIteratorHelper(_meta),
                  _step14;

              try {
                for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                  var _graph3 = _step14.value;

                  var _key = "".concat(metaReference, "\t").concat(_graph3);

                  var _references3 = state.metaReferences.get(_key);

                  if (_references3 === undefined) {
                    state.metaReferences.set(_key, [_path]);
                  } else {
                    _references3.push(_path);
                  }
                }
              } catch (err) {
                _iterator14.e(err);
              } finally {
                _iterator14.f();
              }
            }
          } catch (err) {
            _iterator12.e(err);
          } finally {
            _iterator12.f();
          }

          tree.properties.set(predicate, _property);
        }
      } else {
        tree.properties.set(predicate, _objectSpread(_objectSpread({}, getRange(min, max)), {}, {
          order: Object(_order_js__WEBPACK_IMPORTED_MODULE_5__["getLexicographicOrder"])(tripleConstraint),
          values: Array.from(matchTripleConstraint(subject, tripleConstraint, state))
        }));
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  var _loop = function _loop() {
    var tripleConstraint = _references[_i2];

    var predicate = tripleConstraint.predicate,
        valueExpr = tripleConstraint.valueExpr,
        min = tripleConstraint.min,
        max = tripleConstraint.max,
        _tripleConstraint$ann = _slicedToArray(tripleConstraint.annotations, 1),
        referencePredicate = _tripleConstraint$ann[0].object;

    var reference = tree.properties.get(referencePredicate);

    if (reference === undefined) {
      throw new Error("Reference property not found: ".concat(referencePredicate));
    }

    var p = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(predicate);
    var ref = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(referencePredicate);
    var links = new Map();
    var nullMatches = new Set();
    var values = [];

    var _iterator3 = _createForOfIteratorHelper(reference.values),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var value = _step3.value;

        var _iterator4 = _createForOfIteratorHelper(preImage(Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(value), state)),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var coReference = _step4.value;
            var coSubjects = state.coproduct.getSubjects(ref, coReference, null);

            var _iterator5 = _createForOfIteratorHelper(coSubjects),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var coSubject = _step5.value;

                if (state.components.get(coSubject.value) === subject.value) {
                  var coObjects = state.coproduct.getObjects(coSubject, p, null);

                  var _iterator6 = _createForOfIteratorHelper(coObjects),
                      _step6;

                  try {
                    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                      var coObject = _step6.value;
                      var object = image(coObject, state);
                      var id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(object);

                      if (nullMatches.has(id)) {
                        continue;
                      } else if (links.has(id)) {
                        if (reference.order(value, links.get(id))) {
                          links.set(id, value);
                        }
                      } else {
                        var node = matchValueExpr(predicate, object, valueExpr, state);

                        if (node === null) {
                          nullMatches.add(id);
                        } else {
                          links.set(id, value);
                          values.push(node);
                        }
                      }
                    }
                  } catch (err) {
                    _iterator6.e(err);
                  } finally {
                    _iterator6.f();
                  }
                }
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    tree.properties.set(predicate, _objectSpread(_objectSpread({}, getRange(min, max)), {}, {
      order: function order(a, b) {
        return reference.order(links.get(Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(a))), links.get(Object(_utils_js__WEBPACK_IMPORTED_MODULE_3__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_2__["getNodeTerm"])(b))));
      },
      values: values
    }));
  };

  for (var _i2 = 0, _references = references; _i2 < _references.length; _i2++) {
    _loop();
  }

  return Object.freeze(tree);
}
function image(term, state) {
  if (term.termType === "BlankNode") {
    return n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(state.components.get(term.value));
  }

  return term;
}
function preImage(term, state) {
  var _iterator15, _step15, value;

  return regeneratorRuntime.wrap(function preImage$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          if (!(term.termType === "BlankNode")) {
            _context2.next = 20;
            break;
          }

          _iterator15 = _createForOfIteratorHelper(state.inverse.get(term.value));
          _context2.prev = 2;

          _iterator15.s();

        case 4:
          if ((_step15 = _iterator15.n()).done) {
            _context2.next = 10;
            break;
          }

          value = _step15.value;
          _context2.next = 8;
          return n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].blankNode(value);

        case 8:
          _context2.next = 4;
          break;

        case 10:
          _context2.next = 15;
          break;

        case 12:
          _context2.prev = 12;
          _context2.t0 = _context2["catch"](2);

          _iterator15.e(_context2.t0);

        case 15:
          _context2.prev = 15;

          _iterator15.f();

          return _context2.finish(15);

        case 18:
          _context2.next = 22;
          break;

        case 20:
          _context2.next = 22;
          return term;

        case 22:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[2, 12, 15, 18]]);
}
var getRange = function getRange(min, max) {
  return {
    min: min === undefined ? 1 : min,
    max: max === undefined ? 1 : max === -1 ? Infinity : max
  };
};

function matchLiteralType(node, tripleConstraint) {
  return node.termType === "Literal" && tripleConstraint.valueExpr.datatype === node.datatype.value;
}

function matchTypedTripleConstraint(subject, tripleConstraint, state) {
  var predicate, objects, _iterator16, _step16, object;

  return regeneratorRuntime.wrap(function matchTypedTripleConstraint$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          predicate = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(tripleConstraint.predicate);
          objects = state.pushout.getObjects(subject, predicate, null);
          _iterator16 = _createForOfIteratorHelper(objects);
          _context3.prev = 3;

          _iterator16.s();

        case 5:
          if ((_step16 = _iterator16.n()).done) {
            _context3.next = 13;
            break;
          }

          object = _step16.value;

          if (!matchLiteralType(object, tripleConstraint)) {
            _context3.next = 11;
            break;
          }

          if (!Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_4__["default"])(object, tripleConstraint.valueExpr)) {
            _context3.next = 11;
            break;
          }

          _context3.next = 11;
          return object;

        case 11:
          _context3.next = 5;
          break;

        case 13:
          _context3.next = 18;
          break;

        case 15:
          _context3.prev = 15;
          _context3.t0 = _context3["catch"](3);

          _iterator16.e(_context3.t0);

        case 18:
          _context3.prev = 18;

          _iterator16.f();

          return _context3.finish(18);

        case 21:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, null, [[3, 15, 18, 21]]);
}

/***/ }),

/***/ "../lib/materialize.js":
/*!*****************************!*\
  !*** ../lib/materialize.js ***!
  \*****************************/
/*! exports provided: materialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "materialize", function() { return materialize; });
/* harmony import */ var n3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! n3 */ "../node_modules/n3/src/index.js");
/* harmony import */ var _cospan_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cospan.js */ "../lib/cospan.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ "../lib/utils.js");
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state.js */ "../lib/state.js");
/* harmony import */ var _match_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./match.js */ "../lib/match.js");
/* harmony import */ var _collect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./collect.js */ "../lib/collect.js");
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
function _toArray(arr) { return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest(); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }









function trim(node, state) {
  if (node.termType === "Tree") {
    var _iterator = _createForOfIteratorHelper(node.properties),
        _step;

    try {
      var _loop = function _loop() {
        var _step$value = _slicedToArray(_step.value, 2),
            predicate = _step$value[0],
            property = _step$value[1];

        var graphs = property.graphs,
            reference = property.reference,
            withReference = property.withReference;

        if (graphs !== undefined && reference !== undefined) {
          var table = state.tables.get(reference);

          if (withReference === undefined) {
            property.values = property.values.filter(function (node) {
              var id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(node));
              var graph = graphs.get(id);

              var _iterator2 = _createForOfIteratorHelper(graph),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var name = _step2.value;

                  var _image = Object(_match_js__WEBPACK_IMPORTED_MODULE_4__["image"])(Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["fromId"])(name), state),
                      value = _image.value;

                  if (!table.has(value)) {
                    graph["delete"](name);
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }

              if (graph.size === 0) {
                graphs["delete"](id);
                return false;
              }

              return true;
            });
          } else {
            var ids = new Map();
            var p = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(withReference);
            var order = null;

            var _iterator3 = _createForOfIteratorHelper(table.values()),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var tree = _step3.value;
                var withProperty = tree.properties.get(withReference);

                if (withProperty !== undefined) {
                  if (order === null) {
                    order = withProperty.order;
                  } else if (withProperty.order !== order) {
                    throw new Error("Mismatching orders");
                  }

                  var _iterator4 = _createForOfIteratorHelper(withProperty.values),
                      _step4;

                  try {
                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                      var value = _step4.value;

                      if (value.termType !== "Literal") {
                        throw new Error("Only literal meta properties can be referenced");
                      }

                      var coSubjects = state.coproduct.getSubjects(p, Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(value), null);

                      var _iterator5 = _createForOfIteratorHelper(coSubjects),
                          _step5;

                      try {
                        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                          var coGraph = _step5.value;
                          var component = state.components.get(coGraph.value);

                          if (coGraph.termType === "BlankNode" && component === tree.subject.value) {
                            var _iterator6 = _createForOfIteratorHelper(Object(_match_js__WEBPACK_IMPORTED_MODULE_4__["preImage"])(node.subject, state)),
                                _step6;

                            try {
                              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                                var coSubject = _step6.value;
                                var coObjects = state.coproduct.getObjects(coSubject, predicate, coGraph);

                                var _iterator7 = _createForOfIteratorHelper(coObjects),
                                    _step7;

                                try {
                                  for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                                    var term = _step7.value;
                                    var id = Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(term);
                                    var min = ids.get(id);

                                    if (min === undefined || withProperty.order(value, min)) {
                                      ids.set(id, value);
                                    }
                                  }
                                } catch (err) {
                                  _iterator7.e(err);
                                } finally {
                                  _iterator7.f();
                                }
                              }
                            } catch (err) {
                              _iterator6.e(err);
                            } finally {
                              _iterator6.f();
                            }
                          }
                        }
                      } catch (err) {
                        _iterator5.e(err);
                      } finally {
                        _iterator5.f();
                      }
                    }
                  } catch (err) {
                    _iterator4.e(err);
                  } finally {
                    _iterator4.f();
                  }
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }

            property.values = property.values.filter(function (value) {
              return ids.has(Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(value)));
            });

            property.order = function (a, b) {
              var A = ids.get(Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(a)));
              var B = ids.get(Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(b)));
              return order(A, B);
            };
          }
        }

        property.values = property.values.filter(function (node) {
          return trim(node, state);
        });

        if (property.values.length < property.min) {
          return {
            v: false
          };
        }
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _ret = _loop();

        if (_typeof(_ret) === "object") return _ret.v;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }

  return true;
}

function deleteReference(shape, subjectValue, references) {
  var _iterator8 = _createForOfIteratorHelper(references),
      _step8;

  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var _step8$value = _slicedToArray(_step8.value, 2),
          key = _step8$value[0],
          refs = _step8$value[1];

      var _iterator9 = _createForOfIteratorHelper(refs.entries()),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 2),
              i = _step9$value[0],
              _step9$value$ = _slicedToArray(_step9$value[1], 1),
              _step9$value$$ = _slicedToArray(_step9$value$[0], 2),
              refShape = _step9$value$$[0],
              refSubject = _step9$value$$[1];

          if (refShape === shape && refSubject === subjectValue) {
            refs.splice(i, 1);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      if (refs.length === 0) {
        references["delete"](key);
      }
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
}

function handleDelete(shape, subjectValue, state) {
  state.tables.get(shape)["delete"](subjectValue);
  deleteReference(shape, subjectValue, state.references);
  deleteReference(shape, subjectValue, state.metaReferences);
  var key = "".concat(shape, "\t").concat(subjectValue);
  var references = state.references.get(key);

  if (references !== undefined) {
    var _iterator10 = _createForOfIteratorHelper(references),
        _step10;

    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var _step10$value = _toArray(_step10.value),
            _step10$value$ = _slicedToArray(_step10$value[0], 2),
            refShape = _step10$value$[0],
            refSubject = _step10$value$[1],
            values = _step10$value.slice(1);

        var tree = state.tables.get(refShape).get(refSubject);
        var valid = percolate(tree, values);

        if (!valid) {
          handleDelete(refShape, refSubject, state);
        }
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
  }

  var metaReferences = state.metaReferences.get(key);

  if (metaReferences !== undefined) {
    var _iterator11 = _createForOfIteratorHelper(metaReferences),
        _step11;

    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var _step11$value = _toArray(_step11.value),
            _step11$value$ = _slicedToArray(_step11$value[0], 2),
            _refShape = _step11$value$[0],
            _refSubject = _step11$value$[1],
            _values = _step11$value.slice(1);

        var _tree = state.tables.get(_refShape).get(_refSubject);

        var _valid = percolateMeta(subjectValue, _tree, _values);

        if (!_valid) {
          handleDelete(_refShape, _refSubject, state);
        }
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
  }
}

function percolate(tree, _ref) {
  var _ref2 = _toArray(_ref),
      _ref2$ = _slicedToArray(_ref2[0], 2),
      predicate = _ref2$[0],
      object = _ref2$[1],
      values = _ref2.slice(1);

  var property = tree.properties.get(predicate);

  if (values.length === 0) {
    var index = property.values.findIndex(function (node) {
      return Object(_utils_js__WEBPACK_IMPORTED_MODULE_2__["toId"])(Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(node)) === object;
    });

    if (index !== -1) {
      property.values.splice(index, 1);
    }
  } else {
    property.values = property.values.filter(function (node) {
      return node.termType !== "Tree" || percolate(node, values);
    });
  }

  return property.values.length >= property.min;
}

function percolateMeta(subjectValue, tree, _ref3) {
  var _ref4 = _toArray(_ref3),
      _ref4$ = _slicedToArray(_ref4[0], 2),
      predicate = _ref4$[0],
      object = _ref4$[1],
      values = _ref4.slice(1);

  var property = tree.properties.get(predicate);

  if (values.length === 0) {
    if (property.reference !== undefined && property.graphs !== undefined) {
      var graphs = property.graphs.get(object);
      graphs["delete"](subjectValue);

      if (graphs.size === 0) {
        return false;
      }
    }
  } else {
    property.values = property.values.filter(function (node) {
      return node.termType !== "Tree" || percolateMeta(subjectValue, node, values);
    });
  }

  return property.values.length >= property.min;
}

function populateDataset(_ref5, dataset) {
  var subject = _ref5.subject,
      properties = _ref5.properties;

  var _iterator12 = _createForOfIteratorHelper(properties),
      _step12;

  try {
    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
      var _step12$value = _slicedToArray(_step12.value, 2),
          key = _step12$value[0],
          property = _step12$value[1];

      var predicate = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(key);

      var _iterator13 = _createForOfIteratorHelper(Object(_collect_js__WEBPACK_IMPORTED_MODULE_5__["collect"])(property)),
          _step13;

      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var node = _step13.value;
          dataset.push(n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].quad(subject, predicate, Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(node)));

          if (node.termType === "Tree") {
            populateDataset(node, dataset);
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  } catch (err) {
    _iterator12.e(err);
  } finally {
    _iterator12.f();
  }
}

function materialize(schema, datasets) {
  var types = Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getTypeMap"])(schema);
  var state = Object.freeze(Object.assign({
    types: types,
    tables: new Map(),
    path: [],
    references: new Map(),
    metaReferences: new Map()
  }, Object(_cospan_js__WEBPACK_IMPORTED_MODULE_1__["cospan"])(types, datasets)));

  var _iterator14 = _createForOfIteratorHelper(types),
      _step14;

  try {
    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
      var _step14$value = _slicedToArray(_step14.value, 2),
          id = _step14$value[0],
          _step14$value$ = _step14$value[1],
          type = _step14$value$.type,
          shapeExpr = _step14$value$.shapeExpr;

      var table = new Map();
      var subjects = state.pushout.getSubjects(_vocab_js__WEBPACK_IMPORTED_MODULE_6__["rdfTypeNode"], n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(type), null);

      var _iterator17 = _createForOfIteratorHelper(subjects),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var subject = _step17.value;
          state.path.push([id, subject.value]);
          var tree = Object(_match_js__WEBPACK_IMPORTED_MODULE_4__["matchShape"])(subject, shapeExpr, state);

          if (tree !== null) {
            table.set(subject.value, tree);
          }

          state.path.pop();
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }

      state.tables.set(id, table);
    } // First we trim minimums

  } catch (err) {
    _iterator14.e(err);
  } finally {
    _iterator14.f();
  }

  var _iterator15 = _createForOfIteratorHelper(state.tables),
      _step15;

  try {
    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
      var _step15$value = _slicedToArray(_step15.value, 2),
          shape = _step15$value[0],
          _table = _step15$value[1];

      var _iterator18 = _createForOfIteratorHelper(_table),
          _step18;

      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var _step18$value = _slicedToArray(_step18.value, 2),
              subjectValue = _step18$value[0],
              _tree2 = _step18$value[1];

          var valid = trim(_tree2, state);

          if (!valid) {
            handleDelete(shape, subjectValue, state);
          }
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }
    } // The we trim meta annotations
    // for (const [shape, table] of state.tables) {
    // 	for (const [subject, tree] of table) {
    // 		const valid = metaTrim(tree, state)
    // 		if (!valid) {
    // 			handleDelete(shape, subject, state)
    // 		}
    // 	}
    // }
    // Then we sort, take maximums, and populate

  } catch (err) {
    _iterator15.e(err);
  } finally {
    _iterator15.f();
  }

  var dataset = [];

  var _iterator16 = _createForOfIteratorHelper(state.tables.values()),
      _step16;

  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var _table2 = _step16.value;

      var _iterator19 = _createForOfIteratorHelper(_table2.values()),
          _step19;

      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var _tree3 = _step19.value;
          populateDataset(_tree3, dataset);
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }

  return dataset;
}

/***/ }),

/***/ "../lib/order.js":
/*!***********************!*\
  !*** ../lib/order.js ***!
  \***********************/
/*! exports provided: getLexicographicOrder, getTypeOrder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLexicographicOrder", function() { return getLexicographicOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypeOrder", function() { return getTypeOrder; });
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
/* harmony import */ var _satisfies_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./satisfies.js */ "../lib/satisfies.js");
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema.js */ "../lib/schema.js");
/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./state.js */ "../lib/state.js");
var _numericInteger, _numericDecimal, _numericDouble, _numericFloat, _temporal, _boolean2, _lexicographic;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var numericInteger = (_numericInteger = {}, _defineProperty(_numericInteger, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].greatest, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeInteger"])(a) < Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeInteger"])(b);
}), _defineProperty(_numericInteger, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].least, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeInteger"])(a) > Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeInteger"])(b);
}), _numericInteger);
var numericDecimal = (_numericDecimal = {}, _defineProperty(_numericDecimal, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].greatest, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDecimal"])(a) < Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDecimal"])(b);
}), _defineProperty(_numericDecimal, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].least, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDecimal"])(a) > Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDecimal"])(b);
}), _numericDecimal);
var numericDouble = (_numericDouble = {}, _defineProperty(_numericDouble, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].greatest, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDouble"])(a) < Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDouble"])(b);
}), _defineProperty(_numericDouble, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].least, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDouble"])(a) > Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeDouble"])(b);
}), _numericDouble);
var numericFloat = (_numericFloat = {}, _defineProperty(_numericFloat, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].greatest, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeFloat"])(a) < Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeFloat"])(b);
}), _defineProperty(_numericFloat, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].least, function (a, b) {
  return Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeFloat"])(a) > Object(_satisfies_js__WEBPACK_IMPORTED_MODULE_1__["encodeFloat"])(b);
}), _numericFloat);

function getNumericOrder(sort, datatype) {
  if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"].decimal) {
    return numericDecimal[sort];
  } else if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"]["double"]) {
    return numericDouble[sort];
  } else if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"]["float"]) {
    return numericFloat[sort];
  } else {
    return numericInteger[sort];
  }
}

var temporal = (_temporal = {}, _defineProperty(_temporal, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].earliest, function (a, b) {
  return new Date(a.value) < new Date(b.value);
}), _defineProperty(_temporal, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].latest, function (a, b) {
  return new Date(a.value) > new Date(b.value);
}), _temporal);

var _boolean = (_boolean2 = {}, _defineProperty(_boolean2, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].all, function (a, b) {
  return a.value === "true" && b.value === "true";
}), _defineProperty(_boolean2, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].any, function (a, b) {
  return a.value === "true" || b.value === "true";
}), _boolean2);

var lexicographic = (_lexicographic = {}, _defineProperty(_lexicographic, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].first, function (a, b) {
  return Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(a).value < Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(b).value;
}), _defineProperty(_lexicographic, _vocab_js__WEBPACK_IMPORTED_MODULE_0__["rex"].last, function (a, b) {
  return Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(a).value > Object(_state_js__WEBPACK_IMPORTED_MODULE_3__["getNodeTerm"])(b).value;
}), _lexicographic);
function getLexicographicOrder(tripleConstraint) {
  var sort = tripleConstraint.annotations === undefined ? _vocab_js__WEBPACK_IMPORTED_MODULE_0__["defaultSort"] : tripleConstraint.annotations[0].object;
  return lexicographic[sort];
}
function getTypeOrder(tripleConstraint) {
  if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(tripleConstraint)) {
    var datatype = tripleConstraint.valueExpr.datatype,
        _tripleConstraint$ann = _slicedToArray(tripleConstraint.annotations, 1),
        sort = _tripleConstraint$ann[0].object;

    if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"].decimal) {
      return numericDecimal[sort];
    } else if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"]["double"]) {
      return numericDouble[sort];
    } else if (datatype === _vocab_js__WEBPACK_IMPORTED_MODULE_0__["xsd"]["float"]) {
      return numericFloat[sort];
    } else {
      return numericInteger[sort];
    }
  } else if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_2__["isTemporal"])(tripleConstraint)) {
    var _tripleConstraint$ann2 = _slicedToArray(tripleConstraint.annotations, 1),
        _sort = _tripleConstraint$ann2[0].object;

    return temporal[_sort];
  } else if (Object(_schema_js__WEBPACK_IMPORTED_MODULE_2__["isBoolean"])(tripleConstraint)) {
    var _tripleConstraint$ann3 = _slicedToArray(tripleConstraint.annotations, 1),
        _sort2 = _tripleConstraint$ann3[0].object;

    return _boolean[_sort2];
  } else {
    return lexicographic[_vocab_js__WEBPACK_IMPORTED_MODULE_0__["defaultSort"]];
  }
}

/***/ }),

/***/ "../lib/satisfies.js":
/*!***************************!*\
  !*** ../lib/satisfies.js ***!
  \***************************/
/*! exports provided: TypedLiteral, integerDatatype, integer, integerRanges, isInteger, encodeInteger, decimal, isDecimal, encodeDecimal, float, isFloat, encodeFloat, double, isDouble, encodeDouble, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypedLiteral", function() { return TypedLiteral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerDatatype", function() { return integerDatatype; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integer", function() { return integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integerRanges", function() { return integerRanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteger", function() { return isInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeInteger", function() { return encodeInteger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decimal", function() { return decimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDecimal", function() { return isDecimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeDecimal", function() { return encodeDecimal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "float", function() { return _float; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFloat", function() { return isFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeFloat", function() { return encodeFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "double", function() { return _double; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDouble", function() { return isDouble; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "encodeDouble", function() { return encodeDouble; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return nodeSatisfies; });
/* harmony import */ var io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! io-ts/es6/index.js */ "../node_modules/io-ts/es6/index.js");
/* harmony import */ var _constraint_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constraint.js */ "../lib/constraint.js");
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
var _Object$freeze;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





function isTypedLiteral(node, value) {
  return node.termType === "Literal" && value.is(node.datatype.value);
}

var typedLiteral = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  termType: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Literal"),
  value: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"],
  language: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(""),
  datatype: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    termType: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NamedNode"),
    value: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
  })
});
var TypedLiteral = function TypedLiteral(value) {
  return new io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["Type"]("TypedLiteral", function (node) {
    return typedLiteral.is(node) && value.is(node.datatype.value);
  }, function (input, context) {
    return isTypedLiteral(input, value) ? Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["success"])(input) : Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["failure"])(input, context);
  }, io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["identity"]);
};
var integerPattern = /^[+-]?[0-9]+$/;
var decimalPattern = /^[+\-]?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][+\-]?[0-9]+)?$/;
var integerDatatype = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].integer), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].positiveInteger), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].nonPositiveInteger), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].negativeInteger), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].nonNegativeInteger), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["long"]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["int"]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["short"]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["byte"]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedLong), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedInt), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedShort), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedByte)]);
var integer = TypedLiteral(integerDatatype);
var integerRanges = Object.freeze((_Object$freeze = {}, _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].integer, [-Infinity, Infinity]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].positiveInteger, [1, Infinity]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].nonPositiveInteger, [-Infinity, 0]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].negativeInteger, [-Infinity, -1]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].nonNegativeInteger, [0, Infinity]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["long"], [-9223372036854775808, 9223372036854775807]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["int"], [-2147483648, 2147483647]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["short"], [-32768, 32767]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["byte"], [-128, 127]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedLong, [0, 18446744073709551615]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedInt, [0, 4294967295]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedShort, [0, 65535]), _defineProperty(_Object$freeze, _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].unsignedByte, [0, 255]), _Object$freeze));
var isInteger = function isInteger(input) {
  if (integer.is(input) && integerPattern.test(input.value)) {
    var value = parseInt(input.value);

    var _integerRanges$input$ = _slicedToArray(integerRanges[input.datatype.value], 2),
        min = _integerRanges$input$[0],
        max = _integerRanges$input$[1];

    return min <= value && value <= max;
  }

  return false;
};
var encodeInteger = function encodeInteger(_ref) {
  var value = _ref.value;
  return parseInt(value);
};
var decimal = TypedLiteral(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].decimal));
var isDecimal = function isDecimal(input) {
  return decimal.is(input) && decimalPattern.test(input.value);
};
var encodeDecimal = function encodeDecimal(_ref2) {
  var value = _ref2.value;
  return parseFloat(value);
};

var _float = TypedLiteral(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["float"]));


var isFloat = function isFloat(input) {
  return _float.is(input) && (input.value === "NaN" || input.value === "INF" || input.value === "-INF" || decimalPattern.test(input.value));
};
var encodeFloat = function encodeFloat(_ref3) {
  var value = _ref3.value;
  return value === "NaN" ? NaN : value === "INF" ? Infinity : value === "-INF" ? -Infinity : parseFloat(value);
};

var _double = TypedLiteral(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"]["double"]));


var isDouble = function isDouble(input) {
  return _double.is(input) && (input.value === "NaN" || input.value === "INF" || input.value === "-INF" || decimalPattern.test(input.value));
};
var encodeDouble = function encodeDouble(_ref4) {
  var value = _ref4.value;
  return value === "NaN" ? NaN : value === "INF" ? Infinity : value === "-INF" ? -Infinity : Number(value);
};
var totalDigitsPattern = /[0-9]/g;
var fractionDigitsPattern = /^[+-]?[0-9]*\.?([0-9]*)$/;

function validateNumericFacets(node, _ref5) {
  var minexclusive = _ref5.minexclusive,
      maxexclusive = _ref5.maxexclusive,
      mininclusive = _ref5.mininclusive,
      maxinclusive = _ref5.maxinclusive,
      fractiondigits = _ref5.fractiondigits,
      totaldigits = _ref5.totaldigits;
  var value;

  if (totaldigits !== undefined || fractiondigits !== undefined) {
    if (isDecimal(node)) {
      value = encodeDecimal(node);
    } else if (isInteger(node)) {
      value = encodeInteger(node);
    } else {
      return false;
    }
  } else if (minexclusive !== undefined || maxexclusive !== undefined || mininclusive !== undefined || minexclusive !== undefined) {
    if (isDecimal(node)) {
      value = encodeDecimal(node);
    } else if (isDouble(node)) {
      value = encodeDouble(node);
    } else if (isFloat(node)) {
      value = encodeFloat(node);
    } else if (isInteger(node)) {
      value = encodeInteger(node);
    } else {
      return false;
    }
  } else {
    return true;
  }

  var valid = true;

  if (valid && minexclusive !== undefined) {
    valid = minexclusive < value;
  }

  if (valid && mininclusive !== undefined) {
    valid = mininclusive <= value;
  }

  if (valid && maxexclusive !== undefined) {
    valid = value < maxexclusive;
  }

  if (valid && maxinclusive !== undefined) {
    valid = value <= maxinclusive;
  }

  if (valid && totaldigits !== undefined) {
    var match = node.value.match(totalDigitsPattern);
    valid = match !== null && match.length <= totaldigits;
  }

  if (valid && fractiondigits !== undefined) {
    var _match = node.value.match(fractionDigitsPattern);

    return _match !== null && _match[1].length <= fractiondigits;
  }

  return valid;
}

function validateStringFacets(value, _ref6) {
  var length = _ref6.length,
      minlength = _ref6.minlength,
      maxlength = _ref6.maxlength,
      pattern = _ref6.pattern,
      flags = _ref6.flags;
  var valid = true;

  if (valid && length !== undefined) {
    valid = value.length === length;
  }

  if (valid && minlength !== undefined) {
    valid = minlength <= value.length;
  }

  if (valid && maxlength !== undefined) {
    valid = value.length <= maxlength;
  }

  if (valid && pattern !== undefined) {
    valid = new RegExp(pattern, flags).test(value);
  }

  return valid;
}

function validateValueSet(node, _ref7) {
  var values = _ref7.values;
  var value = node.value;
  return values.some(function (v) {
    if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["objectValue"].is(v)) {
      if (typeof v === "string") {
        return node.termType === "NamedNode" && value === v;
      } else if (node.termType !== "Literal" || value !== v.value) {
        return false;
      } else if (v.type === undefined || v.type === _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].string) {
        return node.datatype.value === _vocab_js__WEBPACK_IMPORTED_MODULE_2__["xsd"].string;
      } else if (v.type !== node.datatype.value) {
        return false;
      } else if (v.type === _vocab_js__WEBPACK_IMPORTED_MODULE_2__["rdf"].langString) {
        return node.language === v.language;
      } else {
        return true;
      }
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["IriStem"].is(v)) {
      return node.termType === "NamedNode" && value.startsWith(v.stem);
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["IriStemRange"].is(v)) {
      return node.termType === "NamedNode" && iriOrLiteralStem(value, v.stem) && !v.exclusions.some(function (e) {
        return iriOrLiteralStem(value, e);
      });
    } else if (node.termType !== "Literal") {
      return false;
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["LiteralStem"].is(v)) {
      return value.startsWith(v.stem);
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["LiteralStemRange"].is(v)) {
      return iriOrLiteralStem(value, v.stem) && !v.exclusions.some(function (e) {
        return iriOrLiteralStem(value, e);
      });
    } else if (node.datatype.value !== _vocab_js__WEBPACK_IMPORTED_MODULE_2__["rdf"].langString) {
      return false;
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["Language"].is(v)) {
      return node.language === v.languageTag;
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["LanguageStem"].is(v)) {
      return languageStem(node.language, v);
    } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["LanguageStemRange"].is(v)) {
      return languageStem(node.language, v.stem) && !v.exclusions.some(function (e) {
        return languageStem(node.language, e);
      });
    }
  });
}

var iriOrLiteralStem = function iriOrLiteralStem(value, s) {
  return typeof s === "string" ? value === s : s.type === "Wildcard" ? true : value.startsWith(s.stem);
};

var languageStem = function languageStem(language, s) {
  if (typeof s === "string") {
    return language === s;
  } else if (s.type === "Wildcard") {
    return true;
  } else {
    var l = language.toLowerCase();
    var p = s.stem.toLowerCase();
    return p === "" || l === p || l.startsWith(p) && l[p.length] === "-";
  }
};

function nodeSatisfies(node, constraint) {
  if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["iriNodeKind"].is(constraint)) {
    if (constraint.nodeKind === "iri" && node.termType !== "NamedNode") {
      return false;
    }

    return validateStringFacets(node.value, constraint);
  } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["nonLiteralNodeKind"].is(constraint)) {
    if (constraint.nodeKind === "bnode") {
      return node.termType === "BlankNode";
    } else if (constraint.nodeKind === "nonliteral") {
      return node.termType === "BlankNode" || node.termType === "NamedNode";
    }
  } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["literalNodeKind"].is(constraint)) {
    var value = node.value,
        termType = node.termType;
    return termType === "Literal" && validateStringFacets(value, constraint) && validateNumericFacets(node, constraint);
  } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["dataType"].is(constraint)) {
    return node.termType === "Literal" && node.datatype.value === constraint.datatype && validateStringFacets(node.value, constraint) && validateNumericFacets(node, constraint);
  } else if (_constraint_js__WEBPACK_IMPORTED_MODULE_1__["valueSet"].is(constraint)) {
    return validateValueSet(node, constraint) && validateStringFacets(node.value, constraint) && validateNumericFacets(node, constraint);
  } else {
    var numeric = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["exact"])(_constraint_js__WEBPACK_IMPORTED_MODULE_1__["numericFacet"]).decode(constraint);

    if (numeric._tag === "Right" && Object.keys(numeric).length > 0) {
      return validateNumericFacets(node, numeric.right);
    }

    var _string = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["exact"])(_constraint_js__WEBPACK_IMPORTED_MODULE_1__["stringFacet"]).decode(constraint);

    if (_string._tag === "Right" && Object.keys(_string).length > 0) {
      return validateStringFacets(node.value, _string.right);
    }
  }

  return true;
}

/***/ }),

/***/ "../lib/schema.js":
/*!************************!*\
  !*** ../lib/schema.js ***!
  \************************/
/*! exports provided: lexicographic, numeric, temporal, boolean, ShapeAnd, shapeExpr, isNumeric, isTemporal, isBoolean, isDatatypeAnnotation, isWithAnnotation, isMetaAnnotation, isEmptyProductShape, Schema, getExpressions, getShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lexicographic", function() { return lexicographic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "numeric", function() { return numeric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "temporal", function() { return temporal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boolean", function() { return _boolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ShapeAnd", function() { return ShapeAnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shapeExpr", function() { return shapeExpr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumeric", function() { return isNumeric; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTemporal", function() { return isTemporal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDatatypeAnnotation", function() { return isDatatypeAnnotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isWithAnnotation", function() { return isWithAnnotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isMetaAnnotation", function() { return isMetaAnnotation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmptyProductShape", function() { return isEmptyProductShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Schema", function() { return Schema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getExpressions", function() { return getExpressions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShape", function() { return getShape; });
/* harmony import */ var io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! io-ts/es6/index.js */ "../node_modules/io-ts/es6/index.js");
/* harmony import */ var _satisfies_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./satisfies.js */ "../lib/satisfies.js");
/* harmony import */ var _constraint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constraint.js */ "../lib/constraint.js");
/* harmony import */ var _vocab_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vocab.js */ "../lib/vocab.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }





var lexicographic = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].first), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].last)]);
var numeric = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].greatest), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].least)]);
var temporal = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].earliest), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].latest)]);

var _boolean = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].all), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].any)]);



var annotation = function annotation(predicate, object) {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Annotation"),
    predicate: predicate,
    object: object
  });
};

var metaAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].meta), io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]);
var withAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"]["with"]), io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]);
var keyAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].key), io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]);
var ShapeAnd = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["recursion"])("ShapeAnd", function () {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("ShapeAnd"),
    shapeExprs: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([_constraint_js__WEBPACK_IMPORTED_MODULE_2__["NodeConstraint"], Shape])
  });
});
var shapeExpr = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["recursion"])("shapeExpr", function () {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"], _constraint_js__WEBPACK_IMPORTED_MODULE_2__["NodeConstraint"], Shape, ShapeAnd]);
});
function isNumeric(tripleConstraint) {
  if (tripleConstraint.annotations === undefined || tripleConstraint.annotations.length !== 1) {
    return false;
  } else {
    var _tripleConstraint$ann = _slicedToArray(tripleConstraint.annotations, 1),
        object = _tripleConstraint$ann[0].object;

    return numeric.is(object);
  }
}
function isTemporal(tripleConstraint) {
  if (tripleConstraint.annotations === undefined || tripleConstraint.annotations.length !== 1) {
    return false;
  } else {
    var _tripleConstraint$ann2 = _slicedToArray(tripleConstraint.annotations, 1),
        object = _tripleConstraint$ann2[0].object;

    return temporal.is(object);
  }
}
function isBoolean(tripleConstraint) {
  if (tripleConstraint.annotations === undefined || tripleConstraint.annotations.length !== 1) {
    return false;
  } else {
    var _tripleConstraint$ann3 = _slicedToArray(tripleConstraint.annotations, 1),
        object = _tripleConstraint$ann3[0].object;

    return _boolean.is(object);
  }
}
function isDatatypeAnnotation(tripleConstraint) {
  if (tripleConstraint.annotations === undefined) {
    return false;
  }

  var _tripleConstraint$ann4 = _slicedToArray(tripleConstraint.annotations, 1),
      object = _tripleConstraint$ann4[0].object;

  return numeric.is(object) || temporal.is(object) || _boolean.is(object);
}
function isWithAnnotation(tripleConstraint) {
  return tripleConstraint.annotations !== undefined && tripleConstraint.annotations.length === 1 && tripleConstraint.annotations[0].predicate === _vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"]["with"];
}
function isMetaAnnotation(tripleConstraint) {
  return tripleConstraint.annotations !== undefined && tripleConstraint.annotations[0].predicate === _vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].meta;
}
var lexicographicAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].sort), lexicographic),
    numericAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].sort), numeric),
    temporalAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].sort), temporal),
    booleanAnnotation = annotation(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rex"].sort), _boolean);
var TripleConstraint = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["recursion"])("TripleConstraint", function () {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("TripleConstraint"),
    predicate: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
    valueExpr: shapeExpr,
    inverse: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(false),
    min: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"],
    max: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["number"]
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([metaAnnotation, withAnnotation, Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([lexicographicAnnotation, numericAnnotation, temporalAnnotation, booleanAnnotation])])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([metaAnnotation])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([withAnnotation])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    valueExpr: Object(_constraint_js__WEBPACK_IMPORTED_MODULE_2__["dataTypeConstraint"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"]["double"]), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"].decimal), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"]["float"]), _satisfies_js__WEBPACK_IMPORTED_MODULE_1__["integerDatatype"]])),
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([numericAnnotation])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    valueExpr: Object(_constraint_js__WEBPACK_IMPORTED_MODULE_2__["dataTypeConstraint"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"].date), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"].dateTime)])),
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([temporalAnnotation])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    valueExpr: Object(_constraint_js__WEBPACK_IMPORTED_MODULE_2__["dataTypeConstraint"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["xsd"]["boolean"])),
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([booleanAnnotation])
  }), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
    annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([lexicographicAnnotation])
  })])]);
});
var Shape = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["recursion"])("Shape", function () {
  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Shape"),
    expression: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([TripleConstraint, EachOf])
  });
});
var tripleConstraints = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(TripleConstraint);
var UniqueTripleConstraints = new io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["Type"]("UniqueTripleConstraints", function (input) {
  if (tripleConstraints.is(input) && input.length > 1) {
    var predicates = new Set(input.map(function (c) {
      return c.predicate;
    }));
    return predicates.size === input.length;
  }

  return false;
}, function (input, context) {
  var result = tripleConstraints.validate(input, context);

  if (result._tag === "Right" && result.right.length > 1) {
    var _Set = new Set(result.right.map(function (c) {
      return c.predicate;
    })),
        size = _Set.size;

    if (size === result.right.length) {
      return result;
    }
  }

  return Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["failure"])(input, context);
}, io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["identity"]);
var EachOf = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("EachOf"),
  expressions: UniqueTripleConstraints
});
var typedTripleConstraint = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("TripleConstraint"),
  predicate: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])(_vocab_js__WEBPACK_IMPORTED_MODULE_3__["rdf"].type),
  valueExpr: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
    values: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"]])
  })
});
var TypedTripleConstraints = new io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["Type"]("TypedTripleConstraints", function (input) {
  if (UniqueTripleConstraints.is(input) && typedTripleConstraint.is(input[0])) {
    var _iterator = _createForOfIteratorHelper(input.slice(1)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var tripleConstraint = _step.value;

        if (isWithAnnotation(tripleConstraint)) {
          var _ret = function () {
            var _tripleConstraint$ann5 = _slicedToArray(tripleConstraint.annotations, 1),
                object = _tripleConstraint$ann5[0].object;

            if (object !== tripleConstraint.predicate) {
              var match = input.find(function (_ref) {
                var predicate = _ref.predicate;
                return predicate === object;
              });

              if (match === undefined) {
                return {
                  v: false
                };
              }
            }
          }();

          if (_typeof(_ret) === "object") return _ret.v;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return true;
  }

  return false;
}, function (input, context) {
  var result = UniqueTripleConstraints.validate(input, context);

  if (result._tag === "Right") {
    var _result$right = _slicedToArray(result.right, 1),
        one = _result$right[0];

    var typed = typedTripleConstraint.validate(one, context);

    if (typed._tag === "Right") {
      var _iterator2 = _createForOfIteratorHelper(result.right),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var tripleConstraint = _step2.value;

          if (isWithAnnotation(tripleConstraint)) {
            var _ret2 = function () {
              var _tripleConstraint$ann6 = _slicedToArray(tripleConstraint.annotations, 1),
                  object = _tripleConstraint$ann6[0].object;

              if (object !== tripleConstraint.predicate) {
                var match = result.right.find(function (_ref2) {
                  var predicate = _ref2.predicate;
                  return predicate === object;
                });

                if (match === undefined) {
                  return {
                    v: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["failure"])(input, context)
                  };
                }
              }
            }();

            if (_typeof(_ret2) === "object") return _ret2.v;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return result;
    } else {
      return typed;
    }
  } else {
    return result;
  }
}, io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["identity"]);
var emptyProductShape = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Shape"),
  expression: typedTripleConstraint
});
var productShape = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["intersection"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Shape"),
  expression: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("EachOf"),
    expressions: TypedTripleConstraints
  })
}), Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["partial"])({
  annotations: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([keyAnnotation])
})]);
var product = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["union"])([emptyProductShape, productShape]);
var isEmptyProductShape = function isEmptyProductShape(shape) {
  return shape.expression.type === "TripleConstraint";
};
var schema = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
  type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("Schema"),
  shapes: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["array"])(Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
    type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("ShapeAnd"),
    id: io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["string"],
    shapeExprs: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["tuple"])([Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["type"])({
      type: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("NodeConstraint"),
      nodeKind: Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["literal"])("bnode")
    }), product])
  }))
});
var Schema = Object(io_ts_es6_index_js__WEBPACK_IMPORTED_MODULE_0__["brand"])(schema, function (s) {
  var _iterator3 = _createForOfIteratorHelper(s.shapes),
      _step3;

  try {
    var _loop = function _loop() {
      var _step3$value$shapeExp = _slicedToArray(_step3.value.shapeExprs, 2),
          _ = _step3$value$shapeExp[0],
          shape = _step3$value$shapeExp[1];

      if (isEmptyProductShape(shape) || shape.annotations === undefined) {
        return "continue";
      }

      var _shape$annotations = _slicedToArray(shape.annotations, 1),
          object = _shape$annotations[0].object;

      var key = shape.expression.expressions.find(function (_ref3) {
        var predicate = _ref3.predicate;
        return predicate === object;
      });

      if (key === undefined) {
        return {
          v: false
        };
      }

      var _iterator4 = _createForOfIteratorHelper(shape.expression.expressions),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var tripleConstraint = _step4.value;
          var valid = checkMetaAnnotations(s, tripleConstraint);

          if (!valid) {
            return {
              v: false
            };
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    };

    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var _ret3 = _loop();

      switch (_ret3) {
        case "continue":
          continue;

        default:
          if (_typeof(_ret3) === "object") return _ret3.v;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  return true;
}, "Keyed");

function checkMetaAnnotations(s, tripleConstraint) {
  if (isMetaAnnotation(tripleConstraint)) {
    var valueExpr = tripleConstraint.valueExpr,
        _tripleConstraint$ann7 = _slicedToArray(tripleConstraint.annotations, 2),
        object = _tripleConstraint$ann7[0].object,
        withReference = _tripleConstraint$ann7[1];

    var match = s.shapes.find(function (_ref4) {
      var id = _ref4.id;
      return object === id;
    });

    if (match === undefined) {
      return false;
    }

    if (withReference !== undefined) {
      var _match$shapeExprs = _slicedToArray(match.shapeExprs, 2),
          _ = _match$shapeExprs[0],
          expression = _match$shapeExprs[1].expression;

      if (expression.type === "TripleConstraint") {
        return false;
      }

      var reference = expression.expressions.find(function (_ref5) {
        var predicate = _ref5.predicate;
        return predicate === withReference.object;
      });

      if (reference === undefined || isWithAnnotation(reference) || isMetaAnnotation(reference)) {
        return false;
      }
    }

    if (valueExpr !== undefined && typeof valueExpr !== "string" && valueExpr.type !== "NodeConstraint") {
      var _getShape = getShape(valueExpr),
          _getShape2 = _slicedToArray(_getShape, 2),
          _2 = _getShape2[0],
          shape = _getShape2[1];

      var _iterator5 = _createForOfIteratorHelper(getExpressions(shape)),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _expression = _step5.value;
          checkMetaAnnotations(s, _expression);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }

  return true;
}

function getExpressions(shape) {
  if (shape.expression.type === "EachOf") {
    return shape.expression.expressions;
  } else {
    return [shape.expression];
  }
}
var getShape = function getShape(shape) {
  return shape.type === "ShapeAnd" ? shape.shapeExprs : [null, shape];
};

/***/ }),

/***/ "../lib/state.js":
/*!***********************!*\
  !*** ../lib/state.js ***!
  \***********************/
/*! exports provided: getNodeTerm, getTypeMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeTerm", function() { return getNodeTerm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTypeMap", function() { return getTypeMap; });
/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./schema.js */ "../lib/schema.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


var getNodeTerm = function getNodeTerm(node) {
  return node.termType === "Tree" ? node.subject : node;
};
function getTypeMap(schema) {
  return new Map(schema.shapes.map(function (shapeExpr) {
    var id = shapeExpr.id,
        _shapeExpr$shapeExprs = _slicedToArray(shapeExpr.shapeExprs, 2),
        _ = _shapeExpr$shapeExprs[0],
        shape = _shapeExpr$shapeExprs[1];

    var _getExpressions = Object(_schema_js__WEBPACK_IMPORTED_MODULE_0__["getExpressions"])(shape),
        _getExpressions2 = _slicedToArray(_getExpressions, 1),
        _getExpressions2$0$va = _slicedToArray(_getExpressions2[0].valueExpr.values, 1),
        type = _getExpressions2$0$va[0];

    var value = {
      type: type,
      shapeExpr: shapeExpr
    };

    if (!Object(_schema_js__WEBPACK_IMPORTED_MODULE_0__["isEmptyProductShape"])(shape) && shape.annotations !== undefined) {
      var _shape$annotations = _slicedToArray(shape.annotations, 1),
          object = _shape$annotations[0].object;

      value.key = object;
    }

    return [id, Object.freeze(value)];
  }));
}

/***/ }),

/***/ "../lib/utils.js":
/*!***********************!*\
  !*** ../lib/utils.js ***!
  \***********************/
/*! exports provided: fromId, toId, parseQuads, parseStore, writeStore, parseJsonLd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromId", function() { return fromId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toId", function() { return toId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseQuads", function() { return parseQuads; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseStore", function() { return parseStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeStore", function() { return writeStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseJsonLd", function() { return parseJsonLd; });
/* harmony import */ var n3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! n3 */ "../node_modules/n3/src/index.js");
/* harmony import */ var jsonld__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonld */ "../node_modules/jsonld/lib/jsonld.js");
/* harmony import */ var jsonld__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonld__WEBPACK_IMPORTED_MODULE_1__);
function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var Store = n3__WEBPACK_IMPORTED_MODULE_0__["Store"],
    StreamParser = n3__WEBPACK_IMPORTED_MODULE_0__["StreamParser"],
    StreamWriter = n3__WEBPACK_IMPORTED_MODULE_0__["StreamWriter"],
    DataFactory = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"];
var _DataFactory$internal = DataFactory.internal,
    fromId = _DataFactory$internal.fromId,
    toId = _DataFactory$internal.toId;

var options = {
  format: "application/n-quads",
  blankNodePrefix: "_:"
};
var parseQuads = function parseQuads(input) {
  return new Promise(function (resolve, reject) {
    var quads = [];
    new StreamParser(options).on("data", function (quad) {
      return quads.push(quad);
    }).on("end", function () {
      return resolve(quads);
    }).on("error", function (err) {
      return reject(err);
    }).end(input);
  });
};
var parseStore = function parseStore(input) {
  return new Promise(function (resolve, reject) {
    var store = new Store();
    new StreamParser(options).on("data", function (quad) {
      return store.addQuad(quad);
    }).on("end", function () {
      return resolve(store);
    }).on("error", function (err) {
      return reject(err);
    }).end(input);
  });
};
var writeStore = function writeStore(store) {
  return new Promise(function (resolve, reject) {
    var s = "";
    var writer = new StreamWriter(options).on("data", function (chunk) {
      return s += chunk;
    }).on("end", function () {
      return resolve(s);
    }).on("error", function (err) {
      return reject(err);
    });

    var _iterator = _createForOfIteratorHelper(store.getQuads(null, null, null, null)),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var quad = _step.value;
        // The writer.write typing is incorrect here, writer accepts object streams of quads
        writer.write(quad);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    writer.end();
  });
};
var parseJsonLd = function parseJsonLd(input, documentLoader) {
  var options = {};

  if (documentLoader !== null) {
    options.documentLoader = documentLoader;
  }

  return jsonld__WEBPACK_IMPORTED_MODULE_1___default.a.toRDF(input, options).then(function (result) {
    var _iterator2 = _createForOfIteratorHelper(result),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var quad = _step2.value;

        if (quad.subject.value.startsWith("_:")) {
          quad.subject.value = quad.subject.value.slice(2);
        }

        if (quad.object.value.startsWith("_:")) {
          quad.object.value = quad.object.value.slice(2);
        }

        if (quad.graph.value.startsWith("_:")) {
          quad.graph.value = quad.graph.value.slice(2);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return result;
  });
};

/***/ }),

/***/ "../lib/vocab.js":
/*!***********************!*\
  !*** ../lib/vocab.js ***!
  \***********************/
/*! exports provided: defaultSort, rex, xsd, rdfTypeNode, rdf */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultSort", function() { return defaultSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rex", function() { return rex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "xsd", function() { return xsd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rdfTypeNode", function() { return rdfTypeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rdf", function() { return rdf; });
/* harmony import */ var n3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! n3 */ "../node_modules/n3/src/index.js");

var rexKey = "http://underlay.org/ns/rex#key",
    rexWith = "http://underlay.org/ns/rex#with",
    rexMeta = "http://underlay.org/ns/rex#meta",
    rexSort = "http://underlay.org/ns/rex#sort",
    rexFirst = "http://underlay.org/ns/rex#first",
    rexLast = "http://underlay.org/ns/rex#last",
    rexGreatest = "http://underlay.org/ns/rex#greatest",
    rexLeast = "http://underlay.org/ns/rex#least",
    rexEarliest = "http://underlay.org/ns/rex#earliest",
    rexLatest = "http://underlay.org/ns/rex#latest",
    rexAll = "http://underlay.org/ns/rex#all",
    rexAny = "http://underlay.org/ns/rex#any";
var defaultSort = rexFirst;
var rex = {
  key: rexKey,
  "with": rexWith,
  meta: rexMeta,
  sort: rexSort,
  first: rexFirst,
  last: rexLast,
  greatest: rexGreatest,
  least: rexLeast,
  earliest: rexEarliest,
  latest: rexLatest,
  all: rexAll,
  any: rexAny
};
var xsdString = "http://www.w3.org/2001/XMLSchema#string",
    xsdDate = "http://www.w3.org/2001/XMLSchema#date",
    xsdDateTime = "http://www.w3.org/2001/XMLSchema#dateTime",
    xsdBoolean = "http://www.w3.org/2001/XMLSchema#boolean",
    xsdDecimal = "http://www.w3.org/2001/XMLSchema#decimal",
    xsdFloat = "http://www.w3.org/2001/XMLSchema#float",
    xsdDouble = "http://www.w3.org/2001/XMLSchema#double",
    xsdInteger = "http://www.w3.org/2001/XMLSchema#integer",
    xsdPositiveInteger = "http://www.w3.org/2001/XMLSchema#positiveInteger",
    xsdNonPositiveInteger = "http://www.w3.org/2001/XMLSchema#nonPositiveInteger",
    xsdNegativeInteger = "http://www.w3.org/2001/XMLSchema#negativeInteger",
    xsdNonNegativeInteger = "http://www.w3.org/2001/XMLSchema#nonNegativeInteger",
    xsdLong = "http://www.w3.org/2001/XMLSchema#long",
    xsdInt = "http://www.w3.org/2001/XMLSchema#int",
    xsdShort = "http://www.w3.org/2001/XMLSchema#short",
    xsdByte = "http://www.w3.org/2001/XMLSchema#byte",
    xsdUnsignedLong = "http://www.w3.org/2001/XMLSchema#unsignedLong",
    xsdUnsignedInt = "http://www.w3.org/2001/XMLSchema#unsignedInt",
    xsdUnsignedShort = "http://www.w3.org/2001/XMLSchema#unsignedShort",
    xsdUnsignedByte = "http://www.w3.org/2001/XMLSchema#unsignedByte";
var xsd = {
  string: xsdString,
  date: xsdDate,
  dateTime: xsdDateTime,
  "boolean": xsdBoolean,
  decimal: xsdDecimal,
  "float": xsdFloat,
  "double": xsdDouble,
  integer: xsdInteger,
  positiveInteger: xsdPositiveInteger,
  nonPositiveInteger: xsdNonPositiveInteger,
  negativeInteger: xsdNegativeInteger,
  nonNegativeInteger: xsdNonNegativeInteger,
  "long": xsdLong,
  "int": xsdInt,
  "short": xsdShort,
  "byte": xsdByte,
  unsignedLong: xsdUnsignedLong,
  unsignedInt: xsdUnsignedInt,
  unsignedShort: xsdUnsignedShort,
  unsignedByte: xsdUnsignedByte
};
var rdfType = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
    rdfLangString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
var rdfTypeNode = n3__WEBPACK_IMPORTED_MODULE_0__["DataFactory"].namedNode(rdfType);
var rdf = {
  type: rdfType,
  langString: rdfLangString
};

/***/ }),

/***/ "../node_modules/canonicalize/lib/canonicalize.js":
/*!********************************************************!*\
  !*** ../node_modules/canonicalize/lib/canonicalize.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* jshint esversion: 6 */
/* jslint node: true */


module.exports = function (object) {
  return serialize(object);

  function serialize (object) {
    if (object === null || typeof object !== 'object' || object.toJSON != null) {
      return JSON.stringify(object);
    }
    if (Array.isArray(object) && object.length === 0) {
      return '[]';
    }
    if (Array.isArray(object) && object.length === 1) {
      return '[' + serialize(object[0]) + ']';
    }
    if (Array.isArray(object)) {
      return '[' + object.reduce((t, cv, ci) => {
        t = (ci === 1 ? serialize(t) : t);
        return t + ',' + serialize(cv);
      }) + ']';
    }
    const keys = Object.keys(object);
    if (keys.length === 0) {
      return '{}';
    }
    if (keys.length === 1) {
      return '{' + serialize(keys[0]) + ':' + serialize(object[keys[0]]) + '}';
    }
    return '{' + keys.sort().reduce((t, cv, ci) => {
      t = (ci === 1 ? serialize(t) + ':' + serialize(object[t]) : t);
      return t + ',' + serialize(cv) + ':' + serialize(object[cv]);
    }) + '}';
  }
};


/***/ }),

/***/ "../node_modules/fp-ts/es6/ChainRec.js":
/*!*********************************************!*\
  !*** ../node_modules/fp-ts/es6/ChainRec.js ***!
  \*********************************************/
/*! exports provided: tailRec */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tailRec", function() { return tailRec; });
/**
 * @since 2.0.0
 */
function tailRec(a, f) {
    var v = f(a);
    while (v._tag === 'Left') {
        v = f(v.left);
    }
    return v.right;
}


/***/ }),

/***/ "../node_modules/fp-ts/es6/Either.js":
/*!*******************************************!*\
  !*** ../node_modules/fp-ts/es6/Either.js ***!
  \*******************************************/
/*! exports provided: isLeft, isRight, left, right, fromNullable, tryCatch, parseJSON, stringifyJSON, fromOption, fromPredicate, fold, getOrElseW, getOrElse, swap, orElse, filterOrElse, map, bimap, mapLeft, ap, apFirst, apSecond, chainW, chain, chainFirst, flatten, alt, duplicate, extend, reduce, foldMap, reduceRight, traverse, sequence, URI, applyEither, getShow, getEq, getSemigroup, getApplySemigroup, getApplyMonoid, getWitherable, getValidation, getValidationSemigroup, getValidationMonoid, either, toError, elem, exists */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLeft", function() { return isLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRight", function() { return isRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function() { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function() { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function() { return fromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatch", function() { return tryCatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseJSON", function() { return parseJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringifyJSON", function() { return stringifyJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOption", function() { return fromOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function() { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function() { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElseW", function() { return getOrElseW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElse", function() { return getOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swap", function() { return swap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orElse", function() { return orElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterOrElse", function() { return filterOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bimap", function() { return bimap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLeft", function() { return mapLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function() { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function() { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function() { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainW", function() { return chainW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function() { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function() { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function() { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function() { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function() { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function() { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function() { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function() { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function() { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyEither", function() { return applyEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function() { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function() { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function() { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplySemigroup", function() { return getApplySemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplyMonoid", function() { return getApplyMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWitherable", function() { return getWitherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidation", function() { return getValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationSemigroup", function() { return getValidationSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationMonoid", function() { return getValidationMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "either", function() { return either; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toError", function() { return toError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function() { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exists", function() { return exists; });
/* harmony import */ var _ChainRec__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChainRec */ "../node_modules/fp-ts/es6/ChainRec.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "../node_modules/fp-ts/es6/function.js");


// -------------------------------------------------------------------------------------
// guards
// -------------------------------------------------------------------------------------
/**
 * Returns `true` if the either is an instance of `Left`, `false` otherwise
 *
 * @category guards
 * @since 2.0.0
 */
function isLeft(ma) {
    switch (ma._tag) {
        case 'Left':
            return true;
        case 'Right':
            return false;
    }
}
/**
 * Returns `true` if the either is an instance of `Right`, `false` otherwise
 *
 * @category guards
 * @since 2.0.0
 */
function isRight(ma) {
    return isLeft(ma) ? false : true;
}
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this
 * structure
 *
 * @category constructors
 * @since 2.0.0
 */
function left(e) {
    return { _tag: 'Left', left: e };
}
/**
 * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias
 * of this structure
 *
 * @category constructors
 * @since 2.0.0
 */
function right(a) {
    return { _tag: 'Right', right: a };
}
// TODO: make lazy in v3
/**
 * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use
 * the provided default as a `Left`
 *
 * @example
 * import { fromNullable, left, right } from 'fp-ts/lib/Either'
 *
 * const parse = fromNullable('nully')
 *
 * assert.deepStrictEqual(parse(1), right(1))
 * assert.deepStrictEqual(parse(null), left('nully'))
 *
 * @category constructors
 * @since 2.0.0
 */
function fromNullable(e) {
    return function (a) { return (a == null ? left(e) : right(a)); };
}
// TODO: `onError => Lazy<A> => Either` in v3
/**
 * Constructs a new `Either` from a function that might throw
 *
 * @example
 * import { Either, left, right, tryCatch } from 'fp-ts/lib/Either'
 *
 * const unsafeHead = <A>(as: Array<A>): A => {
 *   if (as.length > 0) {
 *     return as[0]
 *   } else {
 *     throw new Error('empty array')
 *   }
 * }
 *
 * const head = <A>(as: Array<A>): Either<Error, A> => {
 *   return tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))
 * }
 *
 * assert.deepStrictEqual(head([]), left(new Error('empty array')))
 * assert.deepStrictEqual(head([1, 2, 3]), right(1))
 *
 * @category constructors
 * @since 2.0.0
 */
function tryCatch(f, onError) {
    try {
        return right(f());
    }
    catch (e) {
        return left(onError(e));
    }
}
/**
 * Converts a JavaScript Object Notation (JSON) string into an object.
 *
 * @example
 * import { parseJSON, toError, right, left } from 'fp-ts/lib/Either'
 *
 * assert.deepStrictEqual(parseJSON('{"a":1}', toError), right({ a: 1 }))
 * assert.deepStrictEqual(parseJSON('{"a":}', toError), left(new SyntaxError('Unexpected token } in JSON at position 5')))
 *
 * @category constructors
 * @since 2.0.0
 */
function parseJSON(s, onError) {
    return tryCatch(function () { return JSON.parse(s); }, onError);
}
/**
 * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
 *
 * @example
 * import * as E from 'fp-ts/lib/Either'
 * import { pipe } from 'fp-ts/lib/function'
 *
 * assert.deepStrictEqual(E.stringifyJSON({ a: 1 }, E.toError), E.right('{"a":1}'))
 * const circular: any = { ref: null }
 * circular.ref = circular
 * assert.deepStrictEqual(
 *   pipe(
 *     E.stringifyJSON(circular, E.toError),
 *     E.mapLeft(e => e.message.includes('Converting circular structure to JSON'))
 *   ),
 *   E.left(true)
 * )
 *
 * @category constructors
 * @since 2.0.0
 */
function stringifyJSON(u, onError) {
    return tryCatch(function () { return JSON.stringify(u); }, onError);
}
/**
 * @category constructors
 * @since 2.0.0
 */
var fromOption = function (onNone) { return function (ma) {
    return ma._tag === 'None' ? left(onNone()) : right(ma.value);
}; };
/**
 * @category constructors
 * @since 2.0.0
 */
var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); }; };
// -------------------------------------------------------------------------------------
// destructors
// -------------------------------------------------------------------------------------
/**
 * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,
 * if the value is a `Right` the inner value is applied to the second function.
 *
 * @example
 * import { fold, left, right } from 'fp-ts/lib/Either'
 * import { pipe } from 'fp-ts/lib/function'
 *
 * function onLeft(errors: Array<string>): string {
 *   return `Errors: ${errors.join(', ')}`
 * }
 *
 * function onRight(value: number): string {
 *   return `Ok: ${value}`
 * }
 *
 * assert.strictEqual(
 *   pipe(
 *     right(1),
 *     fold(onLeft, onRight)
 *   ),
 *   'Ok: 1'
 * )
 * assert.strictEqual(
 *   pipe(
 *     left(['error 1', 'error 2']),
 *     fold(onLeft, onRight)
 *   ),
 *   'Errors: error 1, error 2'
 * )
 *
 * @category destructors
 * @since 2.0.0
 */
function fold(onLeft, onRight) {
    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : onRight(ma.right)); };
}
/**
 * Less strict version of [`getOrElse`](#getOrElse).
 *
 * @category destructors
 * @since 2.6.0
 */
var getOrElseW = function (onLeft) { return function (ma) {
    return isLeft(ma) ? onLeft(ma.left) : ma.right;
}; };
/**
 * @category destructors
 * @since 2.0.0
 */
var getOrElse = getOrElseW;
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 2.0.0
 */
function swap(ma) {
    return isLeft(ma) ? right(ma.left) : left(ma.right);
}
/**
 * @category combinators
 * @since 2.0.0
 */
function orElse(onLeft) {
    return function (ma) { return (isLeft(ma) ? onLeft(ma.left) : ma); };
}
/**
 * @category combinators
 * @since 2.0.0
 */
var filterOrElse = function (predicate, onFalse) { return function (ma) {
    return chain_(ma, function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); });
}; };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
 * use the type constructor `F` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */
var map = function (f) { return function (fa) { return map_(fa, f); }; };
/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */
var bimap = function (f, g) { return function (fa) { return bimap_(fa, f, g); }; };
/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */
var mapLeft = function (f) { return function (fa) { return mapLeft_(fa, f); }; };
/**
 * Apply a function to an argument under a type constructor.
 *
 * @category Apply
 * @since 2.0.0
 */
var ap = function (fa) { return function (fab) {
    return ap_(fab, fa);
}; };
/**
 * Combine two effectful actions, keeping only the result of the first.
 *
 * @category Apply
 * @since 2.0.0
 */
var apFirst = function (fb) { return function (fa) {
    return ap_(map_(fa, function (a) { return function () { return a; }; }), fb);
}; };
/**
 * Combine two effectful actions, keeping only the result of the second.
 *
 * @category Apply
 * @since 2.0.0
 */
var apSecond = function (fb) { return function (fa) {
    return ap_(map_(fa, function () { return function (b) { return b; }; }), fb);
}; };
/**
 * Less strict version of [`chain`](#chain).
 *
 * @category Monad
 * @since 2.6.0
 */
var chainW = function (f) { return function (ma) { return chain_(ma, f); }; };
/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation.
 *
 * @category Monad
 * @since 2.0.0
 */
var chain = chainW;
/**
 * Composes computations in sequence, using the return value of one computation to determine the next computation and
 * keeping only the result of the first.
 *
 * @category Monad
 * @since 2.0.0
 */
var chainFirst = function (f) { return function (ma) {
    return chain_(ma, function (a) { return map_(f(a), function () { return a; }); });
}; };
/**
 * @category Monad
 * @since 2.0.0
 */
var flatten = function (mma) { return chain_(mma, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
/**
 * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
 * types of kind `* -> *`.
 *
 * @category Alt
 * @since 2.0.0
 */
var alt = function (that) { return function (fa) {
    return alt_(fa, that);
}; };
/**
 * @category Extend
 * @since 2.0.0
 */
var duplicate = function (wa) { return extend_(wa, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
/**
 * @category Extend
 * @since 2.0.0
 */
var extend = function (f) { return function (ma) {
    return extend_(ma, f);
}; };
/**
 * @category Foldable
 * @since 2.0.0
 */
var reduce = function (b, f) { return function (fa) {
    return reduce_(fa, b, f);
}; };
/**
 * @category Foldable
 * @since 2.0.0
 */
var foldMap = function (M) {
    var foldMapM = foldMap_(M);
    return function (f) { return function (fa) { return foldMapM(fa, f); }; };
};
/**
 * @category Foldable
 * @since 2.0.0
 */
var reduceRight = function (b, f) { return function (fa) {
    return reduceRight_(fa, b, f);
}; };
/**
 * @category Traversable
 * @since 2.6.3
 */
var traverse = function (F) {
    var traverseF = traverse_(F);
    return function (f) { return function (fa) { return traverseF(fa, f); }; };
};
/**
 * @category Traversable
 * @since 2.6.3
 */
var sequence = function (F) { return function (ma) {
    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);
}; };
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 2.0.0
 */
var URI = 'Either';
var map_ = function (ma, f) {
    return isLeft(ma) ? ma : right(f(ma.right));
};
var ap_ = function (mab, ma) {
    return isLeft(mab) ? mab : isLeft(ma) ? ma : right(mab.right(ma.right));
};
var of = right;
var chain_ = function (ma, f) {
    return isLeft(ma) ? ma : f(ma.right);
};
var reduce_ = function (fa, b, f) {
    return isLeft(fa) ? b : f(b, fa.right);
};
var foldMap_ = function (M) { return function (fa, f) {
    return isLeft(fa) ? M.empty : f(fa.right);
}; };
var reduceRight_ = function (fa, b, f) {
    return isLeft(fa) ? b : f(fa.right, b);
};
var traverse_ = function (F) { return function (ma, f) {
    return isLeft(ma) ? F.of(left(ma.left)) : F.map(f(ma.right), right);
}; };
var bimap_ = function (fea, f, g) {
    return isLeft(fea) ? left(f(fea.left)) : right(g(fea.right));
};
var mapLeft_ = function (fea, f) {
    return isLeft(fea) ? left(f(fea.left)) : fea;
};
var alt_ = function (fx, fy) { return (isLeft(fx) ? fy() : fx); };
var extend_ = function (wa, f) {
    return isLeft(wa) ? wa : right(f(wa));
};
var chainRec_ = function (a, f) {
    return Object(_ChainRec__WEBPACK_IMPORTED_MODULE_0__["tailRec"])(f(a), function (e) {
        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));
    });
};
var throwError_ = left;
/**
 * @internal
 */
var applyEither = {
    URI: URI,
    map: map_,
    ap: ap_
};
/**
 * @category instances
 * @since 2.0.0
 */
function getShow(SE, SA) {
    return {
        show: function (ma) { return (isLeft(ma) ? "left(" + SE.show(ma.left) + ")" : "right(" + SA.show(ma.right) + ")"); }
    };
}
/**
 * @category instances
 * @since 2.0.0
 */
function getEq(EL, EA) {
    return {
        equals: function (x, y) {
            return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));
        }
    };
}
/**
 * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are
 * concatenated using the provided `Semigroup`
 *
 * @example
 * import { getSemigroup, left, right } from 'fp-ts/lib/Either'
 * import { semigroupSum } from 'fp-ts/lib/Semigroup'
 *
 * const S = getSemigroup<string, number>(semigroupSum)
 * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
 * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))
 * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))
 * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
 *
 * @category instances
 * @since 2.0.0
 */
function getSemigroup(S) {
    return {
        concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }
    };
}
/**
 * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values
 * are concatenated using the provided `Semigroup`
 *
 * @example
 * import { getApplySemigroup, left, right } from 'fp-ts/lib/Either'
 * import { semigroupSum } from 'fp-ts/lib/Semigroup'
 *
 * const S = getApplySemigroup<string, number>(semigroupSum)
 * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
 * assert.deepStrictEqual(S.concat(left('a'), right(2)), left('a'))
 * assert.deepStrictEqual(S.concat(right(1), left('b')), left('b'))
 * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
 *
 * @category instances
 * @since 2.0.0
 */
function getApplySemigroup(S) {
    return {
        concat: function (x, y) { return (isLeft(x) ? x : isLeft(y) ? y : right(S.concat(x.right, y.right))); }
    };
}
/**
 * @category instances
 * @since 2.0.0
 */
function getApplyMonoid(M) {
    return {
        concat: getApplySemigroup(M).concat,
        empty: right(M.empty)
    };
}
/**
 * Builds `Witherable` instance for `Either` given `Monoid` for the left side
 *
 * @category instances
 * @since 2.0.0
 */
function getWitherable(M) {
    var empty = left(M.empty);
    var compact = function (ma) {
        return isLeft(ma) ? ma : ma.right._tag === 'None' ? left(M.empty) : right(ma.right.value);
    };
    var separate = function (ma) {
        return isLeft(ma)
            ? { left: ma, right: ma }
            : isLeft(ma.right)
                ? { left: right(ma.right.left), right: empty }
                : { left: empty, right: right(ma.right.right) };
    };
    var partitionMap = function (ma, f) {
        if (isLeft(ma)) {
            return { left: ma, right: ma };
        }
        var e = f(ma.right);
        return isLeft(e) ? { left: right(e.left), right: empty } : { left: empty, right: right(e.right) };
    };
    var partition = function (ma, p) {
        return isLeft(ma)
            ? { left: ma, right: ma }
            : p(ma.right)
                ? { left: empty, right: right(ma.right) }
                : { left: right(ma.right), right: empty };
    };
    var filterMap = function (ma, f) {
        if (isLeft(ma)) {
            return ma;
        }
        var ob = f(ma.right);
        return ob._tag === 'None' ? left(M.empty) : right(ob.value);
    };
    var filter = function (ma, predicate) {
        return isLeft(ma) ? ma : predicate(ma.right) ? ma : left(M.empty);
    };
    var wither = function (F) {
        var traverseF = traverse_(F);
        return function (ma, f) { return F.map(traverseF(ma, f), compact); };
    };
    var wilt = function (F) {
        var traverseF = traverse_(F);
        return function (ma, f) { return F.map(traverseF(ma, f), separate); };
    };
    return {
        URI: URI,
        _E: undefined,
        map: map_,
        compact: compact,
        separate: separate,
        filter: filter,
        filterMap: filterMap,
        partition: partition,
        partitionMap: partitionMap,
        traverse: traverse_,
        sequence: sequence,
        reduce: reduce_,
        foldMap: foldMap_,
        reduceRight: reduceRight_,
        wither: wither,
        wilt: wilt
    };
}
// TODO: remove in v3
/**
 * @category instances
 * @since 2.0.0
 */
function getValidation(S) {
    return {
        URI: URI,
        _E: undefined,
        map: map_,
        of: of,
        chain: chain_,
        bimap: bimap_,
        mapLeft: mapLeft_,
        reduce: reduce_,
        foldMap: foldMap_,
        reduceRight: reduceRight_,
        extend: extend_,
        traverse: traverse_,
        sequence: sequence,
        chainRec: chainRec_,
        throwError: throwError_,
        ap: function (mab, ma) {
            return isLeft(mab)
                ? isLeft(ma)
                    ? left(S.concat(mab.left, ma.left))
                    : mab
                : isLeft(ma)
                    ? ma
                    : right(mab.right(ma.right));
        },
        alt: function (fx, f) {
            if (isRight(fx)) {
                return fx;
            }
            var fy = f();
            return isLeft(fy) ? left(S.concat(fx.left, fy.left)) : fy;
        }
    };
}
/**
 * @category instances
 * @since 2.0.0
 */
function getValidationSemigroup(SE, SA) {
    return {
        concat: function (fx, fy) {
            return isLeft(fx)
                ? isLeft(fy)
                    ? left(SE.concat(fx.left, fy.left))
                    : fx
                : isLeft(fy)
                    ? fy
                    : right(SA.concat(fx.right, fy.right));
        }
    };
}
/**
 * @category instances
 * @since 2.0.0
 */
function getValidationMonoid(SE, SA) {
    return {
        concat: getValidationSemigroup(SE, SA).concat,
        empty: right(SA.empty)
    };
}
/**
 * @category instances
 * @since 2.0.0
 */
var either = {
    URI: URI,
    map: map_,
    of: of,
    ap: ap_,
    chain: chain_,
    reduce: reduce_,
    foldMap: foldMap_,
    reduceRight: reduceRight_,
    traverse: traverse_,
    sequence: sequence,
    bimap: bimap_,
    mapLeft: mapLeft_,
    alt: alt_,
    extend: extend_,
    chainRec: chainRec_,
    throwError: throwError_
};
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * Default value for the `onError` argument of `tryCatch`
 *
 * @since 2.0.0
 */
function toError(e) {
    return e instanceof Error ? e : new Error(String(e));
}
/**
 * @since 2.0.0
 */
function elem(E) {
    return function (a, ma) { return (isLeft(ma) ? false : E.equals(a, ma.right)); };
}
/**
 * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.
 *
 * @example
 * import { exists, left, right } from 'fp-ts/lib/Either'
 *
 * const gt2 = exists((n: number) => n > 2)
 *
 * assert.strictEqual(gt2(left('a')), false)
 * assert.strictEqual(gt2(right(1)), false)
 * assert.strictEqual(gt2(right(3)), true)
 *
 * @since 2.0.0
 */
function exists(predicate) {
    return function (ma) { return (isLeft(ma) ? false : predicate(ma.right)); };
}


/***/ }),

/***/ "../node_modules/fp-ts/es6/function.js":
/*!*********************************************!*\
  !*** ../node_modules/fp-ts/es6/function.js ***!
  \*********************************************/
/*! exports provided: identity, unsafeCoerce, not, constant, constTrue, constFalse, constNull, constUndefined, constVoid, flip, flow, tuple, increment, decrement, absurd, tupled, untupled, pipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeCoerce", function() { return unsafeCoerce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function() { return not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constant", function() { return constant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constTrue", function() { return constTrue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constFalse", function() { return constFalse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constNull", function() { return constNull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constUndefined", function() { return constUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constVoid", function() { return constVoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flip", function() { return flip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function() { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function() { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "increment", function() { return increment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decrement", function() { return decrement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "absurd", function() { return absurd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tupled", function() { return tupled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untupled", function() { return untupled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return pipe; });
/**
 * @since 2.0.0
 */
/**
 * @since 2.0.0
 */
function identity(a) {
    return a;
}
/**
 * @since 2.0.0
 */
var unsafeCoerce = identity;
/**
 * @since 2.0.0
 */
function not(predicate) {
    return function (a) { return !predicate(a); };
}
/**
 * @since 2.0.0
 */
function constant(a) {
    return function () { return a; };
}
/**
 * A thunk that returns always `true`
 *
 * @since 2.0.0
 */
var constTrue = function () {
    return true;
};
/**
 * A thunk that returns always `false`
 *
 * @since 2.0.0
 */
var constFalse = function () {
    return false;
};
/**
 * A thunk that returns always `null`
 *
 * @since 2.0.0
 */
var constNull = function () {
    return null;
};
/**
 * A thunk that returns always `undefined`
 *
 * @since 2.0.0
 */
var constUndefined = function () {
    return;
};
/**
 * A thunk that returns always `void`
 *
 * @since 2.0.0
 */
var constVoid = function () {
    return;
};
// TODO: remove in v3
/**
 * Flips the order of the arguments of a function of two arguments.
 *
 * @since 2.0.0
 */
function flip(f) {
    return function (b, a) { return f(a, b); };
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
    switch (arguments.length) {
        case 1:
            return ab;
        case 2:
            return function () {
                return bc(ab.apply(this, arguments));
            };
        case 3:
            return function () {
                return cd(bc(ab.apply(this, arguments)));
            };
        case 4:
            return function () {
                return de(cd(bc(ab.apply(this, arguments))));
            };
        case 5:
            return function () {
                return ef(de(cd(bc(ab.apply(this, arguments)))));
            };
        case 6:
            return function () {
                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
            };
        case 7:
            return function () {
                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
            };
        case 8:
            return function () {
                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
            };
        case 9:
            return function () {
                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
            };
    }
    return;
}
/**
 * @since 2.0.0
 */
function tuple() {
    var t = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        t[_i] = arguments[_i];
    }
    return t;
}
/**
 * @since 2.0.0
 */
function increment(n) {
    return n + 1;
}
/**
 * @since 2.0.0
 */
function decrement(n) {
    return n - 1;
}
/**
 * @since 2.0.0
 */
function absurd(_) {
    throw new Error('Called `absurd` function which should be uncallable');
}
/**
 * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.
 *
 * @example
 * import { tupled } from 'fp-ts/lib/function'
 *
 * const add = tupled((x: number, y: number): number => x + y)
 *
 * assert.strictEqual(add([1, 2]), 3)
 *
 * @since 2.4.0
 */
function tupled(f) {
    return function (a) { return f.apply(void 0, a); };
}
/**
 * Inverse function of `tupled`
 *
 * @since 2.4.0
 */
function untupled(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return f(a);
    };
}
function pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij) {
    switch (arguments.length) {
        case 1:
            return a;
        case 2:
            return ab(a);
        case 3:
            return bc(ab(a));
        case 4:
            return cd(bc(ab(a)));
        case 5:
            return de(cd(bc(ab(a))));
        case 6:
            return ef(de(cd(bc(ab(a)))));
        case 7:
            return fg(ef(de(cd(bc(ab(a))))));
        case 8:
            return gh(fg(ef(de(cd(bc(ab(a)))))));
        case 9:
            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
        case 10:
            return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));
    }
    return;
}


/***/ }),

/***/ "../node_modules/inherits/inherits_browser.js":
/*!****************************************************!*\
  !*** ../node_modules/inherits/inherits_browser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "../node_modules/io-ts/es6/index.js":
/*!******************************************!*\
  !*** ../node_modules/io-ts/es6/index.js ***!
  \******************************************/
/*! exports provided: Type, identity, getFunctionName, getContextEntry, appendContext, failures, failure, success, NullType, nullType, UndefinedType, VoidType, voidType, UnknownType, unknown, StringType, string, NumberType, number, BigIntType, bigint, BooleanType, boolean, AnyArrayType, UnknownArray, AnyDictionaryType, UnknownRecord, FunctionType, Function, RefinementType, brand, Int, LiteralType, literal, KeyofType, keyof, RecursiveType, recursion, ArrayType, array, InterfaceType, type, PartialType, partial, DictionaryType, getDomainKeys, record, UnionType, union, IntersectionType, intersection, TupleType, tuple, ReadonlyType, readonly, ReadonlyArrayType, readonlyArray, strict, TaggedUnionType, taggedUnion, ExactType, exact, null, undefined, Array, interface, void, getValidationError, getDefaultContext, NeverType, never, AnyType, any, Dictionary, ObjectType, object, refinement, Integer, dictionary, StrictType, clean, alias, emptyTags, getTags, getIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFunctionName", function() { return getFunctionName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getContextEntry", function() { return getContextEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendContext", function() { return appendContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "failures", function() { return failures; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "failure", function() { return failure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "success", function() { return success; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NullType", function() { return NullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nullType", function() { return nullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndefinedType", function() { return UndefinedType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VoidType", function() { return VoidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "voidType", function() { return voidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownType", function() { return UnknownType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unknown", function() { return unknown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringType", function() { return StringType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string", function() { return string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberType", function() { return NumberType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "number", function() { return number; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigIntType", function() { return BigIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bigint", function() { return bigint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanType", function() { return BooleanType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boolean", function() { return boolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyArrayType", function() { return AnyArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownArray", function() { return UnknownArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyDictionaryType", function() { return AnyDictionaryType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownRecord", function() { return UnknownRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionType", function() { return FunctionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Function", function() { return Function; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefinementType", function() { return RefinementType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "brand", function() { return brand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int", function() { return Int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiteralType", function() { return LiteralType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "literal", function() { return literal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyofType", function() { return KeyofType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyof", function() { return keyof; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecursiveType", function() { return RecursiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recursion", function() { return recursion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayType", function() { return ArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "array", function() { return array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterfaceType", function() { return InterfaceType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "type", function() { return type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PartialType", function() { return PartialType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partial", function() { return partial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryType", function() { return DictionaryType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDomainKeys", function() { return getDomainKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "record", function() { return record; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnionType", function() { return UnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function() { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntersectionType", function() { return IntersectionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersection", function() { return intersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TupleType", function() { return TupleType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function() { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadonlyType", function() { return ReadonlyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonly", function() { return readonly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadonlyArrayType", function() { return ReadonlyArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonlyArray", function() { return readonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strict", function() { return strict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TaggedUnionType", function() { return TaggedUnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "taggedUnion", function() { return taggedUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExactType", function() { return ExactType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exact", function() { return exact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "null", function() { return nullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undefined", function() { return undefinedType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Array", function() { return UnknownArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interface", function() { return type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "void", function() { return voidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationError", function() { return getValidationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultContext", function() { return getDefaultContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverType", function() { return NeverType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "never", function() { return never; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyType", function() { return AnyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function() { return any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dictionary", function() { return Dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectType", function() { return ObjectType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object", function() { return object; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refinement", function() { return refinement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Integer", function() { return Integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dictionary", function() { return dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StrictType", function() { return StrictType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clean", function() { return clean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alias", function() { return alias; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "emptyTags", function() { return emptyTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTags", function() { return getTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIndex", function() { return getIndex; });
/* harmony import */ var fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/es6/Either */ "../node_modules/fp-ts/es6/Either.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (undefined && undefined.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * @since 1.0.0
 */

/**
 * @category Model
 * @since 1.0.0
 */
var Type = /** @class */ (function () {
    function Type(
    /** a unique name for this codec */
    name, 
    /** a custom type guard */
    is, 
    /** succeeds if a value of type I can be decoded to a value of type A */
    validate, 
    /** converts a value of type A to a value of type O */
    encode) {
        this.name = name;
        this.is = is;
        this.validate = validate;
        this.encode = encode;
        this.decode = this.decode.bind(this);
    }
    /**
     * @since 1.0.0
     */
    Type.prototype.pipe = function (ab, name) {
        var _this = this;
        if (name === void 0) { name = "pipe(" + this.name + ", " + ab.name + ")"; }
        return new Type(name, ab.is, function (i, c) {
            var e = _this.validate(i, c);
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                return e;
            }
            return ab.validate(e.right, c);
        }, this.encode === identity && ab.encode === identity ? identity : function (b) { return _this.encode(ab.encode(b)); });
    };
    /**
     * @since 1.0.0
     */
    Type.prototype.asDecoder = function () {
        return this;
    };
    /**
     * @since 1.0.0
     */
    Type.prototype.asEncoder = function () {
        return this;
    };
    /**
     * a version of `validate` with a default context
     * @since 1.0.0
     */
    Type.prototype.decode = function (i) {
        return this.validate(i, [{ key: '', type: this, actual: i }]);
    };
    return Type;
}());

/**
 * @since 1.0.0
 */
var identity = function (a) { return a; };
/**
 * @since 1.0.0
 */
var getFunctionName = function (f) {
    return f.displayName || f.name || "<function" + f.length + ">";
};
/**
 * @since 1.0.0
 */
var getContextEntry = function (key, decoder) { return ({ key: key, type: decoder }); };
/**
 * @since 1.0.0
 */
var appendContext = function (c, key, decoder, actual) {
    var len = c.length;
    var r = Array(len + 1);
    for (var i = 0; i < len; i++) {
        r[i] = c[i];
    }
    r[len] = { key: key, type: decoder, actual: actual };
    return r;
};
/**
 * @since 1.0.0
 */
var failures = fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["left"];
/**
 * @since 1.0.0
 */
var failure = function (value, context, message) {
    return failures([{ value: value, context: context, message: message }]);
};
/**
 * @since 1.0.0
 */
var success = fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"];
var pushAll = function (xs, ys) {
    var l = ys.length;
    for (var i = 0; i < l; i++) {
        xs.push(ys[i]);
    }
};
// -------------------------------------------------------------------------------------
// primitives
// -------------------------------------------------------------------------------------
/**
 * @since 1.0.0
 */
var NullType = /** @class */ (function (_super) {
    __extends(NullType, _super);
    function NullType() {
        var _this = _super.call(this, 'null', function (u) { return u === null; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'NullType';
        return _this;
    }
    return NullType;
}(Type));

/**
 * @category Primitives
 * @since 1.0.0
 */
var nullType = new NullType();
/**
 * @since 1.0.0
 */
var UndefinedType = /** @class */ (function (_super) {
    __extends(UndefinedType, _super);
    function UndefinedType() {
        var _this = _super.call(this, 'undefined', function (u) { return u === void 0; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'UndefinedType';
        return _this;
    }
    return UndefinedType;
}(Type));

var undefinedType = new UndefinedType();
/**
 * @since 1.2.0
 */
var VoidType = /** @class */ (function (_super) {
    __extends(VoidType, _super);
    function VoidType() {
        var _this = _super.call(this, 'void', undefinedType.is, undefinedType.validate, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'VoidType';
        return _this;
    }
    return VoidType;
}(Type));

/**
 * @category Primitives
 * @since 1.2.0
 */
var voidType = new VoidType();
/**
 * @since 1.5.0
 */
var UnknownType = /** @class */ (function (_super) {
    __extends(UnknownType, _super);
    function UnknownType() {
        var _this = _super.call(this, 'unknown', function (_) { return true; }, success, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'UnknownType';
        return _this;
    }
    return UnknownType;
}(Type));

/**
 * @category Primitives
 * @since 1.5.0
 */
var unknown = new UnknownType();
/**
 * @since 1.0.0
 */
var StringType = /** @class */ (function (_super) {
    __extends(StringType, _super);
    function StringType() {
        var _this = _super.call(this, 'string', function (u) { return typeof u === 'string'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'StringType';
        return _this;
    }
    return StringType;
}(Type));

/**
 * @category Primitives
 * @since 1.0.0
 */
var string = new StringType();
/**
 * @since 1.0.0
 */
var NumberType = /** @class */ (function (_super) {
    __extends(NumberType, _super);
    function NumberType() {
        var _this = _super.call(this, 'number', function (u) { return typeof u === 'number'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'NumberType';
        return _this;
    }
    return NumberType;
}(Type));

/**
 * @category Primitives
 * @since 1.0.0
 */
var number = new NumberType();
/**
 * @since 2.1.0
 */
var BigIntType = /** @class */ (function (_super) {
    __extends(BigIntType, _super);
    function BigIntType() {
        var _this = _super.call(this, 'bigint', 
        // tslint:disable-next-line: valid-typeof
        function (u) { return typeof u === 'bigint'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'BigIntType';
        return _this;
    }
    return BigIntType;
}(Type));

/**
 * @category Primitives
 * @since 2.1.0
 */
var bigint = new BigIntType();
/**
 * @since 1.0.0
 */
var BooleanType = /** @class */ (function (_super) {
    __extends(BooleanType, _super);
    function BooleanType() {
        var _this = _super.call(this, 'boolean', function (u) { return typeof u === 'boolean'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'BooleanType';
        return _this;
    }
    return BooleanType;
}(Type));

/**
 * @category Primitives
 * @since 1.0.0
 */
var boolean = new BooleanType();
/**
 * @since 1.0.0
 */
var AnyArrayType = /** @class */ (function (_super) {
    __extends(AnyArrayType, _super);
    function AnyArrayType() {
        var _this = _super.call(this, 'UnknownArray', Array.isArray, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'AnyArrayType';
        return _this;
    }
    return AnyArrayType;
}(Type));

/**
 * @category Primitives
 * @since 1.7.1
 */
var UnknownArray = new AnyArrayType();
/**
 * @since 1.0.0
 */
var AnyDictionaryType = /** @class */ (function (_super) {
    __extends(AnyDictionaryType, _super);
    function AnyDictionaryType() {
        var _this = _super.call(this, 'UnknownRecord', function (u) {
            var s = Object.prototype.toString.call(u);
            return s === '[object Object]' || s === '[object Window]';
        }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'AnyDictionaryType';
        return _this;
    }
    return AnyDictionaryType;
}(Type));

/**
 * @category Primitives
 * @since 1.7.1
 */
var UnknownRecord = new AnyDictionaryType();
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var FunctionType = /** @class */ (function (_super) {
    __extends(FunctionType, _super);
    function FunctionType() {
        var _this = _super.call(this, 'Function', 
        // tslint:disable-next-line:strict-type-predicates
        function (u) { return typeof u === 'function'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'FunctionType';
        return _this;
    }
    return FunctionType;
}(Type));

/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
// tslint:disable-next-line: deprecation
var Function = new FunctionType();
/**
 * @since 1.0.0
 */
var RefinementType = /** @class */ (function (_super) {
    __extends(RefinementType, _super);
    function RefinementType(name, is, validate, encode, type, predicate) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.type = type;
        _this.predicate = predicate;
        /**
         * @since 1.0.0
         */
        _this._tag = 'RefinementType';
        return _this;
    }
    return RefinementType;
}(Type));

// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category Combinators
 * @since 1.8.1
 */
var brand = function (codec, predicate, name) {
    // tslint:disable-next-line: deprecation
    return refinement(codec, predicate, name);
};
/**
 * A branded codec representing an integer
 *
 * @category Primitives
 * @since 1.8.1
 */
var Int = brand(number, function (n) { return Number.isInteger(n); }, 'Int');
/**
 * @since 1.0.0
 */
var LiteralType = /** @class */ (function (_super) {
    __extends(LiteralType, _super);
    function LiteralType(name, is, validate, encode, value) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.value = value;
        /**
         * @since 1.0.0
         */
        _this._tag = 'LiteralType';
        return _this;
    }
    return LiteralType;
}(Type));

/**
 * @category Combinators
 * @since 1.0.0
 */
var literal = function (value, name) {
    if (name === void 0) { name = JSON.stringify(value); }
    var is = function (u) { return u === value; };
    return new LiteralType(name, is, function (u, c) { return (is(u) ? success(value) : failure(u, c)); }, identity, value);
};
/**
 * @since 1.0.0
 */
var KeyofType = /** @class */ (function (_super) {
    __extends(KeyofType, _super);
    function KeyofType(name, is, validate, encode, keys) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.keys = keys;
        /**
         * @since 1.0.0
         */
        _this._tag = 'KeyofType';
        return _this;
    }
    return KeyofType;
}(Type));

var hasOwnProperty = Object.prototype.hasOwnProperty;
/**
 * @category Combinators
 * @since 1.0.0
 */
var keyof = function (keys, name) {
    if (name === void 0) { name = Object.keys(keys)
        .map(function (k) { return JSON.stringify(k); })
        .join(' | '); }
    var is = function (u) { return string.is(u) && hasOwnProperty.call(keys, u); };
    return new KeyofType(name, is, function (u, c) { return (is(u) ? success(u) : failure(u, c)); }, identity, keys);
};
/**
 * @since 1.0.0
 */
var RecursiveType = /** @class */ (function (_super) {
    __extends(RecursiveType, _super);
    function RecursiveType(name, is, validate, encode, runDefinition) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.runDefinition = runDefinition;
        /**
         * @since 1.0.0
         */
        _this._tag = 'RecursiveType';
        return _this;
    }
    return RecursiveType;
}(Type));

Object.defineProperty(RecursiveType.prototype, 'type', {
    get: function () {
        return this.runDefinition();
    },
    enumerable: true,
    configurable: true
});
/**
 * @category Combinators
 * @since 1.0.0
 */
var recursion = function (name, definition) {
    var cache;
    var runDefinition = function () {
        if (!cache) {
            cache = definition(Self);
            cache.name = name;
        }
        return cache;
    };
    var Self = new RecursiveType(name, function (u) { return runDefinition().is(u); }, function (u, c) { return runDefinition().validate(u, c); }, function (a) { return runDefinition().encode(a); }, runDefinition);
    return Self;
};
/**
 * @since 1.0.0
 */
var ArrayType = /** @class */ (function (_super) {
    __extends(ArrayType, _super);
    function ArrayType(name, is, validate, encode, type) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.type = type;
        /**
         * @since 1.0.0
         */
        _this._tag = 'ArrayType';
        return _this;
    }
    return ArrayType;
}(Type));

/**
 * @category Combinators
 * @since 1.0.0
 */
var array = function (codec, name) {
    if (name === void 0) { name = "Array<" + codec.name + ">"; }
    return new ArrayType(name, function (u) { return UnknownArray.is(u) && u.every(codec.is); }, function (u, c) {
        var e = UnknownArray.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var us = e.right;
        var len = us.length;
        var as = us;
        var errors = [];
        for (var i = 0; i < len; i++) {
            var ui = us[i];
            var result = codec.validate(ui, appendContext(c, String(i), codec, ui));
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                pushAll(errors, result.left);
            }
            else {
                var ai = result.right;
                if (ai !== ui) {
                    if (as === us) {
                        as = us.slice();
                    }
                    as[i] = ai;
                }
            }
        }
        return errors.length > 0 ? failures(errors) : success(as);
    }, codec.encode === identity ? identity : function (a) { return a.map(codec.encode); }, codec);
};
/**
 * @since 1.0.0
 */
var InterfaceType = /** @class */ (function (_super) {
    __extends(InterfaceType, _super);
    function InterfaceType(name, is, validate, encode, props) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.props = props;
        /**
         * @since 1.0.0
         */
        _this._tag = 'InterfaceType';
        return _this;
    }
    return InterfaceType;
}(Type));

var getNameFromProps = function (props) {
    return Object.keys(props)
        .map(function (k) { return k + ": " + props[k].name; })
        .join(', ');
};
var useIdentity = function (codecs) {
    for (var i = 0; i < codecs.length; i++) {
        if (codecs[i].encode !== identity) {
            return false;
        }
    }
    return true;
};
var getInterfaceTypeName = function (props) {
    return "{ " + getNameFromProps(props) + " }";
};
/**
 * @category Combinators
 * @since 1.0.0
 */
var type = function (props, name) {
    if (name === void 0) { name = getInterfaceTypeName(props); }
    var keys = Object.keys(props);
    var types = keys.map(function (key) { return props[key]; });
    var len = keys.length;
    return new InterfaceType(name, function (u) {
        if (UnknownRecord.is(u)) {
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                var uk = u[k];
                if ((uk === undefined && !hasOwnProperty.call(u, k)) || !types[i].is(uk)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }, function (u, c) {
        var e = UnknownRecord.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var o = e.right;
        var a = o;
        var errors = [];
        for (var i = 0; i < len; i++) {
            var k = keys[i];
            var ak = a[k];
            var type_1 = types[i];
            var result = type_1.validate(ak, appendContext(c, k, type_1, ak));
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                pushAll(errors, result.left);
            }
            else {
                var vak = result.right;
                if (vak !== ak || (vak === undefined && !hasOwnProperty.call(a, k))) {
                    /* istanbul ignore next */
                    if (a === o) {
                        a = __assign({}, o);
                    }
                    a[k] = vak;
                }
            }
        }
        return errors.length > 0 ? failures(errors) : success(a);
    }, useIdentity(types)
        ? identity
        : function (a) {
            var s = __assign({}, a);
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                var encode = types[i].encode;
                if (encode !== identity) {
                    s[k] = encode(a[k]);
                }
            }
            return s;
        }, props);
};
/**
 * @since 1.0.0
 */
var PartialType = /** @class */ (function (_super) {
    __extends(PartialType, _super);
    function PartialType(name, is, validate, encode, props) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.props = props;
        /**
         * @since 1.0.0
         */
        _this._tag = 'PartialType';
        return _this;
    }
    return PartialType;
}(Type));

var getPartialTypeName = function (inner) {
    return "Partial<" + inner + ">";
};
/**
 * @category Combinators
 * @since 1.0.0
 */
var partial = function (props, name) {
    if (name === void 0) { name = getPartialTypeName(getInterfaceTypeName(props)); }
    var keys = Object.keys(props);
    var types = keys.map(function (key) { return props[key]; });
    var len = keys.length;
    return new PartialType(name, function (u) {
        if (UnknownRecord.is(u)) {
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                var uk = u[k];
                if (uk !== undefined && !props[k].is(uk)) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }, function (u, c) {
        var e = UnknownRecord.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var o = e.right;
        var a = o;
        var errors = [];
        for (var i = 0; i < len; i++) {
            var k = keys[i];
            var ak = a[k];
            var type_2 = props[k];
            var result = type_2.validate(ak, appendContext(c, k, type_2, ak));
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                if (ak !== undefined) {
                    pushAll(errors, result.left);
                }
            }
            else {
                var vak = result.right;
                if (vak !== ak) {
                    /* istanbul ignore next */
                    if (a === o) {
                        a = __assign({}, o);
                    }
                    a[k] = vak;
                }
            }
        }
        return errors.length > 0 ? failures(errors) : success(a);
    }, useIdentity(types)
        ? identity
        : function (a) {
            var s = __assign({}, a);
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                var ak = a[k];
                if (ak !== undefined) {
                    s[k] = types[i].encode(ak);
                }
            }
            return s;
        }, props);
};
/**
 * @since 1.0.0
 */
var DictionaryType = /** @class */ (function (_super) {
    __extends(DictionaryType, _super);
    function DictionaryType(name, is, validate, encode, domain, codomain) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.domain = domain;
        _this.codomain = codomain;
        /**
         * @since 1.0.0
         */
        _this._tag = 'DictionaryType';
        return _this;
    }
    return DictionaryType;
}(Type));

function enumerableRecord(keys, domain, codomain, name) {
    if (name === void 0) { name = "{ [K in " + domain.name + "]: " + codomain.name + " }"; }
    var len = keys.length;
    return new DictionaryType(name, function (u) { return UnknownRecord.is(u) && keys.every(function (k) { return codomain.is(u[k]); }); }, function (u, c) {
        var e = UnknownRecord.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var o = e.right;
        var a = {};
        var errors = [];
        var changed = false;
        for (var i = 0; i < len; i++) {
            var k = keys[i];
            var ok = o[k];
            var codomainResult = codomain.validate(ok, appendContext(c, k, codomain, ok));
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(codomainResult)) {
                pushAll(errors, codomainResult.left);
            }
            else {
                var vok = codomainResult.right;
                changed = changed || vok !== ok;
                a[k] = vok;
            }
        }
        return errors.length > 0 ? failures(errors) : success((changed || Object.keys(o).length !== len ? a : o));
    }, codomain.encode === identity
        ? identity
        : function (a) {
            var s = {};
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                s[k] = codomain.encode(a[k]);
            }
            return s;
        }, domain, codomain);
}
/**
 * @internal
 */
function getDomainKeys(domain) {
    var _a;
    if (isLiteralC(domain)) {
        var literal_1 = domain.value;
        if (string.is(literal_1)) {
            return _a = {}, _a[literal_1] = null, _a;
        }
    }
    else if (isKeyofC(domain)) {
        return domain.keys;
    }
    else if (isUnionC(domain)) {
        var keys = domain.types.map(function (type) { return getDomainKeys(type); });
        return keys.some(undefinedType.is) ? undefined : Object.assign.apply(Object, __spreadArrays([{}], keys));
    }
    return undefined;
}
function nonEnumerableRecord(domain, codomain, name) {
    if (name === void 0) { name = "{ [K in " + domain.name + "]: " + codomain.name + " }"; }
    return new DictionaryType(name, function (u) {
        if (UnknownRecord.is(u)) {
            return Object.keys(u).every(function (k) { return domain.is(k) && codomain.is(u[k]); });
        }
        return isAnyC(codomain) && Array.isArray(u);
    }, function (u, c) {
        if (UnknownRecord.is(u)) {
            var a = {};
            var errors = [];
            var keys = Object.keys(u);
            var len = keys.length;
            var changed = false;
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                var ok = u[k];
                var domainResult = domain.validate(k, appendContext(c, k, domain, k));
                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(domainResult)) {
                    pushAll(errors, domainResult.left);
                }
                else {
                    var vk = domainResult.right;
                    changed = changed || vk !== k;
                    k = vk;
                    var codomainResult = codomain.validate(ok, appendContext(c, k, codomain, ok));
                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(codomainResult)) {
                        pushAll(errors, codomainResult.left);
                    }
                    else {
                        var vok = codomainResult.right;
                        changed = changed || vok !== ok;
                        a[k] = vok;
                    }
                }
            }
            return errors.length > 0 ? failures(errors) : success((changed ? a : u));
        }
        if (isAnyC(codomain) && Array.isArray(u)) {
            return success(u);
        }
        return failure(u, c);
    }, domain.encode === identity && codomain.encode === identity
        ? identity
        : function (a) {
            var s = {};
            var keys = Object.keys(a);
            var len = keys.length;
            for (var i = 0; i < len; i++) {
                var k = keys[i];
                s[String(domain.encode(k))] = codomain.encode(a[k]);
            }
            return s;
        }, domain, codomain);
}
/**
 * @category Combinators
 * @since 1.7.1
 */
function record(domain, codomain, name) {
    var keys = getDomainKeys(domain);
    return keys
        ? enumerableRecord(Object.keys(keys), domain, codomain, name)
        : nonEnumerableRecord(domain, codomain, name);
}
/**
 * @since 1.0.0
 */
var UnionType = /** @class */ (function (_super) {
    __extends(UnionType, _super);
    function UnionType(name, is, validate, encode, types) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.types = types;
        /**
         * @since 1.0.0
         */
        _this._tag = 'UnionType';
        return _this;
    }
    return UnionType;
}(Type));

var getUnionName = function (codecs) {
    return '(' + codecs.map(function (type) { return type.name; }).join(' | ') + ')';
};
/**
 * @category Combinators
 * @since 1.0.0
 */
var union = function (codecs, name) {
    if (name === void 0) { name = getUnionName(codecs); }
    var index = getIndex(codecs);
    if (index !== undefined && codecs.length > 0) {
        var tag_1 = index[0], groups_1 = index[1];
        var len_1 = groups_1.length;
        var find_1 = function (value) {
            for (var i = 0; i < len_1; i++) {
                if (groups_1[i].indexOf(value) !== -1) {
                    return i;
                }
            }
            return undefined;
        };
        // tslint:disable-next-line: deprecation
        return new TaggedUnionType(name, function (u) {
            if (UnknownRecord.is(u)) {
                var i = find_1(u[tag_1]);
                return i !== undefined ? codecs[i].is(u) : false;
            }
            return false;
        }, function (u, c) {
            var e = UnknownRecord.validate(u, c);
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                return e;
            }
            var r = e.right;
            var i = find_1(r[tag_1]);
            if (i === undefined) {
                return failure(u, c);
            }
            var codec = codecs[i];
            return codec.validate(r, appendContext(c, String(i), codec, r));
        }, useIdentity(codecs)
            ? identity
            : function (a) {
                var i = find_1(a[tag_1]);
                if (i === undefined) {
                    // https://github.com/gcanti/io-ts/pull/305
                    throw new Error("no codec found to encode value in union codec " + name);
                }
                else {
                    return codecs[i].encode(a);
                }
            }, codecs, tag_1);
    }
    else {
        return new UnionType(name, function (u) { return codecs.some(function (type) { return type.is(u); }); }, function (u, c) {
            var errors = [];
            for (var i = 0; i < codecs.length; i++) {
                var codec = codecs[i];
                var result = codec.validate(u, appendContext(c, String(i), codec, u));
                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                    pushAll(errors, result.left);
                }
                else {
                    return success(result.right);
                }
            }
            return failures(errors);
        }, useIdentity(codecs)
            ? identity
            : function (a) {
                for (var _i = 0, codecs_1 = codecs; _i < codecs_1.length; _i++) {
                    var codec = codecs_1[_i];
                    if (codec.is(a)) {
                        return codec.encode(a);
                    }
                }
                // https://github.com/gcanti/io-ts/pull/305
                throw new Error("no codec found to encode value in union type " + name);
            }, codecs);
    }
};
/**
 * @since 1.0.0
 */
var IntersectionType = /** @class */ (function (_super) {
    __extends(IntersectionType, _super);
    function IntersectionType(name, is, validate, encode, types) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.types = types;
        /**
         * @since 1.0.0
         */
        _this._tag = 'IntersectionType';
        return _this;
    }
    return IntersectionType;
}(Type));

var mergeAll = function (base, us) {
    var equal = true;
    var primitive = true;
    for (var _i = 0, us_1 = us; _i < us_1.length; _i++) {
        var u = us_1[_i];
        if (u !== base) {
            equal = false;
        }
        if (UnknownRecord.is(u)) {
            primitive = false;
        }
    }
    if (equal) {
        return base;
    }
    else if (primitive) {
        return us[us.length - 1];
    }
    var r = {};
    for (var _a = 0, us_2 = us; _a < us_2.length; _a++) {
        var u = us_2[_a];
        for (var k in u) {
            if (u[k] !== base[k] || !r.hasOwnProperty(k)) {
                r[k] = u[k];
            }
        }
    }
    return r;
};
function intersection(codecs, name) {
    if (name === void 0) { name = "(" + codecs.map(function (type) { return type.name; }).join(' & ') + ")"; }
    var len = codecs.length;
    return new IntersectionType(name, function (u) { return codecs.every(function (type) { return type.is(u); }); }, codecs.length === 0
        ? success
        : function (u, c) {
            var us = [];
            var errors = [];
            for (var i = 0; i < len; i++) {
                var codec = codecs[i];
                var result = codec.validate(u, appendContext(c, String(i), codec, u));
                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                    pushAll(errors, result.left);
                }
                else {
                    us.push(result.right);
                }
            }
            return errors.length > 0 ? failures(errors) : success(mergeAll(u, us));
        }, codecs.length === 0
        ? identity
        : function (a) {
            return mergeAll(a, codecs.map(function (codec) { return codec.encode(a); }));
        }, codecs);
}
/**
 * @since 1.0.0
 */
var TupleType = /** @class */ (function (_super) {
    __extends(TupleType, _super);
    function TupleType(name, is, validate, encode, types) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.types = types;
        /**
         * @since 1.0.0
         */
        _this._tag = 'TupleType';
        return _this;
    }
    return TupleType;
}(Type));

function tuple(codecs, name) {
    if (name === void 0) { name = "[" + codecs.map(function (type) { return type.name; }).join(', ') + "]"; }
    var len = codecs.length;
    return new TupleType(name, function (u) { return UnknownArray.is(u) && u.length === len && codecs.every(function (type, i) { return type.is(u[i]); }); }, function (u, c) {
        var e = UnknownArray.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var us = e.right;
        var as = us.length > len ? us.slice(0, len) : us; // strip additional components
        var errors = [];
        for (var i = 0; i < len; i++) {
            var a = us[i];
            var type_3 = codecs[i];
            var result = type_3.validate(a, appendContext(c, String(i), type_3, a));
            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                pushAll(errors, result.left);
            }
            else {
                var va = result.right;
                if (va !== a) {
                    /* istanbul ignore next */
                    if (as === us) {
                        as = us.slice();
                    }
                    as[i] = va;
                }
            }
        }
        return errors.length > 0 ? failures(errors) : success(as);
    }, useIdentity(codecs) ? identity : function (a) { return codecs.map(function (type, i) { return type.encode(a[i]); }); }, codecs);
}
/**
 * @since 1.0.0
 */
var ReadonlyType = /** @class */ (function (_super) {
    __extends(ReadonlyType, _super);
    function ReadonlyType(name, is, validate, encode, type) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.type = type;
        /**
         * @since 1.0.0
         */
        _this._tag = 'ReadonlyType';
        return _this;
    }
    return ReadonlyType;
}(Type));

/**
 * @category Combinators
 * @since 1.0.0
 */
var readonly = function (codec, name) {
    if (name === void 0) { name = "Readonly<" + codec.name + ">"; }
    return new ReadonlyType(name, codec.is, function (u, c) {
        var e = codec.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var x = e.right;
        if (true) {
            return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(Object.freeze(x));
        }
        return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(x);
    }, codec.encode === identity ? identity : codec.encode, codec);
};
/**
 * @since 1.0.0
 */
var ReadonlyArrayType = /** @class */ (function (_super) {
    __extends(ReadonlyArrayType, _super);
    function ReadonlyArrayType(name, is, validate, encode, type) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.type = type;
        /**
         * @since 1.0.0
         */
        _this._tag = 'ReadonlyArrayType';
        return _this;
    }
    return ReadonlyArrayType;
}(Type));

/**
 * @category Combinators
 * @since 1.0.0
 */
var readonlyArray = function (codec, name) {
    if (name === void 0) { name = "ReadonlyArray<" + codec.name + ">"; }
    var arrayType = array(codec);
    return new ReadonlyArrayType(name, arrayType.is, function (u, c) {
        var e = arrayType.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var x = e.right;
        if (true) {
            return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(Object.freeze(x));
        }
        return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(x);
    }, arrayType.encode, codec);
};
/**
 * Strips additional properties
 *
 * @category Combinators
 * @since 1.0.0
 */
var strict = function (props, name) {
    return exact(type(props), name);
};
/**
 * @category deprecated
 * @since 1.3.0
 * @deprecated
 */
var TaggedUnionType = /** @class */ (function (_super) {
    __extends(TaggedUnionType, _super);
    function TaggedUnionType(name, 
    // tslint:disable-next-line: deprecation
    is, 
    // tslint:disable-next-line: deprecation
    validate, 
    // tslint:disable-next-line: deprecation
    encode, codecs, tag) {
        var _this = _super.call(this, name, is, validate, encode, codecs) /* istanbul ignore next */ // <= workaround for https://github.com/Microsoft/TypeScript/issues/13455
         || this;
        _this.tag = tag;
        return _this;
    }
    return TaggedUnionType;
}(UnionType));

/**
 * Use `union` instead
 *
 * @category deprecated
 * @since 1.3.0
 * @deprecated
 */
var taggedUnion = function (tag, codecs, name
// tslint:disable-next-line: deprecation
) {
    if (name === void 0) { name = getUnionName(codecs); }
    var U = union(codecs, name);
    // tslint:disable-next-line: deprecation
    if (U instanceof TaggedUnionType) {
        return U;
    }
    else {
        console.warn("[io-ts] Cannot build a tagged union for " + name + ", returning a de-optimized union");
        // tslint:disable-next-line: deprecation
        return new TaggedUnionType(name, U.is, U.validate, U.encode, codecs, tag);
    }
};
/**
 * @since 1.1.0
 */
var ExactType = /** @class */ (function (_super) {
    __extends(ExactType, _super);
    function ExactType(name, is, validate, encode, type) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.type = type;
        /**
         * @since 1.0.0
         */
        _this._tag = 'ExactType';
        return _this;
    }
    return ExactType;
}(Type));

var getProps = function (codec) {
    switch (codec._tag) {
        case 'RefinementType':
        case 'ReadonlyType':
            return getProps(codec.type);
        case 'InterfaceType':
        case 'StrictType':
        case 'PartialType':
            return codec.props;
        case 'IntersectionType':
            return codec.types.reduce(function (props, type) { return Object.assign(props, getProps(type)); }, {});
    }
};
var stripKeys = function (o, props) {
    var keys = Object.getOwnPropertyNames(o);
    var shouldStrip = false;
    var r = {};
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (!hasOwnProperty.call(props, key)) {
            shouldStrip = true;
        }
        else {
            r[key] = o[key];
        }
    }
    return shouldStrip ? r : o;
};
var getExactTypeName = function (codec) {
    if (isTypeC(codec)) {
        return "{| " + getNameFromProps(codec.props) + " |}";
    }
    else if (isPartialC(codec)) {
        return getPartialTypeName("{| " + getNameFromProps(codec.props) + " |}");
    }
    return "Exact<" + codec.name + ">";
};
/**
 * Strips additional properties
 * @since 1.1.0
 */
var exact = function (codec, name) {
    if (name === void 0) { name = getExactTypeName(codec); }
    var props = getProps(codec);
    return new ExactType(name, codec.is, function (u, c) {
        var e = UnknownRecord.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var ce = codec.validate(u, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(ce)) {
            return ce;
        }
        return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(stripKeys(ce.right, props));
    }, function (a) { return codec.encode(stripKeys(a, props)); }, codec);
};





/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var getValidationError /* istanbul ignore next */ = function (value, context) { return ({
    value: value,
    context: context
}); };
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var getDefaultContext /* istanbul ignore next */ = function (decoder) { return [
    { key: '', type: decoder }
]; };
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var NeverType = /** @class */ (function (_super) {
    __extends(NeverType, _super);
    function NeverType() {
        var _this = _super.call(this, 'never', function (_) { return false; }, function (u, c) { return failure(u, c); }, 
        /* istanbul ignore next */
        function () {
            throw new Error('cannot encode never');
        }) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'NeverType';
        return _this;
    }
    return NeverType;
}(Type));

/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
// tslint:disable-next-line: deprecation
var never = new NeverType();
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var AnyType = /** @class */ (function (_super) {
    __extends(AnyType, _super);
    function AnyType() {
        var _this = _super.call(this, 'any', function (_) { return true; }, success, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'AnyType';
        return _this;
    }
    return AnyType;
}(Type));

/**
 * Use `unknown` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
// tslint:disable-next-line: deprecation
var any = new AnyType();
/**
 * Use `UnknownRecord` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var Dictionary = UnknownRecord;
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var ObjectType = /** @class */ (function (_super) {
    __extends(ObjectType, _super);
    function ObjectType() {
        var _this = _super.call(this, 'object', function (u) { return u !== null && typeof u === 'object'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
        /**
         * @since 1.0.0
         */
        _this._tag = 'ObjectType';
        return _this;
    }
    return ObjectType;
}(Type));

/**
 * Use `UnknownRecord` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
// tslint:disable-next-line: deprecation
var object = new ObjectType();
/**
 * Use `brand` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
function refinement(codec, predicate, name) {
    if (name === void 0) { name = "(" + codec.name + " | " + getFunctionName(predicate) + ")"; }
    return new RefinementType(name, function (u) { return codec.is(u) && predicate(u); }, function (i, c) {
        var e = codec.validate(i, c);
        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
            return e;
        }
        var a = e.right;
        return predicate(a) ? success(a) : failure(a, c);
    }, codec.encode, codec, predicate);
}
/**
 * Use `Int` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
// tslint:disable-next-line: deprecation
var Integer = refinement(number, Number.isInteger, 'Integer');
/**
 * Use `record` instead
 *
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var dictionary = record;
/**
 * @category deprecated
 * @since 1.0.0
 * @deprecated
 */
var StrictType = /** @class */ (function (_super) {
    __extends(StrictType, _super);
    function StrictType(name, 
    // tslint:disable-next-line: deprecation
    is, 
    // tslint:disable-next-line: deprecation
    validate, 
    // tslint:disable-next-line: deprecation
    encode, props) {
        var _this = _super.call(this, name, is, validate, encode) || this;
        _this.props = props;
        /**
         * @since 1.0.0
         */
        _this._tag = 'StrictType';
        return _this;
    }
    return StrictType;
}(Type));

/**
 * Drops the codec "kind"
 *
 * @category deprecated
 * @since 1.1.0
 * @deprecated
 */
function clean(codec) {
    return codec;
}
function alias(codec) {
    return function () { return codec; };
}
var isNonEmpty = function (as) { return as.length > 0; };
/**
 * @internal
 */
var emptyTags = {};
function intersect(a, b) {
    var r = [];
    for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
        var v = a_1[_i];
        if (b.indexOf(v) !== -1) {
            r.push(v);
        }
    }
    return r;
}
function mergeTags(a, b) {
    if (a === emptyTags) {
        return b;
    }
    if (b === emptyTags) {
        return a;
    }
    var r = Object.assign({}, a);
    for (var k in b) {
        if (a.hasOwnProperty(k)) {
            var intersection_1 = intersect(a[k], b[k]);
            if (isNonEmpty(intersection_1)) {
                r[k] = intersection_1;
            }
            else {
                r = emptyTags;
                break;
            }
        }
        else {
            r[k] = b[k];
        }
    }
    return r;
}
function intersectTags(a, b) {
    if (a === emptyTags || b === emptyTags) {
        return emptyTags;
    }
    var r = emptyTags;
    for (var k in a) {
        if (b.hasOwnProperty(k)) {
            var intersection_2 = intersect(a[k], b[k]);
            if (intersection_2.length === 0) {
                if (r === emptyTags) {
                    r = {};
                }
                r[k] = a[k].concat(b[k]);
            }
        }
    }
    return r;
}
// tslint:disable-next-line: deprecation
function isAnyC(codec) {
    return codec._tag === 'AnyType';
}
function isLiteralC(codec) {
    return codec._tag === 'LiteralType';
}
function isKeyofC(codec) {
    return codec._tag === 'KeyofType';
}
function isTypeC(codec) {
    return codec._tag === 'InterfaceType';
}
function isPartialC(codec) {
    return codec._tag === 'PartialType';
}
// tslint:disable-next-line: deprecation
function isStrictC(codec) {
    return codec._tag === 'StrictType';
}
function isExactC(codec) {
    return codec._tag === 'ExactType';
}
// tslint:disable-next-line: deprecation
function isRefinementC(codec) {
    return codec._tag === 'RefinementType';
}
function isIntersectionC(codec) {
    return codec._tag === 'IntersectionType';
}
function isUnionC(codec) {
    return codec._tag === 'UnionType';
}
function isRecursiveC(codec) {
    return codec._tag === 'RecursiveType';
}
var lazyCodecs = [];
/**
 * @internal
 */
function getTags(codec) {
    if (lazyCodecs.indexOf(codec) !== -1) {
        return emptyTags;
    }
    if (isTypeC(codec) || isStrictC(codec)) {
        var index = emptyTags;
        // tslint:disable-next-line: forin
        for (var k in codec.props) {
            var prop = codec.props[k];
            if (isLiteralC(prop)) {
                if (index === emptyTags) {
                    index = {};
                }
                index[k] = [prop.value];
            }
        }
        return index;
    }
    else if (isExactC(codec) || isRefinementC(codec)) {
        return getTags(codec.type);
    }
    else if (isIntersectionC(codec)) {
        return codec.types.reduce(function (tags, codec) { return mergeTags(tags, getTags(codec)); }, emptyTags);
    }
    else if (isUnionC(codec)) {
        return codec.types.slice(1).reduce(function (tags, codec) { return intersectTags(tags, getTags(codec)); }, getTags(codec.types[0]));
    }
    else if (isRecursiveC(codec)) {
        lazyCodecs.push(codec);
        var tags = getTags(codec.type);
        lazyCodecs.pop();
        return tags;
    }
    return emptyTags;
}
/**
 * @internal
 */
function getIndex(codecs) {
    var tags = getTags(codecs[0]);
    var keys = Object.keys(tags);
    var len = codecs.length;
    var _loop_1 = function (k) {
        var all = tags[k].slice();
        var index = [tags[k]];
        for (var i = 1; i < len; i++) {
            var codec = codecs[i];
            var ctags = getTags(codec);
            var values = ctags[k];
            // tslint:disable-next-line: strict-type-predicates
            if (values === undefined) {
                return "continue-keys";
            }
            else {
                if (values.some(function (v) { return all.indexOf(v) !== -1; })) {
                    return "continue-keys";
                }
                else {
                    all.push.apply(all, values);
                    index.push(values);
                }
            }
        }
        return { value: [k, index] };
    };
    keys: for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var k = keys_1[_i];
        var state_1 = _loop_1(k);
        if (typeof state_1 === "object")
            return state_1.value;
        switch (state_1) {
            case "continue-keys": continue keys;
        }
    }
    return undefined;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/ContextResolver.js":
/*!*****************************************************!*\
  !*** ../node_modules/jsonld/lib/ContextResolver.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
} = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
const {
  asArray: _asArray
} = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");
const {prependBase} = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const ResolvedContext = __webpack_require__(/*! ./ResolvedContext */ "../node_modules/jsonld/lib/ResolvedContext.js");

const MAX_CONTEXT_URLS = 10;

module.exports = class ContextResolver {
  /**
   * Creates a ContextResolver.
   *
   * @param sharedCache a shared LRU cache with `get` and `set` APIs.
   */
  constructor({sharedCache}) {
    this.perOpCache = new Map();
    this.sharedCache = sharedCache;
  }

  async resolve({
    activeCtx, context, documentLoader, base, cycles = new Set()
  }) {
    // process `@context`
    if(context && _isObject(context) && context['@context']) {
      context = context['@context'];
    }

    // context is one or more contexts
    context = _asArray(context);

    // resolve each context in the array
    const allResolved = [];
    for(const ctx of context) {
      if(_isString(ctx)) {
        // see if `ctx` has been resolved before...
        let resolved = this._get(ctx);
        if(!resolved) {
          // not resolved yet, resolve
          resolved = await this._resolveRemoteContext(
            {activeCtx, url: ctx, documentLoader, base, cycles});
        }

        // add to output and continue
        if(_isArray(resolved)) {
          allResolved.push(...resolved);
        } else {
          allResolved.push(resolved);
        }
        continue;
      }
      if(ctx === null) {
        // handle `null` context, nothing to cache
        allResolved.push(new ResolvedContext({document: null}));
        continue;
      }
      if(!_isObject(ctx)) {
        _throwInvalidLocalContext(context);
      }
      // context is an object, get/create `ResolvedContext` for it
      const key = JSON.stringify(ctx);
      let resolved = this._get(key);
      if(!resolved) {
        // create a new static `ResolvedContext` and cache it
        resolved = new ResolvedContext({document: ctx});
        this._cacheResolvedContext({key, resolved, tag: 'static'});
      }
      allResolved.push(resolved);
    }

    return allResolved;
  }

  _get(key) {
    // get key from per operation cache; no `tag` is used with this cache so
    // any retrieved context will always be the same during a single operation
    let resolved = this.perOpCache.get(key);
    if(!resolved) {
      // see if the shared cache has a `static` entry for this URL
      const tagMap = this.sharedCache.get(key);
      if(tagMap) {
        resolved = tagMap.get('static');
        if(resolved) {
          this.perOpCache.set(key, resolved);
        }
      }
    }
    return resolved;
  }

  _cacheResolvedContext({key, resolved, tag}) {
    this.perOpCache.set(key, resolved);
    if(tag !== undefined) {
      let tagMap = this.sharedCache.get(key);
      if(!tagMap) {
        tagMap = new Map();
        this.sharedCache.set(key, tagMap);
      }
      tagMap.set(tag, resolved);
    }
    return resolved;
  }

  async _resolveRemoteContext({activeCtx, url, documentLoader, base, cycles}) {
    // resolve relative URL and fetch context
    url = prependBase(base, url);
    const {context, remoteDoc} = await this._fetchContext(
      {activeCtx, url, documentLoader, cycles});

    // update base according to remote document and resolve any relative URLs
    base = remoteDoc.documentUrl || url;
    _resolveContextUrls({context, base});

    // resolve, cache, and return context
    const resolved = await this.resolve(
      {activeCtx, context, documentLoader, base, cycles});
    this._cacheResolvedContext({key: url, resolved, tag: remoteDoc.tag});
    return resolved;
  }

  async _fetchContext({activeCtx, url, documentLoader, cycles}) {
    // check for max context URLs fetched during a resolve operation
    if(cycles.size > MAX_CONTEXT_URLS) {
      throw new JsonLdError(
        'Maximum number of @context URLs exceeded.',
        'jsonld.ContextUrlError',
        {
          code: activeCtx.processingMode === 'json-ld-1.0' ?
            'loading remote context failed' :
            'context overflow',
          max: MAX_CONTEXT_URLS
        });
    }

    // check for context URL cycle
    // shortcut to avoid extra work that would eventually hit the max above
    if(cycles.has(url)) {
      throw new JsonLdError(
        'Cyclical @context URLs detected.',
        'jsonld.ContextUrlError',
        {
          code: activeCtx.processingMode === 'json-ld-1.0' ?
            'recursive context inclusion' :
            'context overflow',
          url
        });
    }

    // track cycles
    cycles.add(url);

    let context;
    let remoteDoc;

    try {
      remoteDoc = await documentLoader(url);
      context = remoteDoc.document || null;
      // parse string context as JSON
      if(_isString(context)) {
        context = JSON.parse(context);
      }
    } catch(e) {
      throw new JsonLdError(
        'Dereferencing a URL did not result in a valid JSON-LD object. ' +
        'Possible causes are an inaccessible URL perhaps due to ' +
        'a same-origin policy (ensure the server uses CORS if you are ' +
        'using client-side JavaScript), too many redirects, a ' +
        'non-JSON response, or more than one HTTP Link Header was ' +
        'provided for a remote context.',
        'jsonld.InvalidUrl',
        {code: 'loading remote context failed', url, cause: e});
    }

    // ensure ctx is an object
    if(!_isObject(context)) {
      throw new JsonLdError(
        'Dereferencing a URL did not result in a JSON object. The ' +
        'response was valid JSON, but it was not a JSON object.',
        'jsonld.InvalidUrl', {code: 'invalid remote context', url});
    }

    // use empty context if no @context key is present
    if(!('@context' in context)) {
      context = {'@context': {}};
    } else {
      context = {'@context': context['@context']};
    }

    // append @context URL to context if given
    if(remoteDoc.contextUrl) {
      if(!_isArray(context['@context'])) {
        context['@context'] = [context['@context']];
      }
      context['@context'].push(remoteDoc.contextUrl);
    }

    return {context, remoteDoc};
  }
};

function _throwInvalidLocalContext(ctx) {
  throw new JsonLdError(
    'Invalid JSON-LD syntax; @context must be an object.',
    'jsonld.SyntaxError', {
      code: 'invalid local context', context: ctx
    });
}

/**
 * Resolve all relative `@context` URLs in the given context by inline
 * replacing them with absolute URLs.
 *
 * @param context the context.
 * @param base the base IRI to use to resolve relative IRIs.
 */
function _resolveContextUrls({context, base}) {
  if(!context) {
    return;
  }

  const ctx = context['@context'];

  if(_isString(ctx)) {
    context['@context'] = prependBase(base, ctx);
    return;
  }

  if(_isArray(ctx)) {
    for(let i = 0; i < ctx.length; ++i) {
      const element = ctx[i];
      if(_isString(element)) {
        ctx[i] = prependBase(base, element);
        continue;
      }
      if(_isObject(element)) {
        _resolveContextUrls({context: {'@context': element}, base});
      }
    }
    return;
  }

  if(!_isObject(ctx)) {
    // no @context URLs can be found in non-object
    return;
  }

  // ctx is an object, resolve any context URLs in terms
  for(const term in ctx) {
    _resolveContextUrls({context: ctx[term], base});
  }
}


/***/ }),

/***/ "../node_modules/jsonld/lib/JsonLdError.js":
/*!*************************************************!*\
  !*** ../node_modules/jsonld/lib/JsonLdError.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = class JsonLdError extends Error {
  /**
   * Creates a JSON-LD Error.
   *
   * @param msg the error message.
   * @param type the error type.
   * @param details the error details.
   */
  constructor(
    message = 'An unspecified JSON-LD error occurred.',
    name = 'jsonld.Error',
    details = {}) {
    super(message);
    this.name = name;
    this.message = message;
    this.details = details;
  }
};


/***/ }),

/***/ "../node_modules/jsonld/lib/JsonLdProcessor.js":
/*!*****************************************************!*\
  !*** ../node_modules/jsonld/lib/JsonLdProcessor.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = jsonld => {
  class JsonLdProcessor {
    toString() {
      return '[object JsonLdProcessor]';
    }
  }
  Object.defineProperty(JsonLdProcessor, 'prototype', {
    writable: false,
    enumerable: false
  });
  Object.defineProperty(JsonLdProcessor.prototype, 'constructor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: JsonLdProcessor
  });

  // The Web IDL test harness will check the number of parameters defined in
  // the functions below. The number of parameters must exactly match the
  // required (non-optional) parameters of the JsonLdProcessor interface as
  // defined here:
  // https://www.w3.org/TR/json-ld-api/#the-jsonldprocessor-interface

  JsonLdProcessor.compact = function(input, ctx) {
    if(arguments.length < 2) {
      return Promise.reject(
        new TypeError('Could not compact, too few arguments.'));
    }
    return jsonld.compact(input, ctx);
  };
  JsonLdProcessor.expand = function(input) {
    if(arguments.length < 1) {
      return Promise.reject(
        new TypeError('Could not expand, too few arguments.'));
    }
    return jsonld.expand(input);
  };
  JsonLdProcessor.flatten = function(input) {
    if(arguments.length < 1) {
      return Promise.reject(
        new TypeError('Could not flatten, too few arguments.'));
    }
    return jsonld.flatten(input);
  };

  return JsonLdProcessor;
};


/***/ }),

/***/ "../node_modules/jsonld/lib/NQuads.js":
/*!********************************************!*\
  !*** ../node_modules/jsonld/lib/NQuads.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


// TODO: move `NQuads` to its own package
module.exports = __webpack_require__(/*! rdf-canonize */ "../node_modules/rdf-canonize/lib/index.js").NQuads;


/***/ }),

/***/ "../node_modules/jsonld/lib/Rdfa.js":
/*!******************************************!*\
  !*** ../node_modules/jsonld/lib/Rdfa.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */
/* global Node, XMLSerializer */


const {
  RDF_LANGSTRING,
  RDF_PLAIN_LITERAL,
  RDF_OBJECT,
  RDF_XML_LITERAL,
  XSD_STRING,
} = __webpack_require__(/*! ./constants */ "../node_modules/jsonld/lib/constants.js");

let _Node;
if(typeof Node !== 'undefined') {
  _Node = Node;
} else {
  _Node = {
    ELEMENT_NODE: 1,
    ATTRIBUTE_NODE: 2,
    TEXT_NODE: 3,
    CDATA_SECTION_NODE: 4,
    ENTITY_REFERENCE_NODE: 5,
    ENTITY_NODE: 6,
    PROCESSING_INSTRUCTION_NODE: 7,
    COMMENT_NODE: 8,
    DOCUMENT_NODE: 9,
    DOCUMENT_TYPE_NODE: 10,
    DOCUMENT_FRAGMENT_NODE: 11,
    NOTATION_NODE: 12
  };
}

module.exports = class Rdfa {
  /**
   * Parses the RDF dataset found via the data object from the RDFa API.
   *
   * @param data the RDFa API data object.
   *
   * @return the RDF dataset.
   */
  parse(data) {
    const dataset = {};
    dataset['@default'] = [];

    const subjects = data.getSubjects();
    for(let si = 0; si < subjects.length; ++si) {
      const subject = subjects[si];
      if(subject === null) {
        continue;
      }

      // get all related triples
      const triples = data.getSubjectTriples(subject);
      if(triples === null) {
        continue;
      }
      const predicates = triples.predicates;
      for(const predicate in predicates) {
        // iterate over objects
        const objects = predicates[predicate].objects;
        for(let oi = 0; oi < objects.length; ++oi) {
          const object = objects[oi];

          // create RDF triple
          const triple = {};

          // add subject
          if(subject.indexOf('_:') === 0) {
            triple.subject = {type: 'blank node', value: subject};
          } else {
            triple.subject = {type: 'IRI', value: subject};
          }

          // add predicate
          if(predicate.indexOf('_:') === 0) {
            triple.predicate = {type: 'blank node', value: predicate};
          } else {
            triple.predicate = {type: 'IRI', value: predicate};
          }

          // serialize XML literal
          let value = object.value;
          if(object.type === RDF_XML_LITERAL) {
            // initialize XMLSerializer
            const XMLSerializer = getXMLSerializerClass();
            const serializer = new XMLSerializer();
            value = '';
            for(let x = 0; x < object.value.length; x++) {
              if(object.value[x].nodeType === _Node.ELEMENT_NODE) {
                value += serializer.serializeToString(object.value[x]);
              } else if(object.value[x].nodeType === _Node.TEXT_NODE) {
                value += object.value[x].nodeValue;
              }
            }
          }

          // add object
          triple.object = {};

          // object is an IRI
          if(object.type === RDF_OBJECT) {
            if(object.value.indexOf('_:') === 0) {
              triple.object.type = 'blank node';
            } else {
              triple.object.type = 'IRI';
            }
          } else {
            // object is a literal
            triple.object.type = 'literal';
            if(object.type === RDF_PLAIN_LITERAL) {
              if(object.language) {
                triple.object.datatype = RDF_LANGSTRING;
                triple.object.language = object.language;
              } else {
                triple.object.datatype = XSD_STRING;
              }
            } else {
              triple.object.datatype = object.type;
            }
          }
          triple.object.value = value;

          // add triple to dataset in default graph
          dataset['@default'].push(triple);
        }
      }
    }

    return dataset;
  }
};

function getXMLSerializerClass() {
  if(typeof XMLSerializer === 'undefined') {
    return __webpack_require__(/*! xmldom */ 9).XMLSerializer;
  }
  return XMLSerializer;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/RequestQueue.js":
/*!**************************************************!*\
  !*** ../node_modules/jsonld/lib/RequestQueue.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


module.exports = class RequestQueue {
  /**
   * Creates a simple queue for requesting documents.
   */
  constructor() {
    this._requests = {};
  }

  wrapLoader(loader) {
    const self = this;
    self._loader = loader;
    return function(/* url */) {
      return self.add.apply(self, arguments);
    };
  }

  async add(url) {
    let promise = this._requests[url];
    if(promise) {
      // URL already queued, wait for it to load
      return Promise.resolve(promise);
    }

    // queue URL and load it
    promise = this._requests[url] = this._loader(url);

    try {
      return await promise;
    } finally {
      delete this._requests[url];
    }
  }
};


/***/ }),

/***/ "../node_modules/jsonld/lib/ResolvedContext.js":
/*!*****************************************************!*\
  !*** ../node_modules/jsonld/lib/ResolvedContext.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2019 Digital Bazaar, Inc. All rights reserved.
 */


const LRU = __webpack_require__(/*! lru-cache */ "../node_modules/lru-cache/index.js");

const MAX_ACTIVE_CONTEXTS = 10;

module.exports = class ResolvedContext {
  /**
   * Creates a ResolvedContext.
   *
   * @param document the context document.
   */
  constructor({document}) {
    this.document = document;
    // TODO: enable customization of processed context cache
    // TODO: limit based on size of processed contexts vs. number of them
    this.cache = new LRU({max: MAX_ACTIVE_CONTEXTS});
  }

  getProcessed(activeCtx) {
    return this.cache.get(activeCtx);
  }

  setProcessed(activeCtx, processedCtx) {
    this.cache.set(activeCtx, processedCtx);
  }
};


/***/ }),

/***/ "../node_modules/jsonld/lib/compact.js":
/*!*********************************************!*\
  !*** ../node_modules/jsonld/lib/compact.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSimpleGraph: _isSimpleGraph,
  isSubjectReference: _isSubjectReference
} = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");

const {
  removeBase: _removeBase,
  prependBase: _prependBase
} = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");

const {
  addValue: _addValue,
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");

const api = {};
module.exports = api;

/**
 * Recursively compacts an element using the given active context. All values
 * must be in expanded form before this method is called.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the compacted property associated with the element
 *          to compact, null for none.
 * @param element the element to compact.
 * @param options the compaction options.
 * @param compactionMap the compaction map to use.
 *
 * @return a promise that resolves to the compacted value.
 */
api.compact = async ({
  activeCtx,
  activeProperty = null,
  element,
  options = {},
  compactionMap = () => undefined
}) => {
  // recursively compact array
  if(_isArray(element)) {
    let rval = [];
    for(let i = 0; i < element.length; ++i) {
      // compact, dropping any null values unless custom mapped
      let compacted = await api.compact({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        compactionMap
      });
      if(compacted === null) {
        compacted = await compactionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options
        });
        if(compacted === undefined) {
          continue;
        }
      }
      rval.push(compacted);
    }
    if(options.compactArrays && rval.length === 1) {
      // use single element if no container is specified
      const container = _getContextValue(
        activeCtx, activeProperty, '@container') || [];
      if(container.length === 0) {
        rval = rval[0];
      }
    }
    return rval;
  }

  // use any scoped context on activeProperty
  const ctx = _getContextValue(activeCtx, activeProperty, '@context');
  if(!_isUndefined(ctx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: ctx,
      propagate: true,
      overrideProtected: true,
      options
    });
  }

  // recursively compact object
  if(_isObject(element)) {
    if(options.link && '@id' in element &&
      options.link.hasOwnProperty(element['@id'])) {
      // check for a linked element to reuse
      const linked = options.link[element['@id']];
      for(let i = 0; i < linked.length; ++i) {
        if(linked[i].expanded === element) {
          return linked[i].compacted;
        }
      }
    }

    // do value compaction on @values and subject references
    if(_isValue(element) || _isSubjectReference(element)) {
      const rval =
        api.compactValue({activeCtx, activeProperty, value: element, options});
      if(options.link && _isSubjectReference(element)) {
        // store linked element
        if(!(options.link.hasOwnProperty(element['@id']))) {
          options.link[element['@id']] = [];
        }
        options.link[element['@id']].push({expanded: element, compacted: rval});
      }
      return rval;
    }

    // if expanded property is @list and we're contained within a list
    // container, recursively compact this item to an array
    if(_isList(element)) {
      const container = _getContextValue(
        activeCtx, activeProperty, '@container') || [];
      if(container.includes('@list')) {
        return api.compact({
          activeCtx,
          activeProperty,
          element: element['@list'],
          options,
          compactionMap
        });
      }
    }

    // FIXME: avoid misuse of active property as an expanded property?
    const insideReverse = (activeProperty === '@reverse');

    const rval = {};

    // original context before applying property-scoped and local contexts
    const inputCtx = activeCtx;

    // revert to previous context, if there is one,
    // and element is not a value object or a node reference
    if(!_isValue(element) && !_isSubjectReference(element)) {
      activeCtx = activeCtx.revertToPreviousContext();
    }

    // apply property-scoped context after reverting term-scoped context
    const propertyScopedCtx =
      _getContextValue(inputCtx, activeProperty, '@context');
    if(!_isUndefined(propertyScopedCtx)) {
      activeCtx = await _processContext({
        activeCtx,
        localCtx: propertyScopedCtx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    if(options.link && '@id' in element) {
      // store linked element
      if(!options.link.hasOwnProperty(element['@id'])) {
        options.link[element['@id']] = [];
      }
      options.link[element['@id']].push({expanded: element, compacted: rval});
    }

    // apply any context defined on an alias of @type
    // if key is @type and any compacted value is a term having a local
    // context, overlay that context
    let types = element['@type'] || [];
    if(types.length > 1) {
      types = Array.from(types).sort();
    }
    // find all type-scoped contexts based on current context, prior to
    // updating it
    const typeContext = activeCtx;
    for(const type of types) {
      const compactedType = api.compactIri(
        {activeCtx: typeContext, iri: type, relativeTo: {vocab: true}});

      // Use any type-scoped context defined on this value
      const ctx = _getContextValue(inputCtx, compactedType, '@context');
      if(!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          options,
          propagate: false
        });
      }
    }

    // process element keys in order
    const keys = Object.keys(element).sort();
    for(const expandedProperty of keys) {
      const expandedValue = element[expandedProperty];

      // compact @id
      if(expandedProperty === '@id') {
        let compactedValue = _asArray(expandedValue).map(
          expandedIri => api.compactIri({
            activeCtx,
            iri: expandedIri,
            relativeTo: {vocab: false},
            base: options.base
          }));
        if(compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        }

        // use keyword alias and add value
        const alias = api.compactIri(
          {activeCtx, iri: '@id', relativeTo: {vocab: true}});

        rval[alias] = compactedValue;
        continue;
      }

      // compact @type(s)
      if(expandedProperty === '@type') {
        // resolve type values against previous context
        let compactedValue = _asArray(expandedValue).map(
          expandedIri => api.compactIri({
            activeCtx: inputCtx,
            iri: expandedIri,
            relativeTo: {vocab: true}
          }));
        if(compactedValue.length === 1) {
          compactedValue = compactedValue[0];
        }

        // use keyword alias and add value
        const alias = api.compactIri(
          {activeCtx, iri: '@type', relativeTo: {vocab: true}});
        const container = _getContextValue(
          activeCtx, alias, '@container') || [];

        // treat as array for @type if @container includes @set
        const typeAsSet =
          container.includes('@set') &&
          _processingMode(activeCtx, 1.1);
        const isArray =
          typeAsSet || (_isArray(compactedValue) && expandedValue.length === 0);
        _addValue(rval, alias, compactedValue, {propertyIsArray: isArray});
        continue;
      }

      // handle @reverse
      if(expandedProperty === '@reverse') {
        // recursively compact expanded value
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty: '@reverse',
          element: expandedValue,
          options,
          compactionMap
        });

        // handle double-reversed properties
        for(const compactedProperty in compactedValue) {
          if(activeCtx.mappings.has(compactedProperty) &&
            activeCtx.mappings.get(compactedProperty).reverse) {
            const value = compactedValue[compactedProperty];
            const container = _getContextValue(
              activeCtx, compactedProperty, '@container') || [];
            const useArray = (
              container.includes('@set') || !options.compactArrays);
            _addValue(
              rval, compactedProperty, value, {propertyIsArray: useArray});
            delete compactedValue[compactedProperty];
          }
        }

        if(Object.keys(compactedValue).length > 0) {
          // use keyword alias and add value
          const alias = api.compactIri({
            activeCtx,
            iri: expandedProperty,
            relativeTo: {vocab: true}
          });
          _addValue(rval, alias, compactedValue);
        }

        continue;
      }

      if(expandedProperty === '@preserve') {
        // compact using activeProperty
        const compactedValue = await api.compact({
          activeCtx,
          activeProperty,
          element: expandedValue,
          options,
          compactionMap
        });

        if(!(_isArray(compactedValue) && compactedValue.length === 0)) {
          _addValue(rval, expandedProperty, compactedValue);
        }
        continue;
      }

      // handle @index property
      if(expandedProperty === '@index') {
        // drop @index if inside an @index container
        const container = _getContextValue(
          activeCtx, activeProperty, '@container') || [];
        if(container.includes('@index')) {
          continue;
        }

        // use keyword alias and add value
        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {vocab: true}
        });
        _addValue(rval, alias, expandedValue);
        continue;
      }

      // skip array processing for keywords that aren't
      // @graph, @list, or @included
      if(expandedProperty !== '@graph' && expandedProperty !== '@list' &&
        expandedProperty !== '@included' &&
        _isKeyword(expandedProperty)) {
        // use keyword alias and add value as is
        const alias = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          relativeTo: {vocab: true}
        });
        _addValue(rval, alias, expandedValue);
        continue;
      }

      // Note: expanded value must be an array due to expansion algorithm.
      if(!_isArray(expandedValue)) {
        throw new JsonLdError(
          'JSON-LD expansion error; expanded value must be an array.',
          'jsonld.SyntaxError');
      }

      // preserve empty arrays
      if(expandedValue.length === 0) {
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedValue,
          relativeTo: {vocab: true},
          reverse: insideReverse
        });
        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;
        if(nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);
          if(!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }
          nestResult = rval[nestProperty];
        }
        _addValue(
          nestResult, itemActiveProperty, expandedValue, {
            propertyIsArray: true
          });
      }

      // recusively process array values
      for(const expandedItem of expandedValue) {
        // compact property and get container type
        const itemActiveProperty = api.compactIri({
          activeCtx,
          iri: expandedProperty,
          value: expandedItem,
          relativeTo: {vocab: true},
          reverse: insideReverse
        });

        // if itemActiveProperty is a @nest property, add values to nestResult,
        // otherwise rval
        const nestProperty = activeCtx.mappings.has(itemActiveProperty) ?
          activeCtx.mappings.get(itemActiveProperty)['@nest'] : null;
        let nestResult = rval;
        if(nestProperty) {
          _checkNestProperty(activeCtx, nestProperty, options);
          if(!_isObject(rval[nestProperty])) {
            rval[nestProperty] = {};
          }
          nestResult = rval[nestProperty];
        }

        const container = _getContextValue(
          activeCtx, itemActiveProperty, '@container') || [];

        // get simple @graph or @list value if appropriate
        const isGraph = _isGraph(expandedItem);
        const isList = _isList(expandedItem);
        let inner;
        if(isList) {
          inner = expandedItem['@list'];
        } else if(isGraph) {
          inner = expandedItem['@graph'];
        }

        // recursively compact expanded item
        let compactedItem = await api.compact({
          activeCtx,
          activeProperty: itemActiveProperty,
          element: (isList || isGraph) ? inner : expandedItem,
          options,
          compactionMap
        });

        // handle @list
        if(isList) {
          // ensure @list value is an array
          if(!_isArray(compactedItem)) {
            compactedItem = [compactedItem];
          }

          if(!container.includes('@list')) {
            // wrap using @list alias
            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@list',
                relativeTo: {vocab: true}
              })]: compactedItem
            };

            // include @index from expanded @list, if any
            if('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {vocab: true}
              })] = expandedItem['@index'];
            }
          } else {
            _addValue(nestResult, itemActiveProperty, compactedItem, {
              valueIsArray: true,
              allowDuplicate: true
            });
            continue;
          }
        }

        // Graph object compaction cases
        if(isGraph) {
          if(container.includes('@graph') && (container.includes('@id') ||
            container.includes('@index') && _isSimpleGraph(expandedItem))) {
            // get or create the map object
            let mapObject;
            if(nestResult.hasOwnProperty(itemActiveProperty)) {
              mapObject = nestResult[itemActiveProperty];
            } else {
              nestResult[itemActiveProperty] = mapObject = {};
            }

            // index on @id or @index or alias of @none
            const key = (container.includes('@id') ?
              expandedItem['@id'] : expandedItem['@index']) ||
              api.compactIri({activeCtx, iri: '@none',
                relativeTo: {vocab: true}});
            // add compactedItem to map, using value of `@id` or a new blank
            // node identifier

            _addValue(
              mapObject, key, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          } else if(container.includes('@graph') &&
            _isSimpleGraph(expandedItem)) {
            // container includes @graph but not @id or @index and value is a
            // simple graph object add compact value
            // if compactedItem contains multiple values, it is wrapped in
            // `@included`
            if(_isArray(compactedItem) && compactedItem.length > 1) {
              compactedItem = {'@included': compactedItem};
            }
            _addValue(
              nestResult, itemActiveProperty, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          } else {
            // wrap using @graph alias, remove array if only one item and
            // compactArrays not set
            if(_isArray(compactedItem) && compactedItem.length === 1 &&
              options.compactArrays) {
              compactedItem = compactedItem[0];
            }
            compactedItem = {
              [api.compactIri({
                activeCtx,
                iri: '@graph',
                relativeTo: {vocab: true}
              })]: compactedItem
            };

            // include @id from expanded graph, if any
            if('@id' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@id',
                relativeTo: {vocab: true}
              })] = expandedItem['@id'];
            }

            // include @index from expanded graph, if any
            if('@index' in expandedItem) {
              compactedItem[api.compactIri({
                activeCtx,
                iri: '@index',
                relativeTo: {vocab: true}
              })] = expandedItem['@index'];
            }
            _addValue(
              nestResult, itemActiveProperty, compactedItem, {
                propertyIsArray:
                  (!options.compactArrays || container.includes('@set'))
              });
          }
        } else if(container.includes('@language') ||
          container.includes('@index') || container.includes('@id') ||
          container.includes('@type')) {
          // handle language and index maps
          // get or create the map object
          let mapObject;
          if(nestResult.hasOwnProperty(itemActiveProperty)) {
            mapObject = nestResult[itemActiveProperty];
          } else {
            nestResult[itemActiveProperty] = mapObject = {};
          }

          let key;
          if(container.includes('@language')) {
          // if container is a language map, simplify compacted value to
          // a simple string
            if(_isValue(compactedItem)) {
              compactedItem = compactedItem['@value'];
            }
            key = expandedItem['@language'];
          } else if(container.includes('@index')) {
            const indexKey = _getContextValue(
              activeCtx, itemActiveProperty, '@index') || '@index';
            const containerKey = api.compactIri(
              {activeCtx, iri: indexKey, relativeTo: {vocab: true}});
            if(indexKey === '@index') {
              key = expandedItem['@index'];
              delete compactedItem[containerKey];
            } else {
              let others;
              [key, ...others] = _asArray(compactedItem[indexKey] || []);
              if(!_isString(key)) {
                // Will use @none if it isn't a string.
                key = null;
              } else {
                switch(others.length) {
                  case 0:
                    delete compactedItem[indexKey];
                    break;
                  case 1:
                    compactedItem[indexKey] = others[0];
                    break;
                  default:
                    compactedItem[indexKey] = others;
                    break;
                }
              }
            }
          } else if(container.includes('@id')) {
            const idKey = api.compactIri({activeCtx, iri: '@id',
              relativeTo: {vocab: true}});
            key = compactedItem[idKey];
            delete compactedItem[idKey];
          } else if(container.includes('@type')) {
            const typeKey = api.compactIri({
              activeCtx,
              iri: '@type',
              relativeTo: {vocab: true}
            });
            let types;
            [key, ...types] = _asArray(compactedItem[typeKey] || []);
            switch(types.length) {
              case 0:
                delete compactedItem[typeKey];
                break;
              case 1:
                compactedItem[typeKey] = types[0];
                break;
              default:
                compactedItem[typeKey] = types;
                break;
            }

            // If compactedItem contains a single entry
            // whose key maps to @id, recompact without @type
            if(Object.keys(compactedItem).length === 1 &&
              '@id' in expandedItem) {
              compactedItem = await api.compact({
                activeCtx,
                activeProperty: itemActiveProperty,
                element: {'@id': expandedItem['@id']},
                options,
                compactionMap
              });
            }
          }

          // if compacting this value which has no key, index on @none
          if(!key) {
            key = api.compactIri({activeCtx, iri: '@none',
              relativeTo: {vocab: true}});
          }
          // add compact value to map object using key from expanded value
          // based on the container type
          _addValue(
            mapObject, key, compactedItem, {
              propertyIsArray: container.includes('@set')
            });
        } else {
          // use an array if: compactArrays flag is false,
          // @container is @set or @list , value is an empty
          // array, or key is @graph
          const isArray = (!options.compactArrays ||
            container.includes('@set') || container.includes('@list') ||
            (_isArray(compactedItem) && compactedItem.length === 0) ||
            expandedProperty === '@list' || expandedProperty === '@graph');

          // add compact value
          _addValue(
            nestResult, itemActiveProperty, compactedItem,
            {propertyIsArray: isArray});
        }
      }
    }

    return rval;
  }

  // only primitives remain which are already compact
  return element;
};

/**
 * Compacts an IRI or keyword into a term or prefix if it can be. If the
 * IRI has an associated value it may be passed.
 *
 * @param activeCtx the active context to use.
 * @param iri the IRI to compact.
 * @param value the value to check or null.
 * @param relativeTo options for how to compact IRIs:
 *          vocab: true to split after @vocab, false not to.
 * @param reverse true if a reverse property is being compacted, false if not.
 * @param base the absolute URL to use for compacting document-relative IRIs.
 *
 * @return the compacted term, prefix, keyword alias, or the original IRI.
 */
api.compactIri = ({
  activeCtx,
  iri,
  value = null,
  relativeTo = {vocab: false},
  reverse = false,
  base = null
}) => {
  // can't compact null
  if(iri === null) {
    return iri;
  }

  // if context is from a property term scoped context composed with a
  // type-scoped context, then use the previous context instead
  if(activeCtx.isPropertyTermScoped && activeCtx.previousContext) {
    activeCtx = activeCtx.previousContext;
  }

  const inverseCtx = activeCtx.getInverse();

  // if term is a keyword, it may be compacted to a simple alias
  if(_isKeyword(iri) &&
    iri in inverseCtx &&
    '@none' in inverseCtx[iri] &&
    '@type' in inverseCtx[iri]['@none'] &&
    '@none' in inverseCtx[iri]['@none']['@type']) {
    return inverseCtx[iri]['@none']['@type']['@none'];
  }

  // use inverse context to pick a term if iri is relative to vocab
  if(relativeTo.vocab && iri in inverseCtx) {
    const defaultLanguage = activeCtx['@language'] || '@none';

    // prefer @index if available in value
    const containers = [];
    if(_isObject(value) && '@index' in value && !('@graph' in value)) {
      containers.push('@index', '@index@set');
    }

    // if value is a preserve object, use its value
    if(_isObject(value) && '@preserve' in value) {
      value = value['@preserve'][0];
    }

    // prefer most specific container including @graph, prefering @set
    // variations
    if(_isGraph(value)) {
      // favor indexmap if the graph is indexed
      if('@index' in value) {
        containers.push(
          '@graph@index', '@graph@index@set', '@index', '@index@set');
      }
      // favor idmap if the graph is has an @id
      if('@id' in value) {
        containers.push(
          '@graph@id', '@graph@id@set');
      }
      containers.push('@graph', '@graph@set', '@set');
      // allow indexmap if the graph is not indexed
      if(!('@index' in value)) {
        containers.push(
          '@graph@index', '@graph@index@set', '@index', '@index@set');
      }
      // allow idmap if the graph does not have an @id
      if(!('@id' in value)) {
        containers.push('@graph@id', '@graph@id@set');
      }
    } else if(_isObject(value) && !_isValue(value)) {
      containers.push('@id', '@id@set', '@type', '@set@type');
    }

    // defaults for term selection based on type/language
    let typeOrLanguage = '@language';
    let typeOrLanguageValue = '@null';

    if(reverse) {
      typeOrLanguage = '@type';
      typeOrLanguageValue = '@reverse';
      containers.push('@set');
    } else if(_isList(value)) {
      // choose the most specific term that works for all elements in @list
      // only select @list containers if @index is NOT in value
      if(!('@index' in value)) {
        containers.push('@list');
      }
      const list = value['@list'];
      if(list.length === 0) {
        // any empty list can be matched against any term that uses the
        // @list container regardless of @type or @language
        typeOrLanguage = '@any';
        typeOrLanguageValue = '@none';
      } else {
        let commonLanguage = (list.length === 0) ? defaultLanguage : null;
        let commonType = null;
        for(let i = 0; i < list.length; ++i) {
          const item = list[i];
          let itemLanguage = '@none';
          let itemType = '@none';
          if(_isValue(item)) {
            if('@direction' in item) {
              const lang = (item['@language'] || '').toLowerCase();
              const dir = item['@direction'];
              itemLanguage = `${lang}_${dir}`;
            } else if('@language' in item) {
              itemLanguage = item['@language'].toLowerCase();
            } else if('@type' in item) {
              itemType = item['@type'];
            } else {
              // plain literal
              itemLanguage = '@null';
            }
          } else {
            itemType = '@id';
          }
          if(commonLanguage === null) {
            commonLanguage = itemLanguage;
          } else if(itemLanguage !== commonLanguage && _isValue(item)) {
            commonLanguage = '@none';
          }
          if(commonType === null) {
            commonType = itemType;
          } else if(itemType !== commonType) {
            commonType = '@none';
          }
          // there are different languages and types in the list, so choose
          // the most generic term, no need to keep iterating the list
          if(commonLanguage === '@none' && commonType === '@none') {
            break;
          }
        }
        commonLanguage = commonLanguage || '@none';
        commonType = commonType || '@none';
        if(commonType !== '@none') {
          typeOrLanguage = '@type';
          typeOrLanguageValue = commonType;
        } else {
          typeOrLanguageValue = commonLanguage;
        }
      }
    } else {
      if(_isValue(value)) {
        if('@language' in value && !('@index' in value)) {
          containers.push('@language', '@language@set');
          typeOrLanguageValue = value['@language'];
          const dir = value['@direction'];
          if(dir) {
            typeOrLanguageValue = `${typeOrLanguageValue}_${dir}`;
          }
        } else if('@direction' in value && !('@index' in value)) {
          typeOrLanguageValue = `_${value['@direction']}`;
        } else if('@type' in value) {
          typeOrLanguage = '@type';
          typeOrLanguageValue = value['@type'];
        }
      } else {
        typeOrLanguage = '@type';
        typeOrLanguageValue = '@id';
      }
      containers.push('@set');
    }

    // do term selection
    containers.push('@none');

    // an index map can be used to index values using @none, so add as a low
    // priority
    if(_isObject(value) && !('@index' in value)) {
      // allow indexing even if no @index present
      containers.push('@index', '@index@set');
    }

    // values without type or language can use @language map
    if(_isValue(value) && Object.keys(value).length === 1) {
      // allow indexing even if no @index present
      containers.push('@language', '@language@set');
    }

    const term = _selectTerm(
      activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue);
    if(term !== null) {
      return term;
    }
  }

  // no term match, use @vocab if available
  if(relativeTo.vocab) {
    if('@vocab' in activeCtx) {
      // determine if vocab is a prefix of the iri
      const vocab = activeCtx['@vocab'];
      if(iri.indexOf(vocab) === 0 && iri !== vocab) {
        // use suffix as relative iri if it is not a term in the active context
        const suffix = iri.substr(vocab.length);
        if(!activeCtx.mappings.has(suffix)) {
          return suffix;
        }
      }
    }
  }

  // no term or @vocab match, check for possible CURIEs
  let choice = null;
  // TODO: make FastCurieMap a class with a method to do this lookup
  const partialMatches = [];
  let iriMap = activeCtx.fastCurieMap;
  // check for partial matches of against `iri`, which means look until
  // iri.length - 1, not full length
  const maxPartialLength = iri.length - 1;
  for(let i = 0; i < maxPartialLength && iri[i] in iriMap; ++i) {
    iriMap = iriMap[iri[i]];
    if('' in iriMap) {
      partialMatches.push(iriMap[''][0]);
    }
  }
  // check partial matches in reverse order to prefer longest ones first
  for(let i = partialMatches.length - 1; i >= 0; --i) {
    const entry = partialMatches[i];
    const terms = entry.terms;
    for(const term of terms) {
      // a CURIE is usable if:
      // 1. it has no mapping, OR
      // 2. value is null, which means we're not compacting an @value, AND
      //   the mapping matches the IRI
      const curie = term + ':' + iri.substr(entry.iri.length);
      const isUsableCurie = (activeCtx.mappings.get(term)._prefix &&
        (!activeCtx.mappings.has(curie) ||
        (value === null && activeCtx.mappings.get(curie)['@id'] === iri)));

      // select curie if it is shorter or the same length but lexicographically
      // less than the current choice
      if(isUsableCurie && (choice === null ||
        _compareShortestLeast(curie, choice) < 0)) {
        choice = curie;
      }
    }
  }

  // return chosen curie
  if(choice !== null) {
    return choice;
  }

  // If iri could be confused with a compact IRI using a term in this context,
  // signal an error
  for(const [term, td] of activeCtx.mappings) {
    if(td && td._prefix && iri.startsWith(term + ':')) {
      throw new JsonLdError(
        `Absolute IRI "${iri}" confused with prefix "${term}".`,
        'jsonld.SyntaxError',
        {code: 'IRI confused with prefix', context: activeCtx});
    }
  }

  // compact IRI relative to base
  if(!relativeTo.vocab) {
    if('@base' in activeCtx) {
      if(!activeCtx['@base']) {
        // The None case preserves rval as potentially relative
        return iri;
      } else {
        return _removeBase(_prependBase(base, activeCtx['@base']), iri);
      }
    } else {
      return _removeBase(base, iri);
    }
  }

  // return IRI as is
  return iri;
};

/**
 * Performs value compaction on an object with '@value' or '@id' as the only
 * property.
 *
 * @param activeCtx the active context.
 * @param activeProperty the active property that points to the value.
 * @param value the value to compact.
 * @param {Object} [options] - processing options.
 *
 * @return the compaction result.
 */
api.compactValue = ({activeCtx, activeProperty, value, options}) => {
  // value is a @value
  if(_isValue(value)) {
    // get context rules
    const type = _getContextValue(activeCtx, activeProperty, '@type');
    const language = _getContextValue(activeCtx, activeProperty, '@language');
    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
    const container =
      _getContextValue(activeCtx, activeProperty, '@container') || [];

    // whether or not the value has an @index that must be preserved
    const preserveIndex = '@index' in value && !container.includes('@index');

    // if there's no @index to preserve ...
    if(!preserveIndex && type !== '@none') {
      // matching @type or @language specified in context, compact value
      if(value['@type'] === type) {
        return value['@value'];
      }
      if('@language' in value && value['@language'] === language &&
         '@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
      if('@language' in value && value['@language'] === language) {
        return value['@value'];
      }
      if('@direction' in value && value['@direction'] === direction) {
        return value['@value'];
      }
    }

    // return just the value of @value if all are true:
    // 1. @value is the only key or @index isn't being preserved
    // 2. there is no default language or @value is not a string or
    //   the key has a mapping with a null @language
    const keyCount = Object.keys(value).length;
    const isValueOnlyKey = (keyCount === 1 ||
      (keyCount === 2 && '@index' in value && !preserveIndex));
    const hasDefaultLanguage = ('@language' in activeCtx);
    const isValueString = _isString(value['@value']);
    const hasNullMapping = (activeCtx.mappings.has(activeProperty) &&
      activeCtx.mappings.get(activeProperty)['@language'] === null);
    if(isValueOnlyKey &&
      type !== '@none' &&
      (!hasDefaultLanguage || !isValueString || hasNullMapping)) {
      return value['@value'];
    }

    const rval = {};

    // preserve @index
    if(preserveIndex) {
      rval[api.compactIri({
        activeCtx,
        iri: '@index',
        relativeTo: {vocab: true}
      })] = value['@index'];
    }

    if('@type' in value) {
      // compact @type IRI
      rval[api.compactIri({
        activeCtx,
        iri: '@type',
        relativeTo: {vocab: true}
      })] = api.compactIri(
        {activeCtx, iri: value['@type'], relativeTo: {vocab: true}});
    } else if('@language' in value) {
      // alias @language
      rval[api.compactIri({
        activeCtx,
        iri: '@language',
        relativeTo: {vocab: true}
      })] = value['@language'];
    }

    if('@direction' in value) {
      // alias @direction
      rval[api.compactIri({
        activeCtx,
        iri: '@direction',
        relativeTo: {vocab: true}
      })] = value['@direction'];
    }

    // alias @value
    rval[api.compactIri({
      activeCtx,
      iri: '@value',
      relativeTo: {vocab: true}
    })] = value['@value'];

    return rval;
  }

  // value is a subject reference
  const expandedProperty = _expandIri(activeCtx, activeProperty, {vocab: true},
    options);
  const type = _getContextValue(activeCtx, activeProperty, '@type');
  const compacted = api.compactIri({
    activeCtx,
    iri: value['@id'],
    relativeTo: {vocab: type === '@vocab'},
    base: options.base});

  // compact to scalar
  if(type === '@id' || type === '@vocab' || expandedProperty === '@graph') {
    return compacted;
  }

  return {
    [api.compactIri({
      activeCtx,
      iri: '@id',
      relativeTo: {vocab: true}
    })]: compacted
  };
};

/**
 * Picks the preferred compaction term from the given inverse context entry.
 *
 * @param activeCtx the active context.
 * @param iri the IRI to pick the term for.
 * @param value the value to pick the term for.
 * @param containers the preferred containers.
 * @param typeOrLanguage either '@type' or '@language'.
 * @param typeOrLanguageValue the preferred value for '@type' or '@language'.
 *
 * @return the preferred term.
 */
function _selectTerm(
  activeCtx, iri, value, containers, typeOrLanguage, typeOrLanguageValue) {
  if(typeOrLanguageValue === null) {
    typeOrLanguageValue = '@null';
  }

  // preferences for the value of @type or @language
  const prefs = [];

  // determine prefs for @id based on whether or not value compacts to a term
  if((typeOrLanguageValue === '@id' || typeOrLanguageValue === '@reverse') &&
    _isObject(value) && '@id' in value) {
    // prefer @reverse first
    if(typeOrLanguageValue === '@reverse') {
      prefs.push('@reverse');
    }
    // try to compact value to a term
    const term = api.compactIri(
      {activeCtx, iri: value['@id'], relativeTo: {vocab: true}});
    if(activeCtx.mappings.has(term) &&
      activeCtx.mappings.get(term) &&
      activeCtx.mappings.get(term)['@id'] === value['@id']) {
      // prefer @vocab
      prefs.push.apply(prefs, ['@vocab', '@id']);
    } else {
      // prefer @id
      prefs.push.apply(prefs, ['@id', '@vocab']);
    }
  } else {
    prefs.push(typeOrLanguageValue);

    // consider direction only
    const langDir = prefs.find(el => el.includes('_'));
    if(langDir) {
      // consider _dir portion
      prefs.push(langDir.replace(/^[^_]+_/, '_'));
    }
  }
  prefs.push('@none');

  const containerMap = activeCtx.inverse[iri];
  for(const container of containers) {
    // if container not available in the map, continue
    if(!(container in containerMap)) {
      continue;
    }

    const typeOrLanguageValueMap = containerMap[container][typeOrLanguage];
    for(const pref of prefs) {
      // if type/language option not available in the map, continue
      if(!(pref in typeOrLanguageValueMap)) {
        continue;
      }

      // select term
      return typeOrLanguageValueMap[pref];
    }
  }

  return null;
}

/**
 * The value of `@nest` in the term definition must either be `@nest`, or a term
 * which resolves to `@nest`.
 *
 * @param activeCtx the active context.
 * @param nestProperty a term in the active context or `@nest`.
 * @param {Object} [options] - processing options.
 */
function _checkNestProperty(activeCtx, nestProperty, options) {
  if(_expandIri(activeCtx, nestProperty, {vocab: true}, options) !== '@nest') {
    throw new JsonLdError(
      'JSON-LD compact error; nested property must have an @nest value ' +
      'resolving to @nest.',
      'jsonld.SyntaxError', {code: 'invalid @nest value'});
  }
}


/***/ }),

/***/ "../node_modules/jsonld/lib/constants.js":
/*!***********************************************!*\
  !*** ../node_modules/jsonld/lib/constants.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const XSD = 'http://www.w3.org/2001/XMLSchema#';

module.exports = {
  // TODO: Deprecated and will be removed later. Use LINK_HEADER_CONTEXT.
  LINK_HEADER_REL: 'http://www.w3.org/ns/json-ld#context',

  LINK_HEADER_CONTEXT: 'http://www.w3.org/ns/json-ld#context',

  RDF,
  RDF_LIST: RDF + 'List',
  RDF_FIRST: RDF + 'first',
  RDF_REST: RDF + 'rest',
  RDF_NIL: RDF + 'nil',
  RDF_TYPE: RDF + 'type',
  RDF_PLAIN_LITERAL: RDF + 'PlainLiteral',
  RDF_XML_LITERAL: RDF + 'XMLLiteral',
  RDF_JSON_LITERAL: RDF + 'JSON',
  RDF_OBJECT: RDF + 'object',
  RDF_LANGSTRING: RDF + 'langString',

  XSD,
  XSD_BOOLEAN: XSD + 'boolean',
  XSD_DOUBLE: XSD + 'double',
  XSD_INTEGER: XSD + 'integer',
  XSD_STRING: XSD + 'string',
};


/***/ }),

/***/ "../node_modules/jsonld/lib/context.js":
/*!*********************************************!*\
  !*** ../node_modules/jsonld/lib/context.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const {
  isAbsolute: _isAbsoluteIri,
  isRelative: _isRelativeIri,
  prependBase,
  parse: parseUrl
} = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");

const {
  asArray: _asArray,
  compareShortestLeast: _compareShortestLeast
} = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");

const INITIAL_CONTEXT_CACHE = new Map();
const INITIAL_CONTEXT_CACHE_MAX_SIZE = 10000;
const KEYWORD_PATTERN = /^@[a-zA-Z]+$/;

const api = {};
module.exports = api;

/**
 * Processes a local context and returns a new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param options the context processing options.
 * @param propagate `true` if `false`, retains any previously defined term,
 *   which can be rolled back when the descending into a new node object.
 * @param overrideProtected `false` allows protected terms to be modified.
 *
 * @return a Promise that resolves to the new active context.
 */
api.process = async ({
  activeCtx, localCtx, options,
  propagate = true,
  overrideProtected = false,
  cycles = new Set()
}) => {
  // normalize local context to an array of @context objects
  if(_isObject(localCtx) && '@context' in localCtx &&
    _isArray(localCtx['@context'])) {
    localCtx = localCtx['@context'];
  }
  const ctxs = _asArray(localCtx);

  // no contexts in array, return current active context w/o changes
  if(ctxs.length === 0) {
    return activeCtx;
  }

  // resolve contexts
  const resolved = await options.contextResolver.resolve({
    activeCtx,
    context: localCtx,
    documentLoader: options.documentLoader,
    base: options.base
  });

  // override propagate if first resolved context has `@propagate`
  if(_isObject(resolved[0].document) &&
    typeof resolved[0].document['@propagate'] === 'boolean') {
    // retrieve early, error checking done later
    propagate = resolved[0].document['@propagate'];
  }

  // process each context in order, update active context
  // on each iteration to ensure proper caching
  let rval = activeCtx;

  // track the previous context
  // if not propagating, make sure rval has a previous context
  if(!propagate && !rval.previousContext) {
    // clone `rval` context before updating
    rval = rval.clone();
    rval.previousContext = activeCtx;
  }

  for(const resolvedContext of resolved) {
    let {document: ctx} = resolvedContext;

    // update active context to one computed from last iteration
    activeCtx = rval;

    // reset to initial context
    if(ctx === null) {
      // We can't nullify if there are protected terms and we're
      // not allowing overrides (e.g. processing a property term scoped context)
      if(!overrideProtected &&
        Object.keys(activeCtx.protected).length !== 0) {
        const protectedMode = (options && options.protectedMode) || 'error';
        if(protectedMode === 'error') {
          throw new JsonLdError(
            'Tried to nullify a context with protected terms outside of ' +
            'a term definition.',
            'jsonld.SyntaxError',
            {code: 'invalid context nullification'});
        } else if(protectedMode === 'warn') {
          // FIXME: remove logging and use a handler
          console.warn('WARNING: invalid context nullification');

          // get processed context from cache if available
          const processed = resolvedContext.getProcessed(activeCtx);
          if(processed) {
            rval = activeCtx = processed;
            continue;
          }

          const oldActiveCtx = activeCtx;
          // copy all protected term definitions to fresh initial context
          rval = activeCtx = api.getInitialContext(options).clone();
          for(const [term, _protected] of
            Object.entries(oldActiveCtx.protected)) {
            if(_protected) {
              activeCtx.mappings[term] =
                util.clone(oldActiveCtx.mappings[term]);
            }
          }
          activeCtx.protected = util.clone(oldActiveCtx.protected);

          // cache processed result
          resolvedContext.setProcessed(oldActiveCtx, rval);
          continue;
        }
        throw new JsonLdError(
          'Invalid protectedMode.',
          'jsonld.SyntaxError',
          {code: 'invalid protected mode', context: localCtx, protectedMode});
      }
      rval = activeCtx = api.getInitialContext(options).clone();
      continue;
    }

    // get processed context from cache if available
    const processed = resolvedContext.getProcessed(activeCtx);
    if(processed) {
      rval = activeCtx = processed;
      continue;
    }

    // dereference @context key if present
    if(_isObject(ctx) && '@context' in ctx) {
      ctx = ctx['@context'];
    }

    // context must be an object by now, all URLs retrieved before this call
    if(!_isObject(ctx)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context must be an object.',
        'jsonld.SyntaxError', {code: 'invalid local context', context: ctx});
    }

    // TODO: there is likely a `previousContext` cloning optimization that
    // could be applied here (no need to copy it under certain conditions)

    // clone context before updating it
    rval = rval.clone();

    // define context mappings for keys in local context
    const defined = new Map();

    // handle @version
    if('@version' in ctx) {
      if(ctx['@version'] !== 1.1) {
        throw new JsonLdError(
          'Unsupported JSON-LD version: ' + ctx['@version'],
          'jsonld.UnsupportedVersion',
          {code: 'invalid @version value', context: ctx});
      }
      if(activeCtx.processingMode &&
        activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          '@version: ' + ctx['@version'] + ' not compatible with ' +
          activeCtx.processingMode,
          'jsonld.ProcessingModeConflict',
          {code: 'processing mode conflict', context: ctx});
      }
      rval.processingMode = 'json-ld-1.1';
      rval['@version'] = ctx['@version'];
      defined.set('@version', true);
    }

    // if not set explicitly, set processingMode to "json-ld-1.1"
    rval.processingMode =
      rval.processingMode || activeCtx.processingMode;

    // handle @base
    if('@base' in ctx) {
      let base = ctx['@base'];

      if(base === null || _isAbsoluteIri(base)) {
        // no action
      } else if(_isRelativeIri(base)) {
        base = prependBase(rval['@base'], base);
      } else {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@base" in a ' +
          '@context must be an absolute IRI, a relative IRI, or null.',
          'jsonld.SyntaxError', {code: 'invalid base IRI', context: ctx});
      }

      rval['@base'] = base;
      defined.set('@base', true);
    }

    // handle @vocab
    if('@vocab' in ctx) {
      const value = ctx['@vocab'];
      if(value === null) {
        delete rval['@vocab'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else if(!_isAbsoluteIri(value) && api.processingMode(rval, 1.0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@vocab" in a ' +
          '@context must be an absolute IRI.',
          'jsonld.SyntaxError', {code: 'invalid vocab mapping', context: ctx});
      } else {
        rval['@vocab'] = _expandIri(rval, value, {vocab: true, base: true},
          undefined, undefined, options);
      }
      defined.set('@vocab', true);
    }

    // handle @language
    if('@language' in ctx) {
      const value = ctx['@language'];
      if(value === null) {
        delete rval['@language'];
      } else if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@language" in a ' +
          '@context must be a string or null.',
          'jsonld.SyntaxError',
          {code: 'invalid default language', context: ctx});
      } else {
        rval['@language'] = value.toLowerCase();
      }
      defined.set('@language', true);
    }

    // handle @direction
    if('@direction' in ctx) {
      const value = ctx['@direction'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @direction not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context member', context: ctx});
      }
      if(value === null) {
        delete rval['@direction'];
      } else if(value !== 'ltr' && value !== 'rtl') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; the value of "@direction" in a ' +
          '@context must be null, "ltr", or "rtl".',
          'jsonld.SyntaxError',
          {code: 'invalid base direction', context: ctx});
      } else {
        rval['@direction'] = value;
      }
      defined.set('@direction', true);
    }

    // handle @propagate
    // note: we've already extracted it, here we just do error checking
    if('@propagate' in ctx) {
      const value = ctx['@propagate'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @propagate not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context entry', context: ctx});
      }
      if(typeof value !== 'boolean') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @propagate value must be a boolean.',
          'jsonld.SyntaxError',
          {code: 'invalid @propagate value', context: localCtx});
      }
      defined.set('@propagate', true);
    }

    // handle @import
    if('@import' in ctx) {
      const value = ctx['@import'];
      if(activeCtx.processingMode === 'json-ld-1.0') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import not compatible with ' +
          activeCtx.processingMode,
          'jsonld.SyntaxError',
          {code: 'invalid context entry', context: ctx});
      }
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid @import value', context: localCtx});
      }

      // resolve contexts
      const resolvedImport = await options.contextResolver.resolve({
        activeCtx,
        context: value,
        documentLoader: options.documentLoader,
        base: options.base
      });
      if(resolvedImport.length !== 1) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @import must reference a single context.',
          'jsonld.SyntaxError',
          {code: 'invalid remote context', context: localCtx});
      }
      const processedImport = resolvedImport[0].getProcessed(activeCtx);
      if(processedImport) {
        // Note: if the same context were used in this active context
        // as a reference context, then processed_input might not
        // be a dict.
        ctx = processedImport;
      } else {
        const importCtx = resolvedImport[0].document;
        if('@import' in importCtx) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax: ' +
            'imported context must not include @import.',
            'jsonld.SyntaxError',
            {code: 'invalid context entry', context: localCtx});
        }

        // merge ctx into importCtx and replace rval with the result
        for(const key in importCtx) {
          if(!ctx.hasOwnProperty(key)) {
            ctx[key] = importCtx[key];
          }
        }

        // Note: this could potenially conflict if the import
        // were used in the same active context as a referenced
        // context and an import. In this case, we
        // could override the cached result, but seems unlikely.
        resolvedImport[0].setProcessed(activeCtx, ctx);
      }

      defined.set('@import', true);
    }

    // handle @protected; determine whether this sub-context is declaring
    // all its terms to be "protected" (exceptions can be made on a
    // per-definition basis)
    defined.set('@protected', ctx['@protected'] || false);

    // process all other keys
    for(const key in ctx) {
      api.createTermDefinition({
        activeCtx: rval,
        localCtx: ctx,
        term: key,
        defined,
        options,
        overrideProtected
      });

      if(_isObject(ctx[key]) && '@context' in ctx[key]) {
        const keyCtx = ctx[key]['@context'];
        let process = true;
        if(_isString(keyCtx)) {
          const url = prependBase(options.base, keyCtx);
          // track processed contexts to avoid scoped context recursion
          if(cycles.has(url)) {
            process = false;
          } else {
            cycles.add(url);
          }
        }
        // parse context to validate
        if(process) {
          try {
            await api.process({
              activeCtx: rval,
              localCtx: ctx[key]['@context'],
              overrideProtected: true,
              options,
              cycles
            });
          } catch(e) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; invalid scoped context.',
              'jsonld.SyntaxError',
              {
                code: 'invalid scoped context',
                context: ctx[key]['@context'],
                term: key
              });
          }
        }
      }
    }

    // cache processed result
    resolvedContext.setProcessed(activeCtx, rval);
  }

  return rval;
};

/**
 * Creates a term definition during context processing.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context being processed.
 * @param term the term in the local context to define the mapping for.
 * @param defined a map of defining/defined keys to detect cycles and prevent
 *          double definitions.
 * @param {Object} [options] - creation options.
 * @param {string} [options.protectedMode="error"] - "error" to throw error
 *   on `@protected` constraint violation, "warn" to allow violations and
 *   signal a warning.
 * @param overrideProtected `false` allows protected terms to be modified.
 */
api.createTermDefinition = ({
  activeCtx,
  localCtx,
  term,
  defined,
  options,
  overrideProtected = false,
}) => {
  if(defined.has(term)) {
    // term already defined
    if(defined.get(term)) {
      return;
    }
    // cycle detected
    throw new JsonLdError(
      'Cyclical context definition detected.',
      'jsonld.CyclicalContext',
      {code: 'cyclic IRI mapping', context: localCtx, term});
  }

  // now defining term
  defined.set(term, false);

  // get context term value
  let value;
  if(localCtx.hasOwnProperty(term)) {
    value = localCtx[term];
  }

  if(term === '@type' &&
     _isObject(value) &&
     (value['@container'] || '@set') === '@set' &&
     api.processingMode(activeCtx, 1.1)) {

    const validKeys = ['@container', '@id', '@protected'];
    const keys = Object.keys(value);
    if(keys.length === 0 || keys.some(k => !validKeys.includes(k))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; keywords cannot be overridden.',
        'jsonld.SyntaxError',
        {code: 'keyword redefinition', context: localCtx, term});
    }
  } else if(api.isKeyword(term)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; keywords cannot be overridden.',
      'jsonld.SyntaxError',
      {code: 'keyword redefinition', context: localCtx, term});
  } else if(term.match(KEYWORD_PATTERN)) {
    // FIXME: remove logging and use a handler
    console.warn('WARNING: terms beginning with "@" are reserved' +
      ' for future use and ignored', {term});
    return;
  } else if(term === '') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a term cannot be an empty string.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // keep reference to previous mapping for potential `@protected` check
  const previousMapping = activeCtx.mappings.get(term);

  // remove old mapping
  if(activeCtx.mappings.has(term)) {
    activeCtx.mappings.delete(term);
  }

  // convert short-hand value to object w/@id
  let simpleTerm = false;
  if(_isString(value) || value === null) {
    simpleTerm = true;
    value = {'@id': value};
  }

  if(!_isObject(value)) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context term values must be ' +
      'strings or objects.',
      'jsonld.SyntaxError',
      {code: 'invalid term definition', context: localCtx});
  }

  // create new mapping
  const mapping = {};
  activeCtx.mappings.set(term, mapping);
  mapping.reverse = false;

  // make sure term definition only has expected keywords
  const validKeys = ['@container', '@id', '@language', '@reverse', '@type'];

  // JSON-LD 1.1 support
  if(api.processingMode(activeCtx, 1.1)) {
    validKeys.push(
      '@context', '@direction', '@index', '@nest', '@prefix', '@protected');
  }

  for(const kw in value) {
    if(!validKeys.includes(kw)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a term definition must not contain ' + kw,
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
  }

  // always compute whether term has a colon as an optimization for
  // _compactIri
  const colon = term.indexOf(':');
  mapping._termHasColon = (colon > 0);

  if('@reverse' in value) {
    if('@id' in value) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
        'contain @id.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }
    if('@nest' in value) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @reverse term definition must not ' +
        'contain @nest.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }
    const reverse = value['@reverse'];
    if(!_isString(reverse)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }

    if(!api.isKeyword(reverse) && reverse.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' +
        ' for future use and ignored', {reverse});
      if(previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }
      return;
    }

    // expand and add @id mapping
    const id = _expandIri(
      activeCtx, reverse, {vocab: true, base: false}, localCtx, defined,
      options);
    if(!_isAbsoluteIri(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @reverse value must be an ' +
        'absolute IRI or a blank node identifier.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }

    mapping['@id'] = id;
    mapping.reverse = true;
  } else if('@id' in value) {
    let id = value['@id'];
    if(id && !_isString(id)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; a @context @id value must be an array ' +
        'of strings or a string.',
        'jsonld.SyntaxError', {code: 'invalid IRI mapping', context: localCtx});
    }
    if(id === null) {
      // reserve a null term, which may be protected
      mapping['@id'] = null;
    } else if(!api.isKeyword(id) && id.match(KEYWORD_PATTERN)) {
      // FIXME: remove logging and use a handler
      console.warn('WARNING: values beginning with "@" are reserved' +
        ' for future use and ignored', {id});
      if(previousMapping) {
        activeCtx.mappings.set(term, previousMapping);
      } else {
        activeCtx.mappings.delete(term);
      }
      return;
    } else if(id !== term) {
      // expand and add @id mapping
      id = _expandIri(
        activeCtx, id, {vocab: true, base: false}, localCtx, defined, options);
      if(!_isAbsoluteIri(id) && !api.isKeyword(id)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a @context @id value must be an ' +
          'absolute IRI, a blank node identifier, or a keyword.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx});
      }

      // if term has the form of an IRI it must map the same
      if(term.match(/(?::[^:])|\//)) {
        const termDefined = new Map(defined).set(term, true);
        const termIri = _expandIri(
          activeCtx, term, {vocab: true, base: false},
          localCtx, termDefined, options);
        if(termIri !== id) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; term in form of IRI must ' +
            'expand to definition.',
            'jsonld.SyntaxError',
            {code: 'invalid IRI mapping', context: localCtx});
        }
      }

      mapping['@id'] = id;
      // indicate if this term may be used as a compact IRI prefix
      mapping._prefix = (simpleTerm &&
        !mapping._termHasColon &&
        id.match(/[:\/\?#\[\]@]$/));
    }
  }

  if(!('@id' in mapping)) {
    // see if the term has a prefix
    if(mapping._termHasColon) {
      const prefix = term.substr(0, colon);
      if(localCtx.hasOwnProperty(prefix)) {
        // define parent prefix
        api.createTermDefinition({
          activeCtx, localCtx, term: prefix, defined, options
        });
      }

      if(activeCtx.mappings.has(prefix)) {
        // set @id based on prefix parent
        const suffix = term.substr(colon + 1);
        mapping['@id'] = activeCtx.mappings.get(prefix)['@id'] + suffix;
      } else {
        // term is an absolute IRI
        mapping['@id'] = term;
      }
    } else if(term === '@type') {
      // Special case, were we've previously determined that container is @set
      mapping['@id'] = term;
    } else {
      // non-IRIs *must* define @ids if @vocab is not available
      if(!('@vocab' in activeCtx)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; @context terms must define an @id.',
          'jsonld.SyntaxError',
          {code: 'invalid IRI mapping', context: localCtx, term});
      }
      // prepend vocab to term
      mapping['@id'] = activeCtx['@vocab'] + term;
    }
  }

  // Handle term protection
  if(value['@protected'] === true ||
    (defined.get('@protected') === true && value['@protected'] !== false)) {
    activeCtx.protected[term] = true;
    mapping.protected = true;
  }

  // IRI mapping now defined
  defined.set(term, true);

  if('@type' in value) {
    let type = value['@type'];
    if(!_isString(type)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an @context @type value must be a string.',
        'jsonld.SyntaxError',
        {code: 'invalid type mapping', context: localCtx});
    }

    if((type === '@json' || type === '@none')) {
      if(api.processingMode(activeCtx, 1.0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must not be ' +
          `"${type}" in JSON-LD 1.0 mode.`,
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
    } else if(type !== '@id' && type !== '@vocab') {
      // expand @type to full IRI
      type = _expandIri(
        activeCtx, type, {vocab: true, base: false}, localCtx, defined,
        options);
      if(!_isAbsoluteIri(type)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must be an ' +
          'absolute IRI.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
      if(type.indexOf('_:') === 0) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; an @context @type value must be an IRI, ' +
          'not a blank node identifier.',
          'jsonld.SyntaxError',
          {code: 'invalid type mapping', context: localCtx});
      }
    }

    // add @type to mapping
    mapping['@type'] = type;
  }

  if('@container' in value) {
    // normalize container to an array form
    const container = _isString(value['@container']) ?
      [value['@container']] : (value['@container'] || []);
    const validContainers = ['@list', '@set', '@index', '@language'];
    let isValid = true;
    const hasSet = container.includes('@set');

    // JSON-LD 1.1 support
    if(api.processingMode(activeCtx, 1.1)) {
      validContainers.push('@graph', '@id', '@type');

      // check container length
      if(container.includes('@list')) {
        if(container.length !== 1) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; @context @container with @list must ' +
            'have no other values',
            'jsonld.SyntaxError',
            {code: 'invalid container mapping', context: localCtx});
        }
      } else if(container.includes('@graph')) {
        if(container.some(key =>
          key !== '@graph' && key !== '@id' && key !== '@index' &&
          key !== '@set')) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; @context @container with @graph must ' +
            'have no other values other than @id, @index, and @set',
            'jsonld.SyntaxError',
            {code: 'invalid container mapping', context: localCtx});
        }
      } else {
        // otherwise, container may also include @set
        isValid &= container.length <= (hasSet ? 2 : 1);
      }

      if(container.includes('@type')) {
        // If mapping does not have an @type,
        // set it to @id
        mapping['@type'] = mapping['@type'] || '@id';

        // type mapping must be either @id or @vocab
        if(!['@id', '@vocab'].includes(mapping['@type'])) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; container: @type requires @type to be ' +
            '@id or @vocab.',
            'jsonld.SyntaxError',
            {code: 'invalid type mapping', context: localCtx});
        }
      }
    } else {
      // in JSON-LD 1.0, container must not be an array (it must be a string,
      // which is one of the validContainers)
      isValid &= !_isArray(value['@container']);

      // check container length
      isValid &= container.length <= 1;
    }

    // check against valid containers
    isValid &= container.every(c => validContainers.includes(c));

    // @set not allowed with @list
    isValid &= !(hasSet && container.includes('@list'));

    if(!isValid) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value must be ' +
        'one of the following: ' + validContainers.join(', '),
        'jsonld.SyntaxError',
        {code: 'invalid container mapping', context: localCtx});
    }

    if(mapping.reverse &&
      !container.every(c => ['@index', '@set'].includes(c))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @container value for a @reverse ' +
        'type definition must be @index or @set.', 'jsonld.SyntaxError',
        {code: 'invalid reverse property', context: localCtx});
    }

    // add @container to mapping
    mapping['@container'] = container;
  }

  // property indexing
  if('@index' in value) {
    if(!('@container' in value) || !mapping['@container'].includes('@index')) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @index without @index in @container: ' +
        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(!_isString(value['@index']) || value['@index'].indexOf('@') === 0) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @index must expand to an IRI: ' +
        `"${value['@index']}" on term "${term}".`, 'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    mapping['@index'] = value['@index'];
  }

  // scoped contexts
  if('@context' in value) {
    mapping['@context'] = value['@context'];
  }

  if('@language' in value && !('@type' in value)) {
    let language = value['@language'];
    if(language !== null && !_isString(language)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @language value must be ' +
        'a string or null.', 'jsonld.SyntaxError',
        {code: 'invalid language mapping', context: localCtx});
    }

    // add @language to mapping
    if(language !== null) {
      language = language.toLowerCase();
    }
    mapping['@language'] = language;
  }

  // term may be used as a prefix
  if('@prefix' in value) {
    if(term.match(/:|\//)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @prefix used on a compact IRI term',
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(api.isKeyword(mapping['@id'])) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; keywords may not be used as prefixes',
        'jsonld.SyntaxError',
        {code: 'invalid term definition', context: localCtx});
    }
    if(typeof value['@prefix'] === 'boolean') {
      mapping._prefix = value['@prefix'] === true;
    } else {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context value for @prefix must be boolean',
        'jsonld.SyntaxError',
        {code: 'invalid @prefix value', context: localCtx});
    }
  }

  if('@direction' in value) {
    const direction = value['@direction'];
    if(direction !== null && direction !== 'ltr' && direction !== 'rtl') {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @direction value must be ' +
        'null, "ltr", or "rtl".',
        'jsonld.SyntaxError',
        {code: 'invalid base direction', context: localCtx});
    }
    mapping['@direction'] = direction;
  }

  if('@nest' in value) {
    const nest = value['@nest'];
    if(!_isString(nest) || (nest !== '@nest' && nest.indexOf('@') === 0)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; @context @nest value must be ' +
        'a string which is not a keyword other than @nest.',
        'jsonld.SyntaxError',
        {code: 'invalid @nest value', context: localCtx});
    }
    mapping['@nest'] = nest;
  }

  // disallow aliasing @context and @preserve
  const id = mapping['@id'];
  if(id === '@context' || id === '@preserve') {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; @context and @preserve cannot be aliased.',
      'jsonld.SyntaxError', {code: 'invalid keyword alias', context: localCtx});
  }

  // Check for overriding protected terms
  if(previousMapping && previousMapping.protected && !overrideProtected) {
    // force new term to continue to be protected and see if the mappings would
    // be equal
    activeCtx.protected[term] = true;
    mapping.protected = true;
    if(!_deepCompare(previousMapping, mapping)) {
      const protectedMode = (options && options.protectedMode) || 'error';
      if(protectedMode === 'error') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; tried to redefine a protected term.',
          'jsonld.SyntaxError',
          {code: 'protected term redefinition', context: localCtx, term});
      } else if(protectedMode === 'warn') {
        // FIXME: remove logging and use a handler
        console.warn('WARNING: protected term redefinition', {term});
        return;
      }
      throw new JsonLdError(
        'Invalid protectedMode.',
        'jsonld.SyntaxError',
        {code: 'invalid protected mode', context: localCtx, term,
          protectedMode});
    }
  }
};

/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
api.expandIri = (activeCtx, value, relativeTo, options) => {
  return _expandIri(activeCtx, value, relativeTo, undefined, undefined,
    options);
};

/**
 * Expands a string to a full IRI. The string may be a term, a prefix, a
 * relative IRI, or an absolute IRI. The associated absolute IRI will be
 * returned.
 *
 * @param activeCtx the current active context.
 * @param value the string to expand.
 * @param relativeTo options for how to resolve relative IRIs:
 *          base: true to resolve against the base IRI, false not to.
 *          vocab: true to concatenate after @vocab, false not to.
 * @param localCtx the local context being processed (only given if called
 *          during context processing).
 * @param defined a map for tracking cycles in context definitions (only given
 *          if called during context processing).
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
function _expandIri(activeCtx, value, relativeTo, localCtx, defined, options) {
  // already expanded
  if(value === null || !_isString(value) || api.isKeyword(value)) {
    return value;
  }

  // ignore non-keyword things that look like a keyword
  if(value.match(KEYWORD_PATTERN)) {
    return null;
  }

  // define term dependency if not defined
  if(localCtx && localCtx.hasOwnProperty(value) &&
    defined.get(value) !== true) {
    api.createTermDefinition({
      activeCtx, localCtx, term: value, defined, options
    });
  }

  relativeTo = relativeTo || {};
  if(relativeTo.vocab) {
    const mapping = activeCtx.mappings.get(value);

    // value is explicitly ignored with a null mapping
    if(mapping === null) {
      return null;
    }

    if(_isObject(mapping) && '@id' in mapping) {
      // value is a term
      return mapping['@id'];
    }
  }

  // split value into prefix:suffix
  const colon = value.indexOf(':');
  if(colon > 0) {
    const prefix = value.substr(0, colon);
    const suffix = value.substr(colon + 1);

    // do not expand blank nodes (prefix of '_') or already-absolute
    // IRIs (suffix of '//')
    if(prefix === '_' || suffix.indexOf('//') === 0) {
      return value;
    }

    // prefix dependency not defined, define it
    if(localCtx && localCtx.hasOwnProperty(prefix)) {
      api.createTermDefinition({
        activeCtx, localCtx, term: prefix, defined, options
      });
    }

    // use mapping if prefix is defined
    const mapping = activeCtx.mappings.get(prefix);
    if(mapping && mapping._prefix) {
      return mapping['@id'] + suffix;
    }

    // already absolute IRI
    if(_isAbsoluteIri(value)) {
      return value;
    }
  }

  // prepend vocab
  if(relativeTo.vocab && '@vocab' in activeCtx) {
    return activeCtx['@vocab'] + value;
  }

  // prepend base
  if(relativeTo.base && '@base' in activeCtx) {
    if(activeCtx['@base']) {
      // The null case preserves value as potentially relative
      return prependBase(prependBase(options.base, activeCtx['@base']), value);
    }
  } else if(relativeTo.base) {
    return prependBase(options.base, value);
  }

  return value;
}

/**
 * Gets the initial context.
 *
 * @param options the options to use:
 *          [base] the document base IRI.
 *
 * @return the initial context.
 */
api.getInitialContext = options => {
  const key = JSON.stringify({processingMode: options.processingMode});
  const cached = INITIAL_CONTEXT_CACHE.get(key);
  if(cached) {
    return cached;
  }

  const initialContext = {
    processingMode: options.processingMode,
    mappings: new Map(),
    inverse: null,
    getInverse: _createInverseContext,
    clone: _cloneActiveContext,
    revertToPreviousContext: _revertToPreviousContext,
    protected: {}
  };
  // TODO: consider using LRU cache instead
  if(INITIAL_CONTEXT_CACHE.size === INITIAL_CONTEXT_CACHE_MAX_SIZE) {
    // clear whole cache -- assumes scenario where the cache fills means
    // the cache isn't being used very efficiently anyway
    INITIAL_CONTEXT_CACHE.clear();
  }
  INITIAL_CONTEXT_CACHE.set(key, initialContext);
  return initialContext;

  /**
   * Generates an inverse context for use in the compaction algorithm, if
   * not already generated for the given active context.
   *
   * @return the inverse context.
   */
  function _createInverseContext() {
    const activeCtx = this;

    // lazily create inverse
    if(activeCtx.inverse) {
      return activeCtx.inverse;
    }
    const inverse = activeCtx.inverse = {};

    // variables for building fast CURIE map
    const fastCurieMap = activeCtx.fastCurieMap = {};
    const irisToTerms = {};

    // handle default language
    const defaultLanguage = (activeCtx['@language'] || '@none').toLowerCase();

    // handle default direction
    const defaultDirection = activeCtx['@direction'];

    // create term selections for each mapping in the context, ordered by
    // shortest and then lexicographically least
    const mappings = activeCtx.mappings;
    const terms = [...mappings.keys()].sort(_compareShortestLeast);
    for(const term of terms) {
      const mapping = mappings.get(term);
      if(mapping === null) {
        continue;
      }

      let container = mapping['@container'] || '@none';
      container = [].concat(container).sort().join('');

      if(mapping['@id'] === null) {
        continue;
      }
      // iterate over every IRI in the mapping
      const ids = _asArray(mapping['@id']);
      for(const iri of ids) {
        let entry = inverse[iri];
        const isKeyword = api.isKeyword(iri);

        if(!entry) {
          // initialize entry
          inverse[iri] = entry = {};

          if(!isKeyword && !mapping._termHasColon) {
            // init IRI to term map and fast CURIE prefixes
            irisToTerms[iri] = [term];
            const fastCurieEntry = {iri, terms: irisToTerms[iri]};
            if(iri[0] in fastCurieMap) {
              fastCurieMap[iri[0]].push(fastCurieEntry);
            } else {
              fastCurieMap[iri[0]] = [fastCurieEntry];
            }
          }
        } else if(!isKeyword && !mapping._termHasColon) {
          // add IRI to term match
          irisToTerms[iri].push(term);
        }

        // add new entry
        if(!entry[container]) {
          entry[container] = {
            '@language': {},
            '@type': {},
            '@any': {}
          };
        }
        entry = entry[container];
        _addPreferredTerm(term, entry['@any'], '@none');

        if(mapping.reverse) {
          // term is preferred for values using @reverse
          _addPreferredTerm(term, entry['@type'], '@reverse');
        } else if(mapping['@type'] === '@none') {
          _addPreferredTerm(term, entry['@any'], '@none');
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        } else if('@type' in mapping) {
          // term is preferred for values using specific type
          _addPreferredTerm(term, entry['@type'], mapping['@type']);
        } else if('@language' in mapping && '@direction' in mapping) {
          // term is preferred for values using specific language and direction
          const language = mapping['@language'];
          const direction = mapping['@direction'];
          if(language && direction) {
            _addPreferredTerm(term, entry['@language'],
              `${language}_${direction}`.toLowerCase());
          } else if(language) {
            _addPreferredTerm(term, entry['@language'], language.toLowerCase());
          } else if(direction) {
            _addPreferredTerm(term, entry['@language'], `_${direction}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@null');
          }
        } else if('@language' in mapping) {
          _addPreferredTerm(term, entry['@language'],
            (mapping['@language'] || '@null').toLowerCase());
        } else if('@direction' in mapping) {
          if(mapping['@direction']) {
            _addPreferredTerm(term, entry['@language'],
              `_${mapping['@direction']}`);
          } else {
            _addPreferredTerm(term, entry['@language'], '@none');
          }
        } else if(defaultDirection) {
          _addPreferredTerm(term, entry['@language'], `_${defaultDirection}`);
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        } else {
          // add entries for no type and no language
          _addPreferredTerm(term, entry['@language'], defaultLanguage);
          _addPreferredTerm(term, entry['@language'], '@none');
          _addPreferredTerm(term, entry['@type'], '@none');
        }
      }
    }

    // build fast CURIE map
    for(const key in fastCurieMap) {
      _buildIriMap(fastCurieMap, key, 1);
    }

    return inverse;
  }

  /**
   * Runs a recursive algorithm to build a lookup map for quickly finding
   * potential CURIEs.
   *
   * @param iriMap the map to build.
   * @param key the current key in the map to work on.
   * @param idx the index into the IRI to compare.
   */
  function _buildIriMap(iriMap, key, idx) {
    const entries = iriMap[key];
    const next = iriMap[key] = {};

    let iri;
    let letter;
    for(const entry of entries) {
      iri = entry.iri;
      if(idx >= iri.length) {
        letter = '';
      } else {
        letter = iri[idx];
      }
      if(letter in next) {
        next[letter].push(entry);
      } else {
        next[letter] = [entry];
      }
    }

    for(const key in next) {
      if(key === '') {
        continue;
      }
      _buildIriMap(next, key, idx + 1);
    }
  }

  /**
   * Adds the term for the given entry if not already added.
   *
   * @param term the term to add.
   * @param entry the inverse context typeOrLanguage entry to add to.
   * @param typeOrLanguageValue the key in the entry to add to.
   */
  function _addPreferredTerm(term, entry, typeOrLanguageValue) {
    if(!entry.hasOwnProperty(typeOrLanguageValue)) {
      entry[typeOrLanguageValue] = term;
    }
  }

  /**
   * Clones an active context, creating a child active context.
   *
   * @return a clone (child) of the active context.
   */
  function _cloneActiveContext() {
    const child = {};
    child.mappings = util.clone(this.mappings);
    child.clone = this.clone;
    child.inverse = null;
    child.getInverse = this.getInverse;
    child.protected = util.clone(this.protected);
    if(this.previousContext) {
      child.previousContext = this.previousContext.clone();
    }
    child.revertToPreviousContext = this.revertToPreviousContext;
    if('@base' in this) {
      child['@base'] = this['@base'];
    }
    if('@language' in this) {
      child['@language'] = this['@language'];
    }
    if('@vocab' in this) {
      child['@vocab'] = this['@vocab'];
    }
    return child;
  }

  /**
   * Reverts any type-scoped context in this active context to the previous
   * context.
   */
  function _revertToPreviousContext() {
    if(!this.previousContext) {
      return this;
    }
    return this.previousContext.clone();
  }
};

/**
 * Gets the value for the given active context key and type, null if none is
 * set or undefined if none is set and type is '@context'.
 *
 * @param ctx the active context.
 * @param key the context key.
 * @param [type] the type of value to get (eg: '@id', '@type'), if not
 *          specified gets the entire entry for a key, null if not found.
 *
 * @return the value, null, or undefined.
 */
api.getContextValue = (ctx, key, type) => {
  // invalid key
  if(key === null) {
    if(type === '@context') {
      return undefined;
    }
    return null;
  }

  // get specific entry information
  if(ctx.mappings.has(key)) {
    const entry = ctx.mappings.get(key);

    if(_isUndefined(type)) {
      // return whole entry
      return entry;
    }
    if(entry.hasOwnProperty(type)) {
      // return entry value for type
      return entry[type];
    }
  }

  // get default language
  if(type === '@language' && type in ctx) {
    return ctx[type];
  }

  // get default direction
  if(type === '@direction' && type in ctx) {
    return ctx[type];
  }

  if(type === '@context') {
    return undefined;
  }
  return null;
};

/**
 * Processing Mode check.
 *
 * @param activeCtx the current active context.
 * @param version the string or numeric version to check.
 *
 * @return boolean.
 */
api.processingMode = (activeCtx, version) => {
  if(version.toString() >= '1.1') {
    return !activeCtx.processingMode ||
      activeCtx.processingMode >= 'json-ld-' + version.toString();
  } else {
    return activeCtx.processingMode === 'json-ld-1.0';
  }
};

/**
 * Returns whether or not the given value is a keyword.
 *
 * @param v the value to check.
 *
 * @return true if the value is a keyword, false if not.
 */
api.isKeyword = v => {
  if(!_isString(v) || v[0] !== '@') {
    return false;
  }
  switch(v) {
    case '@base':
    case '@container':
    case '@context':
    case '@default':
    case '@direction':
    case '@embed':
    case '@explicit':
    case '@graph':
    case '@id':
    case '@included':
    case '@index':
    case '@json':
    case '@language':
    case '@list':
    case '@nest':
    case '@none':
    case '@omitDefault':
    case '@prefix':
    case '@preserve':
    case '@protected':
    case '@requireAll':
    case '@reverse':
    case '@set':
    case '@type':
    case '@value':
    case '@version':
    case '@vocab':
      return true;
  }
  return false;
};

function _deepCompare(x1, x2) {
  // compare `null` or primitive types directly
  if((!(x1 && typeof x1 === 'object')) ||
     (!(x2 && typeof x2 === 'object'))) {
    return x1 === x2;
  }
  // x1 and x2 are objects (also potentially arrays)
  const x1Array = Array.isArray(x1);
  if(x1Array !== Array.isArray(x2)) {
    return false;
  }
  if(x1Array) {
    if(x1.length !== x2.length) {
      return false;
    }
    for(let i = 0; i < x1.length; ++i) {
      if(!_deepCompare(x1[i], x2[i])) {
        return false;
      }
    }
    return true;
  }
  // x1 and x2 are non-array objects
  const k1s = Object.keys(x1);
  const k2s = Object.keys(x2);
  if(k1s.length !== k2s.length) {
    return false;
  }
  for(const k1 in x1) {
    let v1 = x1[k1];
    let v2 = x2[k1];
    // special case: `@container` can be in any order
    if(k1 === '@container') {
      if(Array.isArray(v1) && Array.isArray(v2)) {
        v1 = v1.slice().sort();
        v2 = v2.slice().sort();
      }
    }
    if(!_deepCompare(v1, v2)) {
      return false;
    }
  }
  return true;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/documentLoaders/node.js":
/*!**********************************************************!*\
  !*** ../node_modules/jsonld/lib/documentLoaders/node.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {parseLinkHeader, buildHeaders} = __webpack_require__(/*! ../util */ "../node_modules/jsonld/lib/util.js");
const {LINK_HEADER_CONTEXT} = __webpack_require__(/*! ../constants */ "../node_modules/jsonld/lib/constants.js");
const JsonLdError = __webpack_require__(/*! ../JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const RequestQueue = __webpack_require__(/*! ../RequestQueue */ "../node_modules/jsonld/lib/RequestQueue.js");
const {prependBase} = __webpack_require__(/*! ../url */ "../node_modules/jsonld/lib/url.js");

/**
 * Creates a built-in node document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          strictSSL: true to require SSL certificates to be valid,
 *            false not to (default: true).
 *          maxRedirects: the maximum number of redirects to permit, none by
 *            default.
 *          request: the object which will make the request, default is
 *            provided by `https://www.npmjs.com/package/request`.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *
 * @return the node document loader.
 */
module.exports = ({
  secure,
  strictSSL = true,
  maxRedirects = -1,
  request,
  headers = {}
} = {strictSSL: true, maxRedirects: -1, headers: {}}) => {
  headers = buildHeaders(headers);
  // TODO: use `axios`
  request = request || __webpack_require__(/*! request */ 10);
  const http = __webpack_require__(/*! http */ 11);

  const queue = new RequestQueue();
  return queue.wrapLoader(function(url) {
    return loadDocument(url, []);
  });

  async function loadDocument(url, redirects) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    if(secure && url.indexOf('https') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    // TODO: disable cache until HTTP caching implemented
    let doc = null;//cache.get(url);
    if(doc !== null) {
      return doc;
    }

    let result;
    let alternate = null;
    try {
      result = await _request(request, {
        url,
        headers,
        strictSSL,
        followRedirect: false
      });
    } catch(e) {
      throw new JsonLdError(
        'URL could not be dereferenced, an error occurred.',
        'jsonld.LoadDocumentError',
        {code: 'loading document failed', url, cause: e});
    }

    const {res, body} = result;

    doc = {contextUrl: null, documentUrl: url, document: body || null};

    // handle error
    const statusText = http.STATUS_CODES[res.statusCode];
    if(res.statusCode >= 400) {
      throw new JsonLdError(
        `URL "${url}" could not be dereferenced: ${statusText}`,
        'jsonld.InvalidUrl', {
          code: 'loading document failed',
          url,
          httpStatusCode: res.statusCode
        });
    }

    // handle Link Header
    if(res.headers.link &&
      res.headers['content-type'] !== 'application/ld+json') {
      // only 1 related link header permitted
      const linkHeaders = parseLinkHeader(res.headers.link);
      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
      if(Array.isArray(linkedContext)) {
        throw new JsonLdError(
          'URL could not be dereferenced, it has more than one associated ' +
          'HTTP Link Header.',
          'jsonld.InvalidUrl',
          {code: 'multiple context link headers', url});
      }
      if(linkedContext) {
        doc.contextUrl = linkedContext.target;
      }

      // "alternate" link header is a redirect
      alternate = linkHeaders['alternate'];
      if(alternate &&
        alternate.type == 'application/ld+json' &&
        !(res.headers['content-type'] || '')
          .match(/^application\/(\w*\+)?json$/)) {
        res.headers.location = prependBase(url, alternate.target);
      }
    }

    // handle redirect
    if((alternate ||
      res.statusCode >= 300 && res.statusCode < 400) && res.headers.location) {
      if(redirects.length === maxRedirects) {
        throw new JsonLdError(
          'URL could not be dereferenced; there were too many redirects.',
          'jsonld.TooManyRedirects', {
            code: 'loading document failed',
            url,
            httpStatusCode: res.statusCode,
            redirects
          });
      }
      if(redirects.indexOf(url) !== -1) {
        throw new JsonLdError(
          'URL could not be dereferenced; infinite redirection was detected.',
          'jsonld.InfiniteRedirectDetected', {
            code: 'recursive context inclusion',
            url,
            httpStatusCode: res.statusCode,
            redirects
          });
      }
      redirects.push(url);
      return loadDocument(res.headers.location, redirects);
    }

    // cache for each redirected URL
    redirects.push(url);
    // TODO: disable cache until HTTP caching implemented
    /*
    for(let i = 0; i < redirects.length; ++i) {
      cache.set(
        redirects[i],
        {contextUrl: null, documentUrl: redirects[i], document: body});
    }
    */

    return doc;
  }
};

function _request(request, options) {
  return new Promise((resolve, reject) => {
    request(options, (err, res, body) => {
      if(err) {
        reject(err);
      } else {
        resolve({res, body});
      }
    });
  });
}


/***/ }),

/***/ "../node_modules/jsonld/lib/documentLoaders/xhr.js":
/*!*********************************************************!*\
  !*** ../node_modules/jsonld/lib/documentLoaders/xhr.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {parseLinkHeader, buildHeaders} = __webpack_require__(/*! ../util */ "../node_modules/jsonld/lib/util.js");
const {LINK_HEADER_CONTEXT} = __webpack_require__(/*! ../constants */ "../node_modules/jsonld/lib/constants.js");
const JsonLdError = __webpack_require__(/*! ../JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const RequestQueue = __webpack_require__(/*! ../RequestQueue */ "../node_modules/jsonld/lib/RequestQueue.js");
const {prependBase} = __webpack_require__(/*! ../url */ "../node_modules/jsonld/lib/url.js");

const REGEX_LINK_HEADER = /(^|(\r\n))link:/i;

/**
 * Creates a built-in XMLHttpRequest document loader.
 *
 * @param options the options to use:
 *          secure: require all URLs to use HTTPS.
 *          headers: an object (map) of headers which will be passed as request
 *            headers for the requested document. Accept is not allowed.
 *          [xhr]: the XMLHttpRequest API to use.
 *
 * @return the XMLHttpRequest document loader.
 */
module.exports = ({
  secure,
  headers = {},
  xhr
} = {headers: {}}) => {
  headers = buildHeaders(headers);
  const queue = new RequestQueue();
  return queue.wrapLoader(loader);

  async function loader(url) {
    if(url.indexOf('http:') !== 0 && url.indexOf('https:') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; only "http" and "https" URLs are ' +
        'supported.',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }
    if(secure && url.indexOf('https') !== 0) {
      throw new JsonLdError(
        'URL could not be dereferenced; secure mode is enabled and ' +
        'the URL\'s scheme is not "https".',
        'jsonld.InvalidUrl', {code: 'loading document failed', url});
    }

    let req;
    try {
      req = await _get(xhr, url, headers);
    } catch(e) {
      throw new JsonLdError(
        'URL could not be dereferenced, an error occurred.',
        'jsonld.LoadDocumentError',
        {code: 'loading document failed', url, cause: e});
    }

    if(req.status >= 400) {
      throw new JsonLdError(
        'URL could not be dereferenced: ' + req.statusText,
        'jsonld.LoadDocumentError', {
          code: 'loading document failed',
          url,
          httpStatusCode: req.status
        });
    }

    let doc = {contextUrl: null, documentUrl: url, document: req.response};
    let alternate = null;

    // handle Link Header (avoid unsafe header warning by existence testing)
    const contentType = req.getResponseHeader('Content-Type');
    let linkHeader;
    if(REGEX_LINK_HEADER.test(req.getAllResponseHeaders())) {
      linkHeader = req.getResponseHeader('Link');
    }
    if(linkHeader && contentType !== 'application/ld+json') {
      // only 1 related link header permitted
      const linkHeaders = parseLinkHeader(linkHeader);
      const linkedContext = linkHeaders[LINK_HEADER_CONTEXT];
      if(Array.isArray(linkedContext)) {
        throw new JsonLdError(
          'URL could not be dereferenced, it has more than one ' +
          'associated HTTP Link Header.',
          'jsonld.InvalidUrl',
          {code: 'multiple context link headers', url});
      }
      if(linkedContext) {
        doc.contextUrl = linkedContext.target;
      }

      // "alternate" link header is a redirect
      alternate = linkHeaders['alternate'];
      if(alternate &&
        alternate.type == 'application/ld+json' &&
        !(contentType || '').match(/^application\/(\w*\+)?json$/)) {
        doc = await loader(prependBase(url, alternate.target));
      }
    }

    return doc;
  }
};

function _get(xhr, url, headers) {
  xhr = xhr || XMLHttpRequest;
  const req = new xhr();
  return new Promise((resolve, reject) => {
    req.onload = () => resolve(req);
    req.onerror = err => reject(err);
    req.open('GET', url, true);
    for(const k in headers) {
      req.setRequestHeader(k, headers[k]);
    }
    req.send();
  });
}


/***/ }),

/***/ "../node_modules/jsonld/lib/expand.js":
/*!********************************************!*\
  !*** ../node_modules/jsonld/lib/expand.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");

const {
  isArray: _isArray,
  isObject: _isObject,
  isEmptyObject: _isEmptyObject,
  isString: _isString,
  isUndefined: _isUndefined
} = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const {
  isList: _isList,
  isValue: _isValue,
  isGraph: _isGraph,
  isSubject: _isSubject
} = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");

const {
  expandIri: _expandIri,
  getContextValue: _getContextValue,
  isKeyword: _isKeyword,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");

const {
  isAbsolute: _isAbsoluteIri
} = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");

const {
  addValue: _addValue,
  asArray: _asArray,
  getValues: _getValues,
  validateTypeValue: _validateTypeValue
} = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");

const api = {};
module.exports = api;
const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;

/**
 * Recursively expands an element using the given context. Any context in
 * the element will be removed. All context URLs must have been retrieved
 * before calling this method.
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element, null for none.
 * @param element the element to expand.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param insideIndex true if the element is inside an index container,
 *          false if not.
 * @param typeScopedContext an optional type-scoped active context for
 *          expanding values of nodes that were expressed according to
 *          a type-scoped context.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 *
 * @return a Promise that resolves to the expanded value.
 */
api.expand = async ({
  activeCtx,
  activeProperty = null,
  element,
  options = {},
  insideList = false,
  insideIndex = false,
  typeScopedContext = null,
  expansionMap = () => undefined
}) => {
  // nothing to expand
  if(element === null || element === undefined) {
    return null;
  }

  // disable framing if activeProperty is @default
  if(activeProperty === '@default') {
    options = Object.assign({}, options, {isFrame: false});
  }

  if(!_isArray(element) && !_isObject(element)) {
    // drop free-floating scalars that are not in lists unless custom mapped
    if(!insideList && (activeProperty === null ||
      _expandIri(activeCtx, activeProperty, {vocab: true},
        options) === '@graph')) {
      const mapped = await expansionMap({
        unmappedValue: element,
        activeCtx,
        activeProperty,
        options,
        insideList
      });
      if(mapped === undefined) {
        return null;
      }
      return mapped;
    }

    // expand element according to value expansion rules
    return _expandValue({activeCtx, activeProperty, value: element, options});
  }

  // recursively expand array
  if(_isArray(element)) {
    let rval = [];
    const container = _getContextValue(
      activeCtx, activeProperty, '@container') || [];
    insideList = insideList || container.includes('@list');
    for(let i = 0; i < element.length; ++i) {
      // expand element
      let e = await api.expand({
        activeCtx,
        activeProperty,
        element: element[i],
        options,
        expansionMap,
        insideIndex,
        typeScopedContext
      });
      if(insideList && _isArray(e)) {
        e = {'@list': e};
      }

      if(e === null) {
        e = await expansionMap({
          unmappedValue: element[i],
          activeCtx,
          activeProperty,
          parent: element,
          index: i,
          options,
          expandedParent: rval,
          insideList
        });
        if(e === undefined) {
          continue;
        }
      }

      if(_isArray(e)) {
        rval = rval.concat(e);
      } else {
        rval.push(e);
      }
    }
    return rval;
  }

  // recursively expand object:

  // first, expand the active property
  const expandedActiveProperty = _expandIri(
    activeCtx, activeProperty, {vocab: true}, options);

  // Get any property-scoped context for activeProperty
  const propertyScopedCtx =
    _getContextValue(activeCtx, activeProperty, '@context');

  // second, determine if any type-scoped context should be reverted; it
  // should only be reverted when the following are all true:
  // 1. `element` is not a value or subject reference
  // 2. `insideIndex` is false
  typeScopedContext = typeScopedContext ||
    (activeCtx.previousContext ? activeCtx : null);
  let keys = Object.keys(element).sort();
  let mustRevert = !insideIndex;
  if(mustRevert && typeScopedContext && keys.length <= 2 &&
    !keys.includes('@context')) {
    for(const key of keys) {
      const expandedProperty = _expandIri(
        typeScopedContext, key, {vocab: true}, options);
      if(expandedProperty === '@value') {
        // value found, ensure type-scoped context is used to expand it
        mustRevert = false;
        activeCtx = typeScopedContext;
        break;
      }
      if(expandedProperty === '@id' && keys.length === 1) {
        // subject reference found, do not revert
        mustRevert = false;
        break;
      }
    }
  }

  if(mustRevert) {
    // revert type scoped context
    activeCtx = activeCtx.revertToPreviousContext();
  }

  // apply property-scoped context after reverting term-scoped context
  if(!_isUndefined(propertyScopedCtx)) {
    activeCtx = await _processContext({
      activeCtx,
      localCtx: propertyScopedCtx,
      propagate: true,
      overrideProtected: true,
      options
    });
  }

  // if element has a context, process it
  if('@context' in element) {
    activeCtx = await _processContext(
      {activeCtx, localCtx: element['@context'], options});
  }

  // set the type-scoped context to the context on input, for use later
  typeScopedContext = activeCtx;

  // Remember the first key found expanding to @type
  let typeKey = null;

  // look for scoped contexts on `@type`
  for(const key of keys) {
    const expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);
    if(expandedProperty === '@type') {
      // set scoped contexts from @type
      // avoid sorting if possible
      typeKey = typeKey || key;
      const value = element[key];
      const types =
        Array.isArray(value) ?
          (value.length > 1 ? value.slice().sort() : value) : [value];
      for(const type of types) {
        const ctx = _getContextValue(typeScopedContext, type, '@context');
        if(!_isUndefined(ctx)) {
          activeCtx = await _processContext({
            activeCtx,
            localCtx: ctx,
            options,
            propagate: false
          });
        }
      }
    }
  }

  // process each key and value in element, ignoring @nest content
  let rval = {};
  await _expandObject({
    activeCtx,
    activeProperty,
    expandedActiveProperty,
    element,
    expandedParent: rval,
    options,
    insideList,
    typeKey,
    typeScopedContext,
    expansionMap});

  // get property count on expanded output
  keys = Object.keys(rval);
  let count = keys.length;

  if('@value' in rval) {
    // @value must only have @language or @type
    if('@type' in rval && ('@language' in rval || '@direction' in rval)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may not ' +
        'contain both "@type" and either "@language" or "@direction".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    let validCount = count - 1;
    if('@type' in rval) {
      validCount -= 1;
    }
    if('@index' in rval) {
      validCount -= 1;
    }
    if('@language' in rval) {
      validCount -= 1;
    }
    if('@direction' in rval) {
      validCount -= 1;
    }
    if(validCount !== 0) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" may only ' +
        'have an "@index" property and either "@type" ' +
        'or either or both "@language" or "@direction".',
        'jsonld.SyntaxError', {code: 'invalid value object', element: rval});
    }
    const values = rval['@value'] === null ? [] : _asArray(rval['@value']);
    const types = _getValues(rval, '@type');

    // drop null @values unless custom mapped
    if(_processingMode(activeCtx, 1.1) && types.includes('@json') &&
      types.length === 1) {
      // Any value of @value is okay if @type: @json
    } else if(values.length === 0) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });
      if(mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    } else if(!values.every(v => (_isString(v) || _isEmptyObject(v))) &&
      '@language' in rval) {
      // if @language is present, @value must be a string
      throw new JsonLdError(
        'Invalid JSON-LD syntax; only strings may be language-tagged.',
        'jsonld.SyntaxError',
        {code: 'invalid language-tagged value', element: rval});
    } else if(!types.every(t =>
      (_isAbsoluteIri(t) && !(_isString(t) && t.indexOf('_:') === 0) ||
      _isEmptyObject(t)))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; an element containing "@value" and "@type" ' +
        'must have an absolute IRI for the value of "@type".',
        'jsonld.SyntaxError', {code: 'invalid typed value', element: rval});
    }
  } else if('@type' in rval && !_isArray(rval['@type'])) {
    // convert @type to an array
    rval['@type'] = [rval['@type']];
  } else if('@set' in rval || '@list' in rval) {
    // handle @set and @list
    if(count > 1 && !(count === 2 && '@index' in rval)) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; if an element has the property "@set" ' +
        'or "@list", then it can have at most one other property that is ' +
        '"@index".', 'jsonld.SyntaxError',
        {code: 'invalid set or list object', element: rval});
    }
    // optimize away @set
    if('@set' in rval) {
      rval = rval['@set'];
      keys = Object.keys(rval);
      count = keys.length;
    }
  } else if(count === 1 && '@language' in rval) {
    // drop objects with only @language unless custom mapped
    const mapped = await expansionMap(rval, {
      unmappedValue: rval,
      activeCtx,
      activeProperty,
      element,
      options,
      insideList
    });
    if(mapped !== undefined) {
      rval = mapped;
    } else {
      rval = null;
    }
  }

  // drop certain top-level objects that do not occur in lists, unless custom
  // mapped
  if(_isObject(rval) &&
    !options.keepFreeFloatingNodes && !insideList &&
    (activeProperty === null || expandedActiveProperty === '@graph')) {
    // drop empty object, top-level @value/@list, or object with only @id
    if(count === 0 || '@value' in rval || '@list' in rval ||
      (count === 1 && '@id' in rval)) {
      const mapped = await expansionMap({
        unmappedValue: rval,
        activeCtx,
        activeProperty,
        element,
        options,
        insideList
      });
      if(mapped !== undefined) {
        rval = mapped;
      } else {
        rval = null;
      }
    }
  }

  return rval;
};

/**
 * Expand each key and value of element adding to result
 *
 * @param activeCtx the context to use.
 * @param activeProperty the property for the element.
 * @param expandedActiveProperty the expansion of activeProperty
 * @param element the element to expand.
 * @param expandedParent the expanded result into which to add values.
 * @param options the expansion options.
 * @param insideList true if the element is a list, false if not.
 * @param typeKey first key found expanding to @type.
 * @param typeScopedContext the context before reverting.
 * @param expansionMap(info) a function that can be used to custom map
 *          unmappable values (or to throw an error when they are detected);
 *          if this function returns `undefined` then the default behavior
 *          will be used.
 */
async function _expandObject({
  activeCtx,
  activeProperty,
  expandedActiveProperty,
  element,
  expandedParent,
  options = {},
  insideList,
  typeKey,
  typeScopedContext,
  expansionMap
}) {
  const keys = Object.keys(element).sort();
  const nests = [];
  let unexpandedValue;

  // Figure out if this is the type for a JSON literal
  const isJsonType = element[typeKey] &&
    _expandIri(activeCtx,
      (_isArray(element[typeKey]) ? element[typeKey][0] : element[typeKey]),
      {vocab: true}, options) === '@json';

  for(const key of keys) {
    let value = element[key];
    let expandedValue;

    // skip @context
    if(key === '@context') {
      continue;
    }

    // expand property
    let expandedProperty = _expandIri(activeCtx, key, {vocab: true}, options);

    // drop non-absolute IRI keys that aren't keywords unless custom mapped
    if(expandedProperty === null ||
      !(_isAbsoluteIri(expandedProperty) || _isKeyword(expandedProperty))) {
      // TODO: use `await` to support async
      expandedProperty = expansionMap({
        unmappedProperty: key,
        activeCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        value,
        expandedParent
      });
      if(expandedProperty === undefined) {
        continue;
      }
    }

    if(_isKeyword(expandedProperty)) {
      if(expandedActiveProperty === '@reverse') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; a keyword cannot be used as a @reverse ' +
          'property.', 'jsonld.SyntaxError',
          {code: 'invalid reverse property map', value});
      }
      if(expandedProperty in expandedParent &&
         expandedProperty !== '@included' &&
         expandedProperty !== '@type') {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; colliding keywords detected.',
          'jsonld.SyntaxError',
          {code: 'colliding keywords', keyword: expandedProperty});
      }
    }

    // syntax error if @id is not a string
    if(expandedProperty === '@id') {
      if(!_isString(value)) {
        if(!options.isFrame) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@id" value must a string.',
            'jsonld.SyntaxError', {code: 'invalid @id value', value});
        }
        if(_isObject(value)) {
          // empty object is a wildcard
          if(!_isEmptyObject(value)) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
              'of strings, if framing',
              'jsonld.SyntaxError', {code: 'invalid @id value', value});
          }
        } else if(_isArray(value)) {
          if(!value.every(v => _isString(v))) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
              'of strings, if framing',
              'jsonld.SyntaxError', {code: 'invalid @id value', value});
          }
        } else {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@id" value an empty object or array ' +
            'of strings, if framing',
            'jsonld.SyntaxError', {code: 'invalid @id value', value});
        }
      }

      _addValue(
        expandedParent, '@id',
        _asArray(value).map(v =>
          _isString(v) ? _expandIri(activeCtx, v, {base: true}, options) : v),
        {propertyIsArray: options.isFrame});
      continue;
    }

    if(expandedProperty === '@type') {
      // if framing, can be a default object, but need to expand
      // key to determine that
      if(_isObject(value)) {
        value = Object.fromEntries(Object.entries(value).map(([k, v]) => [
          _expandIri(typeScopedContext, k, {vocab: true}),
          _asArray(v).map(vv =>
            _expandIri(typeScopedContext, vv, {base: true, vocab: true})
          )
        ]));
      }
      _validateTypeValue(value, options.isFrame);
      _addValue(
        expandedParent, '@type',
        _asArray(value).map(v =>
          _isString(v) ?
            _expandIri(typeScopedContext, v,
              {base: true, vocab: true}, options) : v),
        {propertyIsArray: options.isFrame});
      continue;
    }

    // Included blocks are treated as an array of separate object nodes sharing
    // the same referencing active_property.
    // For 1.0, it is skipped as are other unknown keywords
    if(expandedProperty === '@included' && _processingMode(activeCtx, 1.1)) {
      const includedResult = _asArray(await api.expand({
        activeCtx,
        activeProperty,
        element: value,
        options,
        expansionMap
      }));

      // Expanded values must be node objects
      if(!includedResult.every(v => _isSubject(v))) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; ' +
          'values of @included must expand to node objects.',
          'jsonld.SyntaxError', {code: 'invalid @included value', value});
      }

      _addValue(
        expandedParent, '@included', includedResult, {propertyIsArray: true});
      continue;
    }

    // @graph must be an array or an object
    if(expandedProperty === '@graph' &&
      !(_isObject(value) || _isArray(value))) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@graph" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError', {code: 'invalid @graph value', value});
    }

    if(expandedProperty === '@value') {
      // capture value for later
      // "colliding keywords" check prevents this from being set twice
      unexpandedValue = value;
      if(isJsonType && _processingMode(activeCtx, 1.1)) {
        // no coercion to array, and retain all values
        expandedParent['@value'] = value;
      } else {
        _addValue(
          expandedParent, '@value', value, {propertyIsArray: options.isFrame});
      }
      continue;
    }

    // @language must be a string
    // it should match BCP47
    if(expandedProperty === '@language') {
      if(value === null) {
        // drop null @language values, they expand as if they didn't exist
        continue;
      }
      if(!_isString(value) && !options.isFrame) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@language" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid language-tagged string', value});
      }
      // ensure language value is lowercase
      value = _asArray(value).map(v => _isString(v) ? v.toLowerCase() : v);

      // ensure language tag matches BCP47
      for(const lang of value) {
        if(_isString(lang) && !lang.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${lang}`);
        }
      }

      _addValue(
        expandedParent, '@language', value, {propertyIsArray: options.isFrame});
      continue;
    }

    // @direction must be "ltr" or "rtl"
    if(expandedProperty === '@direction') {
      if(!_isString(value) && !options.isFrame) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@direction" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid base direction', value});
      }

      value = _asArray(value);

      // ensure direction is "ltr" or "rtl"
      for(const dir of value) {
        if(_isString(dir) && dir !== 'ltr' && dir !== 'rtl') {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@direction" must be "ltr" or "rtl".',
            'jsonld.SyntaxError',
            {code: 'invalid base direction', value});
        }
      }

      _addValue(
        expandedParent, '@direction', value,
        {propertyIsArray: options.isFrame});
      continue;
    }

    // @index must be a string
    if(expandedProperty === '@index') {
      if(!_isString(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@index" value must be a string.',
          'jsonld.SyntaxError',
          {code: 'invalid @index value', value});
      }
      _addValue(expandedParent, '@index', value);
      continue;
    }

    // @reverse must be an object
    if(expandedProperty === '@reverse') {
      if(!_isObject(value)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; "@reverse" value must be an object.',
          'jsonld.SyntaxError', {code: 'invalid @reverse value', value});
      }

      expandedValue = await api.expand({
        activeCtx,
        activeProperty:
        '@reverse',
        element: value,
        options,
        expansionMap
      });
      // properties double-reversed
      if('@reverse' in expandedValue) {
        for(const property in expandedValue['@reverse']) {
          _addValue(
            expandedParent, property, expandedValue['@reverse'][property],
            {propertyIsArray: true});
        }
      }

      // FIXME: can this be merged with code below to simplify?
      // merge in all reversed properties
      let reverseMap = expandedParent['@reverse'] || null;
      for(const property in expandedValue) {
        if(property === '@reverse') {
          continue;
        }
        if(reverseMap === null) {
          reverseMap = expandedParent['@reverse'] = {};
        }
        _addValue(reverseMap, property, [], {propertyIsArray: true});
        const items = expandedValue[property];
        for(let ii = 0; ii < items.length; ++ii) {
          const item = items[ii];
          if(_isValue(item) || _isList(item)) {
            throw new JsonLdError(
              'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
              '@value or an @list.', 'jsonld.SyntaxError',
              {code: 'invalid reverse property value', value: expandedValue});
          }
          _addValue(reverseMap, property, item, {propertyIsArray: true});
        }
      }

      continue;
    }

    // nested keys
    if(expandedProperty === '@nest') {
      nests.push(key);
      continue;
    }

    // use potential scoped context for key
    let termCtx = activeCtx;
    const ctx = _getContextValue(activeCtx, key, '@context');
    if(!_isUndefined(ctx)) {
      termCtx = await _processContext({
        activeCtx,
        localCtx: ctx,
        propagate: true,
        overrideProtected: true,
        options
      });
    }

    const container = _getContextValue(termCtx, key, '@container') || [];

    if(container.includes('@language') && _isObject(value)) {
      const direction = _getContextValue(termCtx, key, '@direction');
      // handle language map container (skip if value is not an object)
      expandedValue = _expandLanguageMap(termCtx, value, direction, options);
    } else if(container.includes('@index') && _isObject(value)) {
      // handle index container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      const indexKey = _getContextValue(termCtx, key, '@index') || '@index';
      const propertyIndex = indexKey !== '@index' &&
        _expandIri(activeCtx, indexKey, {vocab: true}, options);

      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey,
        propertyIndex
      });
    } else if(container.includes('@id') && _isObject(value)) {
      // handle id container (skip if value is not an object)
      const asGraph = container.includes('@graph');
      expandedValue = await _expandIndexMap({
        activeCtx: termCtx,
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph,
        indexKey: '@id'
      });
    } else if(container.includes('@type') && _isObject(value)) {
      // handle type container (skip if value is not an object)
      expandedValue = await _expandIndexMap({
        // since container is `@type`, revert type scoped context when expanding
        activeCtx: termCtx.revertToPreviousContext(),
        options,
        activeProperty: key,
        value,
        expansionMap,
        asGraph: false,
        indexKey: '@type'
      });
    } else {
      // recurse into @list or @set
      const isList = (expandedProperty === '@list');
      if(isList || expandedProperty === '@set') {
        let nextActiveProperty = activeProperty;
        if(isList && expandedActiveProperty === '@graph') {
          nextActiveProperty = null;
        }
        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: nextActiveProperty,
          element: value,
          options,
          insideList: isList,
          expansionMap
        });
      } else if(
        _getContextValue(activeCtx, key, '@type') === '@json') {
        expandedValue = {
          '@type': '@json',
          '@value': value
        };
      } else {
        // recursively expand value with key as new active property
        expandedValue = await api.expand({
          activeCtx: termCtx,
          activeProperty: key,
          element: value,
          options,
          insideList: false,
          expansionMap
        });
      }
    }

    // drop null values if property is not @value
    if(expandedValue === null && expandedProperty !== '@value') {
      // TODO: use `await` to support async
      expandedValue = expansionMap({
        unmappedValue: value,
        expandedProperty,
        activeCtx: termCtx,
        activeProperty,
        parent: element,
        options,
        insideList,
        key,
        expandedParent
      });
      if(expandedValue === undefined) {
        continue;
      }
    }

    // convert expanded value to @list if container specifies it
    if(expandedProperty !== '@list' && !_isList(expandedValue) &&
      container.includes('@list')) {
      // ensure expanded value in @list is an array
      expandedValue = {'@list': _asArray(expandedValue)};
    }

    // convert expanded value to @graph if container specifies it
    // and value is not, itself, a graph
    // index cases handled above
    if(container.includes('@graph') &&
      !container.some(key => key === '@id' || key === '@index')) {
      // ensure expanded values are arrays
      expandedValue = _asArray(expandedValue)
        .map(v => ({'@graph': _asArray(v)}));
    }

    // FIXME: can this be merged with code above to simplify?
    // merge in reverse properties
    if(termCtx.mappings.has(key) && termCtx.mappings.get(key).reverse) {
      const reverseMap =
        expandedParent['@reverse'] = expandedParent['@reverse'] || {};
      expandedValue = _asArray(expandedValue);
      for(let ii = 0; ii < expandedValue.length; ++ii) {
        const item = expandedValue[ii];
        if(_isValue(item) || _isList(item)) {
          throw new JsonLdError(
            'Invalid JSON-LD syntax; "@reverse" value must not be a ' +
            '@value or an @list.', 'jsonld.SyntaxError',
            {code: 'invalid reverse property value', value: expandedValue});
        }
        _addValue(reverseMap, expandedProperty, item, {propertyIsArray: true});
      }
      continue;
    }

    // add value for property
    // special keywords handled above
    _addValue(expandedParent, expandedProperty, expandedValue, {
      propertyIsArray: true
    });
  }

  // @value must not be an object or an array (unless framing) or if @type is
  // @json
  if('@value' in expandedParent) {
    if(expandedParent['@type'] === '@json' && _processingMode(activeCtx, 1.1)) {
      // allow any value, to be verified when the object is fully expanded and
      // the @type is @json.
    } else if((_isObject(unexpandedValue) || _isArray(unexpandedValue)) &&
      !options.isFrame) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; "@value" value must not be an ' +
        'object or an array.',
        'jsonld.SyntaxError',
        {code: 'invalid value object value', value: unexpandedValue});
    }
  }

  // expand each nested key
  for(const key of nests) {
    const nestedValues = _isArray(element[key]) ? element[key] : [element[key]];
    for(const nv of nestedValues) {
      if(!_isObject(nv) || Object.keys(nv).some(k =>
        _expandIri(activeCtx, k, {vocab: true}, options) === '@value')) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; nested value must be a node object.',
          'jsonld.SyntaxError',
          {code: 'invalid @nest value', value: nv});
      }
      await _expandObject({
        activeCtx,
        activeProperty,
        expandedActiveProperty,
        element: nv,
        expandedParent,
        options,
        insideList,
        typeScopedContext,
        typeKey,
        expansionMap});
    }
  }
}

/**
 * Expands the given value by using the coercion and keyword rules in the
 * given context.
 *
 * @param activeCtx the active context to use.
 * @param activeProperty the active property the value is associated with.
 * @param value the value to expand.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded value.
 */
function _expandValue({activeCtx, activeProperty, value, options}) {
  // nothing to expand
  if(value === null || value === undefined) {
    return null;
  }

  // special-case expand @id and @type (skips '@id' expansion)
  const expandedProperty = _expandIri(
    activeCtx, activeProperty, {vocab: true}, options);
  if(expandedProperty === '@id') {
    return _expandIri(activeCtx, value, {base: true}, options);
  } else if(expandedProperty === '@type') {
    return _expandIri(activeCtx, value, {vocab: true, base: true}, options);
  }

  // get type definition from context
  const type = _getContextValue(activeCtx, activeProperty, '@type');

  // do @id expansion (automatic for @graph)
  if((type === '@id' || expandedProperty === '@graph') && _isString(value)) {
    return {'@id': _expandIri(activeCtx, value, {base: true}, options)};
  }
  // do @id expansion w/vocab
  if(type === '@vocab' && _isString(value)) {
    return {
      '@id': _expandIri(activeCtx, value, {vocab: true, base: true}, options)
    };
  }

  // do not expand keyword values
  if(_isKeyword(expandedProperty)) {
    return value;
  }

  const rval = {};

  if(type && !['@id', '@vocab', '@none'].includes(type)) {
    // other type
    rval['@type'] = type;
  } else if(_isString(value)) {
    // check for language tagging for strings
    const language = _getContextValue(activeCtx, activeProperty, '@language');
    if(language !== null) {
      rval['@language'] = language;
    }
    const direction = _getContextValue(activeCtx, activeProperty, '@direction');
    if(direction !== null) {
      rval['@direction'] = direction;
    }
  }
  // do conversion of values that aren't basic JSON types to strings
  if(!['boolean', 'number', 'string'].includes(typeof value)) {
    value = value.toString();
  }
  rval['@value'] = value;

  return rval;
}

/**
 * Expands a language map.
 *
 * @param activeCtx the active context to use.
 * @param languageMap the language map to expand.
 * @param direction the direction to apply to values.
 * @param {Object} [options] - processing options.
 *
 * @return the expanded language map.
 */
function _expandLanguageMap(activeCtx, languageMap, direction, options) {
  const rval = [];
  const keys = Object.keys(languageMap).sort();
  for(const key of keys) {
    const expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
    let val = languageMap[key];
    if(!_isArray(val)) {
      val = [val];
    }
    for(const item of val) {
      if(item === null) {
        // null values are allowed (8.5) but ignored (3.1)
        continue;
      }
      if(!_isString(item)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; language map values must be strings.',
          'jsonld.SyntaxError',
          {code: 'invalid language map value', languageMap});
      }
      const val = {'@value': item};
      if(expandedKey !== '@none') {
        val['@language'] = key.toLowerCase();
      }
      if(direction) {
        val['@direction'] = direction;
      }
      rval.push(val);
    }
  }
  return rval;
}

async function _expandIndexMap(
  {activeCtx, options, activeProperty, value, expansionMap, asGraph,
    indexKey, propertyIndex}) {
  const rval = [];
  const keys = Object.keys(value).sort();
  const isTypeIndex = indexKey === '@type';
  for(let key of keys) {
    // if indexKey is @type, there may be a context defined for it
    if(isTypeIndex) {
      const ctx = _getContextValue(activeCtx, key, '@context');
      if(!_isUndefined(ctx)) {
        activeCtx = await _processContext({
          activeCtx,
          localCtx: ctx,
          propagate: false,
          options
        });
      }
    }

    let val = value[key];
    if(!_isArray(val)) {
      val = [val];
    }

    val = await api.expand({
      activeCtx,
      activeProperty,
      element: val,
      options,
      insideList: false,
      insideIndex: true,
      expansionMap
    });

    // expand for @type, but also for @none
    let expandedKey;
    if(propertyIndex) {
      if(key === '@none') {
        expandedKey = '@none';
      } else {
        expandedKey = _expandValue(
          {activeCtx, activeProperty: indexKey, value: key, options});
      }
    } else {
      expandedKey = _expandIri(activeCtx, key, {vocab: true}, options);
    }

    if(indexKey === '@id') {
      // expand document relative
      key = _expandIri(activeCtx, key, {base: true}, options);
    } else if(isTypeIndex) {
      key = expandedKey;
    }

    for(let item of val) {
      // If this is also a @graph container, turn items into graphs
      if(asGraph && !_isGraph(item)) {
        item = {'@graph': [item]};
      }
      if(indexKey === '@type') {
        if(expandedKey === '@none') {
          // ignore @none
        } else if(item['@type']) {
          item['@type'] = [key].concat(item['@type']);
        } else {
          item['@type'] = [key];
        }
      } else if(_isValue(item) &&
        !['@language', '@type', '@index'].includes(indexKey)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; Attempt to add illegal key to value ' +
          `object: "${indexKey}".`,
          'jsonld.SyntaxError',
          {code: 'invalid value object', value: item});
      } else if(propertyIndex) {
        // index is a property to be expanded, and values interpreted for that
        // property
        if(expandedKey !== '@none') {
          // expand key as a value
          _addValue(item, propertyIndex, expandedKey, {
            propertyIsArray: true,
            prependValue: true
          });
        }
      } else if(expandedKey !== '@none' && !(indexKey in item)) {
        item[indexKey] = key;
      }
      rval.push(item);
    }
  }
  return rval;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/flatten.js":
/*!*********************************************!*\
  !*** ../node_modules/jsonld/lib/flatten.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {
  isSubjectReference: _isSubjectReference
} = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");

const {
  createMergedNodeMap: _createMergedNodeMap
} = __webpack_require__(/*! ./nodeMap */ "../node_modules/jsonld/lib/nodeMap.js");

const api = {};
module.exports = api;

/**
 * Performs JSON-LD flattening.
 *
 * @param input the expanded JSON-LD to flatten.
 *
 * @return the flattened output.
 */
api.flatten = input => {
  const defaultGraph = _createMergedNodeMap(input);

  // produce flattened output
  const flattened = [];
  const keys = Object.keys(defaultGraph).sort();
  for(let ki = 0; ki < keys.length; ++ki) {
    const node = defaultGraph[keys[ki]];
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }
  return flattened;
};


/***/ }),

/***/ "../node_modules/jsonld/lib/frame.js":
/*!*******************************************!*\
  !*** ../node_modules/jsonld/lib/frame.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {isKeyword} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");
const graphTypes = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");
const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");
const url = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const {
  createNodeMap: _createNodeMap,
  mergeNodeMapGraphs: _mergeNodeMapGraphs
} = __webpack_require__(/*! ./nodeMap */ "../node_modules/jsonld/lib/nodeMap.js");

const api = {};
module.exports = api;

/**
 * Performs JSON-LD `merged` framing.
 *
 * @param input the expanded JSON-LD to frame.
 * @param frame the expanded JSON-LD frame to use.
 * @param options the framing options.
 *
 * @return the framed output.
 */
api.frameMergedOrDefault = (input, frame, options) => {
  // create framing state
  const state = {
    options,
    embedded: false,
    graph: '@default',
    graphMap: {'@default': {}},
    subjectStack: [],
    link: {},
    bnodeMap: {}
  };

  // produce a map of all graphs and name each bnode
  // FIXME: currently uses subjects from @merged graph only
  const issuer = new util.IdentifierIssuer('_:b');
  _createNodeMap(input, state.graphMap, '@default', issuer);
  if(options.merged) {
    state.graphMap['@merged'] = _mergeNodeMapGraphs(state.graphMap);
    state.graph = '@merged';
  }
  state.subjects = state.graphMap[state.graph];

  // frame the subjects
  const framed = [];
  api.frame(state, Object.keys(state.subjects).sort(), frame, framed);

  // If pruning blank nodes, find those to prune
  if(options.pruneBlankNodeIdentifiers) {
    // remove all blank nodes appearing only once, done in compaction
    options.bnodesToClear =
      Object.keys(state.bnodeMap).filter(id => state.bnodeMap[id].length === 1);
  }

  // remove @preserve from results
  options.link = {};
  return _cleanupPreserve(framed, options);
};

/**
 * Frames subjects according to the given frame.
 *
 * @param state the current framing state.
 * @param subjects the subjects to filter.
 * @param frame the frame.
 * @param parent the parent subject or top-level array.
 * @param property the parent property, initialized to null.
 */
api.frame = (state, subjects, frame, parent, property = null) => {
  // validate the frame
  _validateFrame(frame);
  frame = frame[0];

  // get flags for current frame
  const options = state.options;
  const flags = {
    embed: _getFrameFlag(frame, options, 'embed'),
    explicit: _getFrameFlag(frame, options, 'explicit'),
    requireAll: _getFrameFlag(frame, options, 'requireAll')
  };

  // get link for current graph
  if(!state.link.hasOwnProperty(state.graph)) {
    state.link[state.graph] = {};
  }
  const link = state.link[state.graph];

  // filter out subjects that match the frame
  const matches = _filterSubjects(state, subjects, frame, flags);

  // add matches to output
  const ids = Object.keys(matches).sort();
  for(const id of ids) {
    const subject = matches[id];

    /* Note: In order to treat each top-level match as a compartmentalized
    result, clear the unique embedded subjects map when the property is null,
    which only occurs at the top-level. */
    if(property === null) {
      state.uniqueEmbeds = {[state.graph]: {}};
    } else {
      state.uniqueEmbeds[state.graph] = state.uniqueEmbeds[state.graph] || {};
    }

    if(flags.embed === '@link' && id in link) {
      // TODO: may want to also match an existing linked subject against
      // the current frame ... so different frames could produce different
      // subjects that are only shared in-memory when the frames are the same

      // add existing linked subject
      _addFrameOutput(parent, property, link[id]);
      continue;
    }

    // start output for subject
    const output = {'@id': id};
    if(id.indexOf('_:') === 0) {
      util.addValue(state.bnodeMap, id, output, {propertyIsArray: true});
    }
    link[id] = output;

    // validate @embed
    if((flags.embed === '@first' || flags.embed === '@last') && state.is11) {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; invalid value of @embed.',
        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
    }

    if(!state.embedded && state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      // skip adding this node object to the top level, as it was
      // already included in another node object
      continue;
    }

    // if embed is @never or if a circular reference would be created by an
    // embed, the subject cannot be embedded, just add the reference;
    // note that a circular reference won't occur when the embed flag is
    // `@link` as the above check will short-circuit before reaching this point
    if(state.embedded &&
      (flags.embed === '@never' ||
      _createsCircularReference(subject, state.graph, state.subjectStack))) {
      _addFrameOutput(parent, property, output);
      continue;
    }

    // if only the first (or once) should be embedded
    if(state.embedded &&
       (flags.embed == '@first' || flags.embed == '@once') &&
       state.uniqueEmbeds[state.graph].hasOwnProperty(id)) {
      _addFrameOutput(parent, property, output);
      continue;
    }

    // if only the last match should be embedded
    if(flags.embed === '@last') {
      // remove any existing embed
      if(id in state.uniqueEmbeds[state.graph]) {
        _removeEmbed(state, id);
      }
    }

    state.uniqueEmbeds[state.graph][id] = {parent, property};

    // push matching subject onto stack to enable circular embed checks
    state.subjectStack.push({subject, graph: state.graph});

    // subject is also the name of a graph
    if(id in state.graphMap) {
      let recurse = false;
      let subframe = null;
      if(!('@graph' in frame)) {
        recurse = state.graph !== '@merged';
        subframe = {};
      } else {
        subframe = frame['@graph'][0];
        recurse = !(id === '@merged' || id === '@default');
        if(!types.isObject(subframe)) {
          subframe = {};
        }
      }

      if(recurse) {
        // recurse into graph
        api.frame(
          {...state, graph: id, embedded: false},
          Object.keys(state.graphMap[id]).sort(), [subframe], output, '@graph');
      }
    }

    // if frame has @included, recurse over its sub-frame
    if('@included' in frame) {
      api.frame(
        {...state, embedded: false},
        subjects, frame['@included'], output, '@included');
    }

    // iterate over subject properties
    for(const prop of Object.keys(subject).sort()) {
      // copy keywords to output
      if(isKeyword(prop)) {
        output[prop] = util.clone(subject[prop]);

        if(prop === '@type') {
          // count bnode values of @type
          for(const type of subject['@type']) {
            if(type.indexOf('_:') === 0) {
              util.addValue(
                state.bnodeMap, type, output, {propertyIsArray: true});
            }
          }
        }
        continue;
      }

      // explicit is on and property isn't in the frame, skip processing
      if(flags.explicit && !(prop in frame)) {
        continue;
      }

      // add objects
      for(const o of subject[prop]) {
        const subframe = (prop in frame ?
          frame[prop] : _createImplicitFrame(flags));

        // recurse into list
        if(graphTypes.isList(o)) {
          const subframe =
            (frame[prop] && frame[prop][0] && frame[prop][0]['@list']) ?
              frame[prop][0]['@list'] :
              _createImplicitFrame(flags);

          // add empty list
          const list = {'@list': []};
          _addFrameOutput(output, prop, list);

          // add list objects
          const src = o['@list'];
          for(const oo of src) {
            if(graphTypes.isSubjectReference(oo)) {
              // recurse into subject reference
              api.frame(
                {...state, embedded: true},
                [oo['@id']], subframe, list, '@list');
            } else {
              // include other values automatically
              _addFrameOutput(list, '@list', util.clone(oo));
            }
          }
        } else if(graphTypes.isSubjectReference(o)) {
          // recurse into subject reference
          api.frame(
            {...state, embedded: true},
            [o['@id']], subframe, output, prop);
        } else if(_valueMatch(subframe[0], o)) {
          // include other values, if they match
          _addFrameOutput(output, prop, util.clone(o));
        }
      }
    }

    // handle defaults
    for(const prop of Object.keys(frame).sort()) {
      // skip keywords
      if(prop === '@type') {
        if(!types.isObject(frame[prop][0]) ||
           !('@default' in frame[prop][0])) {
          continue;
        }
        // allow through default types
      } else if(isKeyword(prop)) {
        continue;
      }

      // if omit default is off, then include default values for properties
      // that appear in the next frame but are not in the matching subject
      const next = frame[prop][0] || {};
      const omitDefaultOn = _getFrameFlag(next, options, 'omitDefault');
      if(!omitDefaultOn && !(prop in output)) {
        let preserve = '@null';
        if('@default' in next) {
          preserve = util.clone(next['@default']);
        }
        if(!types.isArray(preserve)) {
          preserve = [preserve];
        }
        output[prop] = [{'@preserve': preserve}];
      }
    }

    // if embed reverse values by finding nodes having this subject as a value
    // of the associated property
    for(const reverseProp of Object.keys(frame['@reverse'] || {}).sort()) {
      const subframe = frame['@reverse'][reverseProp];
      for(const subject of Object.keys(state.subjects)) {
        const nodeValues =
          util.getValues(state.subjects[subject], reverseProp);
        if(nodeValues.some(v => v['@id'] === id)) {
          // node has property referencing this subject, recurse
          output['@reverse'] = output['@reverse'] || {};
          util.addValue(
            output['@reverse'], reverseProp, [], {propertyIsArray: true});
          api.frame(
            {...state, embedded: true},
            [subject], subframe, output['@reverse'][reverseProp],
            property);
        }
      }
    }

    // add output to parent
    _addFrameOutput(parent, property, output);

    // pop matching subject from circular ref-checking stack
    state.subjectStack.pop();
  }
};

/**
 * Replace `@null` with `null`, removing it from arrays.
 *
 * @param input the framed, compacted output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */
api.cleanupNull = (input, options) => {
  // recurse through arrays
  if(types.isArray(input)) {
    const noNulls = input.map(v => api.cleanupNull(v, options));
    return noNulls.filter(v => v); // removes nulls from array
  }

  if(input === '@null') {
    return null;
  }

  if(types.isObject(input)) {
    // handle in-memory linked nodes
    if('@id' in input) {
      const id = input['@id'];
      if(options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);
        if(idx !== -1) {
          // already visited
          return options.link[id][idx];
        }
        // prevent circular visitation
        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    for(const key in input) {
      input[key] = api.cleanupNull(input[key], options);
    }
  }
  return input;
};

/**
 * Creates an implicit frame when recursing through subject matches. If
 * a frame doesn't have an explicit frame for a particular property, then
 * a wildcard child frame will be created that uses the same flags that the
 * parent frame used.
 *
 * @param flags the current framing flags.
 *
 * @return the implicit frame.
 */
function _createImplicitFrame(flags) {
  const frame = {};
  for(const key in flags) {
    if(flags[key] !== undefined) {
      frame['@' + key] = [flags[key]];
    }
  }
  return [frame];
}

/**
 * Checks the current subject stack to see if embedding the given subject
 * would cause a circular reference.
 *
 * @param subjectToEmbed the subject to embed.
 * @param graph the graph the subject to embed is in.
 * @param subjectStack the current stack of subjects.
 *
 * @return true if a circular reference would be created, false if not.
 */
function _createsCircularReference(subjectToEmbed, graph, subjectStack) {
  for(let i = subjectStack.length - 1; i >= 0; --i) {
    const subject = subjectStack[i];
    if(subject.graph === graph &&
      subject.subject['@id'] === subjectToEmbed['@id']) {
      return true;
    }
  }
  return false;
}

/**
 * Gets the frame flag value for the given flag name.
 *
 * @param frame the frame.
 * @param options the framing options.
 * @param name the flag name.
 *
 * @return the flag value.
 */
function _getFrameFlag(frame, options, name) {
  const flag = '@' + name;
  let rval = (flag in frame ? frame[flag][0] : options[name]);
  if(name === 'embed') {
    // default is "@last"
    // backwards-compatibility support for "embed" maps:
    // true => "@last"
    // false => "@never"
    if(rval === true) {
      rval = '@once';
    } else if(rval === false) {
      rval = '@never';
    } else if(rval !== '@always' && rval !== '@never' && rval !== '@link' &&
      rval !== '@first' && rval !== '@last' && rval !== '@once') {
      throw new JsonLdError(
        'Invalid JSON-LD syntax; invalid value of @embed.',
        'jsonld.SyntaxError', {code: 'invalid @embed value', frame});
    }
  }
  return rval;
}

/**
 * Validates a JSON-LD frame, throwing an exception if the frame is invalid.
 *
 * @param frame the frame to validate.
 */
function _validateFrame(frame) {
  if(!types.isArray(frame) || frame.length !== 1 || !types.isObject(frame[0])) {
    throw new JsonLdError(
      'Invalid JSON-LD syntax; a JSON-LD frame must be a single object.',
      'jsonld.SyntaxError', {frame});
  }

  if('@id' in frame[0]) {
    for(const id of util.asArray(frame[0]['@id'])) {
      // @id must be wildcard or an IRI
      if(!(types.isObject(id) || url.isAbsolute(id)) ||
        (types.isString(id) && id.indexOf('_:') === 0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; invalid @id in frame.',
          'jsonld.SyntaxError', {code: 'invalid frame', frame});
      }
    }
  }

  if('@type' in frame[0]) {
    for(const type of util.asArray(frame[0]['@type'])) {
      // @id must be wildcard or an IRI
      if(!(types.isObject(type) || url.isAbsolute(type)) ||
        (types.isString(type) && type.indexOf('_:') === 0)) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; invalid @type in frame.',
          'jsonld.SyntaxError', {code: 'invalid frame', frame});
      }
    }
  }
}

/**
 * Returns a map of all of the subjects that match a parsed frame.
 *
 * @param state the current framing state.
 * @param subjects the set of subjects to filter.
 * @param frame the parsed frame.
 * @param flags the frame flags.
 *
 * @return all of the matched subjects.
 */
function _filterSubjects(state, subjects, frame, flags) {
  // filter subjects in @id order
  const rval = {};
  for(const id of subjects) {
    const subject = state.graphMap[state.graph][id];
    if(_filterSubject(state, subject, frame, flags)) {
      rval[id] = subject;
    }
  }
  return rval;
}

/**
 * Returns true if the given subject matches the given frame.
 *
 * Matches either based on explicit type inclusion where the node has any
 * type listed in the frame. If the frame has empty types defined matches
 * nodes not having a @type. If the frame has a type of {} defined matches
 * nodes having any type defined.
 *
 * Otherwise, does duck typing, where the node must have all of the
 * properties defined in the frame.
 *
 * @param state the current framing state.
 * @param subject the subject to check.
 * @param frame the frame to check.
 * @param flags the frame flags.
 *
 * @return true if the subject matches, false if not.
 */
function _filterSubject(state, subject, frame, flags) {
  // check ducktype
  let wildcard = true;
  let matchesSome = false;

  for(const key in frame) {
    let matchThis = false;
    const nodeValues = util.getValues(subject, key);
    const isEmpty = util.getValues(frame, key).length === 0;

    if(key === '@id') {
      // match on no @id or any matching @id, including wildcard
      if(types.isEmptyObject(frame['@id'][0] || {})) {
        matchThis = true;
      } else if(frame['@id'].length >= 0) {
        matchThis = frame['@id'].includes(nodeValues[0]);
      }
      if(!flags.requireAll) {
        return matchThis;
      }
    } else if(key === '@type') {
      // check @type (object value means 'any' type,
      // fall through to ducktyping)
      wildcard = false;
      if(isEmpty) {
        if(nodeValues.length > 0) {
          // don't match on no @type
          return false;
        }
        matchThis = true;
      } else if(frame['@type'].length === 1 &&
        types.isEmptyObject(frame['@type'][0])) {
        // match on wildcard @type if there is a type
        matchThis = nodeValues.length > 0;
      } else {
        // match on a specific @type
        for(const type of frame['@type']) {
          if(types.isObject(type) && '@default' in type) {
            // match on default object
            matchThis = true;
          } else {
            matchThis = matchThis || nodeValues.some(tt => tt === type);
          }
        }
      }
      if(!flags.requireAll) {
        return matchThis;
      }
    } else if(isKeyword(key)) {
      continue;
    } else {
      // Force a copy of this frame entry so it can be manipulated
      const thisFrame = util.getValues(frame, key)[0];
      let hasDefault = false;
      if(thisFrame) {
        _validateFrame([thisFrame]);
        hasDefault = '@default' in thisFrame;
      }

      // no longer a wildcard pattern if frame has any non-keyword properties
      wildcard = false;

      // skip, but allow match if node has no value for property, and frame has
      // a default value
      if(nodeValues.length === 0 && hasDefault) {
        continue;
      }

      // if frame value is empty, don't match if subject has any value
      if(nodeValues.length > 0 && isEmpty) {
        return false;
      }

      if(thisFrame === undefined) {
        // node does not match if values is not empty and the value of property
        // in frame is match none.
        if(nodeValues.length > 0) {
          return false;
        }
        matchThis = true;
      } else {
        if(graphTypes.isList(thisFrame)) {
          const listValue = thisFrame['@list'][0];
          if(graphTypes.isList(nodeValues[0])) {
            const nodeListValues = nodeValues[0]['@list'];

            if(graphTypes.isValue(listValue)) {
              // match on any matching value
              matchThis = nodeListValues.some(lv => _valueMatch(listValue, lv));
            } else if(graphTypes.isSubject(listValue) ||
              graphTypes.isSubjectReference(listValue)) {
              matchThis = nodeListValues.some(lv => _nodeMatch(
                state, listValue, lv, flags));
            }
          }
        } else if(graphTypes.isValue(thisFrame)) {
          matchThis = nodeValues.some(nv => _valueMatch(thisFrame, nv));
        } else if(graphTypes.isSubjectReference(thisFrame)) {
          matchThis =
            nodeValues.some(nv => _nodeMatch(state, thisFrame, nv, flags));
        } else if(types.isObject(thisFrame)) {
          matchThis = nodeValues.length > 0;
        } else {
          matchThis = false;
        }
      }
    }

    // all non-defaulted values must match if requireAll is set
    if(!matchThis && flags.requireAll) {
      return false;
    }

    matchesSome = matchesSome || matchThis;
  }

  // return true if wildcard or subject matches some properties
  return wildcard || matchesSome;
}

/**
 * Removes an existing embed.
 *
 * @param state the current framing state.
 * @param id the @id of the embed to remove.
 */
function _removeEmbed(state, id) {
  // get existing embed
  const embeds = state.uniqueEmbeds[state.graph];
  const embed = embeds[id];
  const parent = embed.parent;
  const property = embed.property;

  // create reference to replace embed
  const subject = {'@id': id};

  // remove existing embed
  if(types.isArray(parent)) {
    // replace subject with reference
    for(let i = 0; i < parent.length; ++i) {
      if(util.compareValues(parent[i], subject)) {
        parent[i] = subject;
        break;
      }
    }
  } else {
    // replace subject with reference
    const useArray = types.isArray(parent[property]);
    util.removeValue(parent, property, subject, {propertyIsArray: useArray});
    util.addValue(parent, property, subject, {propertyIsArray: useArray});
  }

  // recursively remove dependent dangling embeds
  const removeDependents = id => {
    // get embed keys as a separate array to enable deleting keys in map
    const ids = Object.keys(embeds);
    for(const next of ids) {
      if(next in embeds && types.isObject(embeds[next].parent) &&
        embeds[next].parent['@id'] === id) {
        delete embeds[next];
        removeDependents(next);
      }
    }
  };
  removeDependents(id);
}

/**
 * Removes the @preserve keywords from expanded result of framing.
 *
 * @param input the framed, framed output.
 * @param options the framing options used.
 *
 * @return the resulting output.
 */
function _cleanupPreserve(input, options) {
  // recurse through arrays
  if(types.isArray(input)) {
    return input.map(value => _cleanupPreserve(value, options));
  }

  if(types.isObject(input)) {
    // remove @preserve
    if('@preserve' in input) {
      return input['@preserve'][0];
    }

    // skip @values
    if(graphTypes.isValue(input)) {
      return input;
    }

    // recurse through @lists
    if(graphTypes.isList(input)) {
      input['@list'] = _cleanupPreserve(input['@list'], options);
      return input;
    }

    // handle in-memory linked nodes
    if('@id' in input) {
      const id = input['@id'];
      if(options.link.hasOwnProperty(id)) {
        const idx = options.link[id].indexOf(input);
        if(idx !== -1) {
          // already visited
          return options.link[id][idx];
        }
        // prevent circular visitation
        options.link[id].push(input);
      } else {
        // prevent circular visitation
        options.link[id] = [input];
      }
    }

    // recurse through properties
    for(const prop in input) {
      // potentially remove the id, if it is an unreference bnode
      if(prop === '@id' && options.bnodesToClear.includes(input[prop])) {
        delete input['@id'];
        continue;
      }

      input[prop] = _cleanupPreserve(input[prop], options);
    }
  }
  return input;
}

/**
 * Adds framing output to the given parent.
 *
 * @param parent the parent to add to.
 * @param property the parent property.
 * @param output the output to add.
 */
function _addFrameOutput(parent, property, output) {
  if(types.isObject(parent)) {
    util.addValue(parent, property, output, {propertyIsArray: true});
  } else {
    parent.push(output);
  }
}

/**
 * Node matches if it is a node, and matches the pattern as a frame.
 *
 * @param state the current framing state.
 * @param pattern used to match value
 * @param value to check
 * @param flags the frame flags.
 */
function _nodeMatch(state, pattern, value, flags) {
  if(!('@id' in value)) {
    return false;
  }
  const nodeObject = state.subjects[value['@id']];
  return nodeObject && _filterSubject(state, nodeObject, pattern, flags);
}

/**
 * Value matches if it is a value and matches the value pattern
 *
 * * `pattern` is empty
 * * @values are the same, or `pattern[@value]` is a wildcard, and
 * * @types are the same or `value[@type]` is not null
 *   and `pattern[@type]` is `{}`, or `value[@type]` is null
 *   and `pattern[@type]` is null or `[]`, and
 * * @languages are the same or `value[@language]` is not null
 *   and `pattern[@language]` is `{}`, or `value[@language]` is null
 *   and `pattern[@language]` is null or `[]`.
 *
 * @param pattern used to match value
 * @param value to check
 */
function _valueMatch(pattern, value) {
  const v1 = value['@value'];
  const t1 = value['@type'];
  const l1 = value['@language'];
  const v2 = pattern['@value'] ?
    (types.isArray(pattern['@value']) ?
      pattern['@value'] : [pattern['@value']]) :
    [];
  const t2 = pattern['@type'] ?
    (types.isArray(pattern['@type']) ?
      pattern['@type'] : [pattern['@type']]) :
    [];
  const l2 = pattern['@language'] ?
    (types.isArray(pattern['@language']) ?
      pattern['@language'] : [pattern['@language']]) :
    [];

  if(v2.length === 0 && t2.length === 0 && l2.length === 0) {
    return true;
  }
  if(!(v2.includes(v1) || types.isEmptyObject(v2[0]))) {
    return false;
  }
  if(!(!t1 && t2.length === 0 || t2.includes(t1) || t1 &&
    types.isEmptyObject(t2[0]))) {
    return false;
  }
  if(!(!l1 && l2.length === 0 || l2.includes(l1) || l1 &&
    types.isEmptyObject(l2[0]))) {
    return false;
  }
  return true;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/fromRdf.js":
/*!*********************************************!*\
  !*** ../node_modules/jsonld/lib/fromRdf.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const graphTypes = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");
const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");

// constants
const {
  // RDF,
  RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  // RDF_LANGSTRING,

  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING,
} = __webpack_require__(/*! ./constants */ "../node_modules/jsonld/lib/constants.js");

const REGEX_BCP47 = /^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$/;

const api = {};
module.exports = api;

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset the RDF dataset.
 * @param options the RDF serialization options.
 *
 * @return a Promise that resolves to the JSON-LD output.
 */
api.fromRDF = async (
  dataset,
  {
    useRdfType = false,
    useNativeTypes = false,
    rdfDirection = null
  }
) => {
  const defaultGraph = {};
  const graphMap = {'@default': defaultGraph};
  const referencedOnce = {};

  for(const quad of dataset) {
    // TODO: change 'name' to 'graph'
    const name = (quad.graph.termType === 'DefaultGraph') ?
      '@default' : quad.graph.value;
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }

    const nodeMap = graphMap[name];

    // get subject, predicate, object
    const s = quad.subject.value;
    const p = quad.predicate.value;
    const o = quad.object;

    if(!(s in nodeMap)) {
      nodeMap[s] = {'@id': s};
    }
    const node = nodeMap[s];

    const objectIsNode = o.termType.endsWith('Node');
    if(objectIsNode && !(o.value in nodeMap)) {
      nodeMap[o.value] = {'@id': o.value};
    }

    if(p === RDF_TYPE && !useRdfType && objectIsNode) {
      util.addValue(node, '@type', o.value, {propertyIsArray: true});
      continue;
    }

    const value = _RDFToObject(o, useNativeTypes, rdfDirection);
    util.addValue(node, p, value, {propertyIsArray: true});

    // object may be an RDF list/partial list node but we can't know easily
    // until all triples are read
    if(objectIsNode) {
      if(o.value === RDF_NIL) {
        // track rdf:nil uniquely per graph
        const object = nodeMap[o.value];
        if(!('usages' in object)) {
          object.usages = [];
        }
        object.usages.push({
          node,
          property: p,
          value
        });
      } else if(o.value in referencedOnce) {
        // object referenced more than once
        referencedOnce[o.value] = false;
      } else {
        // keep track of single reference
        referencedOnce[o.value] = {
          node,
          property: p,
          value
        };
      }
    }
  }

  /*
  for(let name in dataset) {
    const graph = dataset[name];
    if(!(name in graphMap)) {
      graphMap[name] = {};
    }
    if(name !== '@default' && !(name in defaultGraph)) {
      defaultGraph[name] = {'@id': name};
    }
    const nodeMap = graphMap[name];
    for(let ti = 0; ti < graph.length; ++ti) {
      const triple = graph[ti];

      // get subject, predicate, object
      const s = triple.subject.value;
      const p = triple.predicate.value;
      const o = triple.object;

      if(!(s in nodeMap)) {
        nodeMap[s] = {'@id': s};
      }
      const node = nodeMap[s];

      const objectIsId = (o.type === 'IRI' || o.type === 'blank node');
      if(objectIsId && !(o.value in nodeMap)) {
        nodeMap[o.value] = {'@id': o.value};
      }

      if(p === RDF_TYPE && !useRdfType && objectIsId) {
        util.addValue(node, '@type', o.value, {propertyIsArray: true});
        continue;
      }

      const value = _RDFToObject(o, useNativeTypes);
      util.addValue(node, p, value, {propertyIsArray: true});

      // object may be an RDF list/partial list node but we can't know easily
      // until all triples are read
      if(objectIsId) {
        if(o.value === RDF_NIL) {
          // track rdf:nil uniquely per graph
          const object = nodeMap[o.value];
          if(!('usages' in object)) {
            object.usages = [];
          }
          object.usages.push({
            node: node,
            property: p,
            value: value
          });
        } else if(o.value in referencedOnce) {
          // object referenced more than once
          referencedOnce[o.value] = false;
        } else {
          // keep track of single reference
          referencedOnce[o.value] = {
            node: node,
            property: p,
            value: value
          };
        }
      }
    }
  }*/

  // convert linked lists to @list arrays
  for(const name in graphMap) {
    const graphObject = graphMap[name];

    // no @lists to be converted, continue
    if(!(RDF_NIL in graphObject)) {
      continue;
    }

    // iterate backwards through each RDF list
    const nil = graphObject[RDF_NIL];
    if(!nil.usages) {
      continue;
    }
    for(let usage of nil.usages) {
      let node = usage.node;
      let property = usage.property;
      let head = usage.value;
      const list = [];
      const listNodes = [];

      // ensure node is a well-formed list node; it must:
      // 1. Be referenced only once.
      // 2. Have an array for rdf:first that has 1 item.
      // 3. Have an array for rdf:rest that has 1 item.
      // 4. Have no keys other than: @id, rdf:first, rdf:rest, and,
      //   optionally, @type where the value is rdf:List.
      let nodeKeyCount = Object.keys(node).length;
      while(property === RDF_REST &&
        types.isObject(referencedOnce[node['@id']]) &&
        types.isArray(node[RDF_FIRST]) && node[RDF_FIRST].length === 1 &&
        types.isArray(node[RDF_REST]) && node[RDF_REST].length === 1 &&
        (nodeKeyCount === 3 ||
          (nodeKeyCount === 4 && types.isArray(node['@type']) &&
          node['@type'].length === 1 && node['@type'][0] === RDF_LIST))) {
        list.push(node[RDF_FIRST][0]);
        listNodes.push(node['@id']);

        // get next node, moving backwards through list
        usage = referencedOnce[node['@id']];
        node = usage.node;
        property = usage.property;
        head = usage.value;
        nodeKeyCount = Object.keys(node).length;

        // if node is not a blank node, then list head found
        if(!graphTypes.isBlankNode(node)) {
          break;
        }
      }

      // transform list into @list object
      delete head['@id'];
      head['@list'] = list.reverse();
      for(const listNode of listNodes) {
        delete graphObject[listNode];
      }
    }

    delete nil.usages;
  }

  const result = [];
  const subjects = Object.keys(defaultGraph).sort();
  for(const subject of subjects) {
    const node = defaultGraph[subject];
    if(subject in graphMap) {
      const graph = node['@graph'] = [];
      const graphObject = graphMap[subject];
      const graphSubjects = Object.keys(graphObject).sort();
      for(const graphSubject of graphSubjects) {
        const node = graphObject[graphSubject];
        // only add full subjects to top-level
        if(!graphTypes.isSubjectReference(node)) {
          graph.push(node);
        }
      }
    }
    // only add full subjects to top-level
    if(!graphTypes.isSubjectReference(node)) {
      result.push(node);
    }
  }

  return result;
};

/**
 * Converts an RDF triple object to a JSON-LD object.
 *
 * @param o the RDF triple object to convert.
 * @param useNativeTypes true to output native types, false not to.
 *
 * @return the JSON-LD object.
 */
function _RDFToObject(o, useNativeTypes, rdfDirection) {
  // convert NamedNode/BlankNode object to JSON-LD
  if(o.termType.endsWith('Node')) {
    return {'@id': o.value};
  }

  // convert literal to JSON-LD
  const rval = {'@value': o.value};

  // add language
  if(o.language) {
    rval['@language'] = o.language;
  } else {
    let type = o.datatype.value;
    if(!type) {
      type = XSD_STRING;
    }
    if(type === RDF_JSON_LITERAL) {
      type = '@json';
      try {
        rval['@value'] = JSON.parse(rval['@value']);
      } catch(e) {
        throw new JsonLdError(
          'JSON literal could not be parsed.',
          'jsonld.InvalidJsonLiteral',
          {code: 'invalid JSON literal', value: rval['@value'], cause: e});
      }
    }
    // use native types for certain xsd types
    if(useNativeTypes) {
      if(type === XSD_BOOLEAN) {
        if(rval['@value'] === 'true') {
          rval['@value'] = true;
        } else if(rval['@value'] === 'false') {
          rval['@value'] = false;
        }
      } else if(types.isNumeric(rval['@value'])) {
        if(type === XSD_INTEGER) {
          const i = parseInt(rval['@value'], 10);
          if(i.toFixed(0) === rval['@value']) {
            rval['@value'] = i;
          }
        } else if(type === XSD_DOUBLE) {
          rval['@value'] = parseFloat(rval['@value']);
        }
      }
      // do not add native type
      if(![XSD_BOOLEAN, XSD_INTEGER, XSD_DOUBLE, XSD_STRING].includes(type)) {
        rval['@type'] = type;
      }
    } else if(rdfDirection === 'i18n-datatype' &&
      type.startsWith('https://www.w3.org/ns/i18n#')) {
      const [, language, direction] = type.split(/[#_]/);
      if(language.length > 0) {
        rval['@language'] = language;
        if(!language.match(REGEX_BCP47)) {
          console.warn(`@language must be valid BCP47: ${language}`);
        }
      }
      rval['@direction'] = direction;
    } else if(type !== XSD_STRING) {
      rval['@type'] = type;
    }
  }

  return rval;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/graphTypes.js":
/*!************************************************!*\
  !*** ../node_modules/jsonld/lib/graphTypes.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const api = {};
module.exports = api;

/**
 * Returns true if the given value is a subject with properties.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject with properties, false if not.
 */
api.isSubject = v => {
  // Note: A value is a subject if all of these hold true:
  // 1. It is an Object.
  // 2. It is not a @value, @set, or @list.
  // 3. It has more than 1 key OR any existing key is not @id.
  if(types.isObject(v) &&
    !(('@value' in v) || ('@set' in v) || ('@list' in v))) {
    const keyCount = Object.keys(v).length;
    return (keyCount > 1 || !('@id' in v));
  }
  return false;
};

/**
 * Returns true if the given value is a subject reference.
 *
 * @param v the value to check.
 *
 * @return true if the value is a subject reference, false if not.
 */
api.isSubjectReference = v =>
  // Note: A value is a subject reference if all of these hold true:
  // 1. It is an Object.
  // 2. It has a single key: @id.
  (types.isObject(v) && Object.keys(v).length === 1 && ('@id' in v));

/**
 * Returns true if the given value is a @value.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @value, false if not.
 */
api.isValue = v =>
  // Note: A value is a @value if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @value property.
  types.isObject(v) && ('@value' in v);

/**
 * Returns true if the given value is a @list.
 *
 * @param v the value to check.
 *
 * @return true if the value is a @list, false if not.
 */
api.isList = v =>
  // Note: A value is a @list if all of these hold true:
  // 1. It is an Object.
  // 2. It has the @list property.
  types.isObject(v) && ('@list' in v);

/**
 * Returns true if the given value is a @graph.
 *
 * @return true if the value is a @graph, false if not.
 */
api.isGraph = v => {
  // Note: A value is a graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It may have '@id' or '@index'
  return types.isObject(v) &&
    '@graph' in v &&
    Object.keys(v)
      .filter(key => key !== '@id' && key !== '@index').length === 1;
};

/**
 * Returns true if the given value is a simple @graph.
 *
 * @return true if the value is a simple @graph, false if not.
 */
api.isSimpleGraph = v => {
  // Note: A value is a simple graph if all of these hold true:
  // 1. It is an object.
  // 2. It has an `@graph` key.
  // 3. It has only 1 key or 2 keys where one of them is `@index`.
  return api.isGraph(v) && !('@id' in v);
};

/**
 * Returns true if the given value is a blank node.
 *
 * @param v the value to check.
 *
 * @return true if the value is a blank node, false if not.
 */
api.isBlankNode = v => {
  // Note: A value is a blank node if all of these hold true:
  // 1. It is an Object.
  // 2. If it has an @id key its value begins with '_:'.
  // 3. It has no keys OR is not a @value, @set, or @list.
  if(types.isObject(v)) {
    if('@id' in v) {
      return (v['@id'].indexOf('_:') === 0);
    }
    return (Object.keys(v).length === 0 ||
      !(('@value' in v) || ('@set' in v) || ('@list' in v)));
  }
  return false;
};


/***/ }),

/***/ "../node_modules/jsonld/lib/jsonld.js":
/*!********************************************!*\
  !*** ../node_modules/jsonld/lib/jsonld.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/**
 * A JavaScript implementation of the JSON-LD API.
 *
 * @author Dave Longley
 *
 * @license BSD 3-Clause License
 * Copyright (c) 2011-2019 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
const canonize = __webpack_require__(/*! rdf-canonize */ "../node_modules/rdf-canonize/lib/index.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");
const ContextResolver = __webpack_require__(/*! ./ContextResolver */ "../node_modules/jsonld/lib/ContextResolver.js");
const IdentifierIssuer = util.IdentifierIssuer;
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");
const LRU = __webpack_require__(/*! lru-cache */ "../node_modules/lru-cache/index.js");
const NQuads = __webpack_require__(/*! ./NQuads */ "../node_modules/jsonld/lib/NQuads.js");
const Rdfa = __webpack_require__(/*! ./Rdfa */ "../node_modules/jsonld/lib/Rdfa.js");

const {expand: _expand} = __webpack_require__(/*! ./expand */ "../node_modules/jsonld/lib/expand.js");
const {flatten: _flatten} = __webpack_require__(/*! ./flatten */ "../node_modules/jsonld/lib/flatten.js");
const {fromRDF: _fromRDF} = __webpack_require__(/*! ./fromRdf */ "../node_modules/jsonld/lib/fromRdf.js");
const {toRDF: _toRDF} = __webpack_require__(/*! ./toRdf */ "../node_modules/jsonld/lib/toRdf.js");

const {
  frameMergedOrDefault: _frameMergedOrDefault,
  cleanupNull: _cleanupNull
} = __webpack_require__(/*! ./frame */ "../node_modules/jsonld/lib/frame.js");

const {
  isArray: _isArray,
  isObject: _isObject,
  isString: _isString
} = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const {
  isSubjectReference: _isSubjectReference,
} = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");

const {
  expandIri: _expandIri,
  getInitialContext: _getInitialContext,
  process: _processContext,
  processingMode: _processingMode
} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");

const {
  compact: _compact,
  compactIri: _compactIri
} = __webpack_require__(/*! ./compact */ "../node_modules/jsonld/lib/compact.js");

const {
  createNodeMap: _createNodeMap,
  createMergedNodeMap: _createMergedNodeMap,
  mergeNodeMaps: _mergeNodeMaps
} = __webpack_require__(/*! ./nodeMap */ "../node_modules/jsonld/lib/nodeMap.js");

// determine if in-browser or using Node.js
const _nodejs = (
  typeof process !== 'undefined' && process.versions && process.versions.node);
const _browser = !_nodejs &&
  (typeof window !== 'undefined' || typeof self !== 'undefined');

/* eslint-disable indent */
// attaches jsonld API to the given object
const wrapper = function(jsonld) {

/** Registered RDF dataset parsers hashed by content-type. */
const _rdfParsers = {};

// resolved context cache
// TODO: consider basing max on context size rather than number
const RESOLVED_CONTEXT_CACHE_MAX_SIZE = 100;
const _resolvedContextCache = new LRU({max: RESOLVED_CONTEXT_CACHE_MAX_SIZE});

/* Core API */

/**
 * Performs JSON-LD compaction.
 *
 * @param input the JSON-LD input to compact.
 * @param ctx the context to compact with.
 * @param [options] options to use:
 *          [base] the base IRI to use.
 *          [compactArrays] true to compact arrays to single values when
 *            appropriate, false not to (default: true).
 *          [compactToRelative] true to compact IRIs to be relative to document
 *            base, false to keep absolute (default: true)
 *          [graph] true to always output a top-level graph (default: false).
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [framing] true if compaction is occuring during a framing operation.
 *          [compactionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the compacted output.
 */
jsonld.compact = async function(input, ctx, options) {
  if(arguments.length < 2) {
    throw new TypeError('Could not compact, too few arguments.');
  }

  if(ctx === null) {
    throw new JsonLdError(
      'The compaction context must not be null.',
      'jsonld.CompactError', {code: 'invalid local context'});
  }

  // nothing to compact
  if(input === null) {
    return null;
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    compactArrays: true,
    compactToRelative: true,
    graph: false,
    skipExpansion: false,
    link: false,
    issuer: new IdentifierIssuer('_:b'),
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if(options.link) {
    // force skip expansion when linking, "link" is not part of the public
    // API, it should only be called from framing
    options.skipExpansion = true;
  }
  if(!options.compactToRelative) {
    delete options.base;
  }

  // expand input
  let expanded;
  if(options.skipExpansion) {
    expanded = input;
  } else {
    expanded = await jsonld.expand(input, options);
  }

  // process context
  const activeCtx = await jsonld.processContext(
    _getInitialContext(options), ctx, options);

  // do compaction
  let compacted = await _compact({
    activeCtx,
    element: expanded,
    options,
    compactionMap: options.compactionMap
  });

  // perform clean up
  if(options.compactArrays && !options.graph && _isArray(compacted)) {
    if(compacted.length === 1) {
      // simplify to a single item
      compacted = compacted[0];
    } else if(compacted.length === 0) {
      // simplify to an empty object
      compacted = {};
    }
  } else if(options.graph && _isObject(compacted)) {
    // always use array if graph option is on
    compacted = [compacted];
  }

  // follow @context key
  if(_isObject(ctx) && '@context' in ctx) {
    ctx = ctx['@context'];
  }

  // build output context
  ctx = util.clone(ctx);
  if(!_isArray(ctx)) {
    ctx = [ctx];
  }
  // remove empty contexts
  const tmp = ctx;
  ctx = [];
  for(let i = 0; i < tmp.length; ++i) {
    if(!_isObject(tmp[i]) || Object.keys(tmp[i]).length > 0) {
      ctx.push(tmp[i]);
    }
  }

  // remove array if only one context
  const hasContext = (ctx.length > 0);
  if(ctx.length === 1) {
    ctx = ctx[0];
  }

  // add context and/or @graph
  if(_isArray(compacted)) {
    // use '@graph' keyword
    const graphAlias = _compactIri({
      activeCtx, iri: '@graph', relativeTo: {vocab: true}
    });
    const graph = compacted;
    compacted = {};
    if(hasContext) {
      compacted['@context'] = ctx;
    }
    compacted[graphAlias] = graph;
  } else if(_isObject(compacted) && hasContext) {
    // reorder keys so @context is first
    const graph = compacted;
    compacted = {'@context': ctx};
    for(const key in graph) {
      compacted[key] = graph[key];
    }
  }

  return compacted;
};

/**
 * Performs JSON-LD expansion.
 *
 * @param input the JSON-LD input to expand.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [keepFreeFloatingNodes] true to keep free-floating nodes,
 *            false not to, defaults to false.
 *          [documentLoader(url, options)] the document loader.
 *          [expansionMap(info)] a function that can be used to custom map
 *            unmappable values (or to throw an error when they are detected);
 *            if this function returns `undefined` then the default behavior
 *            will be used.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the expanded output.
 */
jsonld.expand = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not expand, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    keepFreeFloatingNodes: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if(options.expansionMap === false) {
    options.expansionMap = undefined;
  }

  // build set of objects that may have @contexts to resolve
  const toResolve = {};

  // build set of contexts to process prior to expansion
  const contextsToProcess = [];

  // if an `expandContext` has been given ensure it gets resolved
  if('expandContext' in options) {
    const expandContext = util.clone(options.expandContext);
    if(_isObject(expandContext) && '@context' in expandContext) {
      toResolve.expandContext = expandContext;
    } else {
      toResolve.expandContext = {'@context': expandContext};
    }
    contextsToProcess.push(toResolve.expandContext);
  }

  // if input is a string, attempt to dereference remote document
  let defaultBase;
  if(!_isString(input)) {
    // input is not a URL, do not need to retrieve it first
    toResolve.input = util.clone(input);
  } else {
    // load remote doc
    const remoteDoc = await jsonld.get(input, options);
    defaultBase = remoteDoc.documentUrl;
    toResolve.input = remoteDoc.document;
    if(remoteDoc.contextUrl) {
      // context included in HTTP link header and must be resolved
      toResolve.remoteContext = {'@context': remoteDoc.contextUrl};
      contextsToProcess.push(toResolve.remoteContext);
    }
  }

  // set default base
  if(!('base' in options)) {
    options.base = defaultBase || '';
  }

  // process any additional contexts
  let activeCtx = _getInitialContext(options);
  for(const localCtx of contextsToProcess) {
    activeCtx = await _processContext({activeCtx, localCtx, options});
  }

  // expand resolved input
  let expanded = await _expand({
    activeCtx,
    element: toResolve.input,
    options,
    expansionMap: options.expansionMap
  });

  // optimize away @graph with no other properties
  if(_isObject(expanded) && ('@graph' in expanded) &&
    Object.keys(expanded).length === 1) {
    expanded = expanded['@graph'];
  } else if(expanded === null) {
    expanded = [];
  }

  // normalize to an array
  if(!_isArray(expanded)) {
    expanded = [expanded];
  }

  return expanded;
};

/**
 * Performs JSON-LD flattening.
 *
 * @param input the JSON-LD to flatten.
 * @param ctx the context to use to compact the flattened output, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the flattened output.
 */
jsonld.flatten = async function(input, ctx, options) {
  if(arguments.length < 1) {
    return new TypeError('Could not flatten, too few arguments.');
  }

  if(typeof ctx === 'function') {
    ctx = null;
  } else {
    ctx = ctx || null;
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand input
  const expanded = await jsonld.expand(input, options);

  // do flattening
  const flattened = _flatten(expanded);

  if(ctx === null) {
    // no compaction required
    return flattened;
  }

  // compact result (force @graph option to true, skip expansion)
  options.graph = true;
  options.skipExpansion = true;
  const compacted = await jsonld.compact(flattened, ctx, options);

  return compacted;
};

/**
 * Performs JSON-LD framing.
 *
 * @param input the JSON-LD input to frame.
 * @param frame the JSON-LD frame to use.
 * @param [options] the framing options.
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [embed] default @embed flag: '@last', '@always', '@never', '@link'
 *            (default: '@last').
 *          [explicit] default @explicit flag (default: false).
 *          [requireAll] default @requireAll flag (default: true).
 *          [omitDefault] default @omitDefault flag (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the framed output.
 */
jsonld.frame = async function(input, frame, options) {
  if(arguments.length < 2) {
    throw new TypeError('Could not frame, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    embed: '@once',
    explicit: false,
    requireAll: false,
    omitDefault: false,
    bnodesToClear: [],
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // if frame is a string, attempt to dereference remote document
  if(_isString(frame)) {
    // load remote doc
    const remoteDoc = await jsonld.get(frame, options);
    frame = remoteDoc.document;

    if(remoteDoc.contextUrl) {
      // inject link header @context into frame
      let ctx = frame['@context'];
      if(!ctx) {
        ctx = remoteDoc.contextUrl;
      } else if(_isArray(ctx)) {
        ctx.push(remoteDoc.contextUrl);
      } else {
        ctx = [ctx, remoteDoc.contextUrl];
      }
      frame['@context'] = ctx;
    }
  }

  const frameContext = frame ? frame['@context'] || {} : {};

  // process context
  const activeCtx = await jsonld.processContext(
    _getInitialContext(options), frameContext, options);

  // mode specific defaults
  if(!options.hasOwnProperty('omitGraph')) {
    options.omitGraph = _processingMode(activeCtx, 1.1);
  }
  if(!options.hasOwnProperty('pruneBlankNodeIdentifiers')) {
    options.pruneBlankNodeIdentifiers = _processingMode(activeCtx, 1.1);
  }

  // expand input
  const expanded = await jsonld.expand(input, options);

  // expand frame
  const opts = {...options};
  opts.isFrame = true;
  opts.keepFreeFloatingNodes = true;
  const expandedFrame = await jsonld.expand(frame, opts);

  // if the unexpanded frame includes a key expanding to @graph, frame the
  // default graph, otherwise, the merged graph
  const frameKeys = Object.keys(frame)
    .map(key => _expandIri(activeCtx, key, {vocab: true}));
  opts.merged = !frameKeys.includes('@graph');
  opts.is11 = _processingMode(activeCtx, 1.1);

  // do framing
  const framed = _frameMergedOrDefault(expanded, expandedFrame, opts);

  opts.graph = !options.omitGraph;
  opts.skipExpansion = true;
  opts.link = {};
  opts.framing = true;
  let compacted = await jsonld.compact(framed, frameContext, opts);

  // replace @null with null, compacting arrays
  opts.link = {};
  compacted = _cleanupNull(compacted, opts);

  return compacted;
};

/**
 * **Experimental**
 *
 * Links a JSON-LD document's nodes in memory.
 *
 * @param input the JSON-LD document to link.
 * @param [ctx] the JSON-LD context to apply.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the linked output.
 */
jsonld.link = async function(input, ctx, options) {
  // API matches running frame with a wildcard frame and embed: '@link'
  // get arguments
  const frame = {};
  if(ctx) {
    frame['@context'] = ctx;
  }
  frame['@embed'] = '@link';
  return jsonld.frame(input, frame, options);
};

/**
 * Performs RDF dataset normalization on the given input. The input is JSON-LD
 * unless the 'inputFormat' option is used. The output is an RDF dataset
 * unless the 'format' option is used.
 *
 * @param input the input to normalize as JSON-LD or as a format specified by
 *          the 'inputFormat' option.
 * @param [options] the options to use:
 *          [algorithm] the normalization algorithm to use, `URDNA2015` or
 *            `URGNA2012` (default: `URDNA2015`).
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [inputFormat] the format if input is not JSON-LD:
 *            'application/n-quads' for N-Quads.
 *          [format] the format if output is a string:
 *            'application/n-quads' for N-Quads.
 *          [documentLoader(url, options)] the document loader.
 *          [useNative] true to use a native canonize algorithm
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the normalized output.
 */
jsonld.normalize = jsonld.canonize = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not canonize, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    algorithm: 'URDNA2015',
    skipExpansion: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });
  if('inputFormat' in options) {
    if(options.inputFormat !== 'application/n-quads' &&
      options.inputFormat !== 'application/nquads') {
      throw new JsonLdError(
        'Unknown canonicalization input format.',
        'jsonld.CanonizeError');
    }
    // TODO: `await` for async parsers
    const parsedInput = NQuads.parse(input);

    // do canonicalization
    return canonize.canonize(parsedInput, options);
  }

  // convert to RDF dataset then do normalization
  const opts = {...options};
  delete opts.format;
  opts.produceGeneralizedRdf = false;
  const dataset = await jsonld.toRDF(input, opts);

  // do canonicalization
  return canonize.canonize(dataset, options);
};

/**
 * Converts an RDF dataset to JSON-LD.
 *
 * @param dataset a serialized string of RDF in a format specified by the
 *          format option or an RDF dataset to convert.
 * @param [options] the options to use:
 *          [format] the format if dataset param must first be parsed:
 *            'application/n-quads' for N-Quads (default).
 *          [rdfParser] a custom RDF-parser to use to parse the dataset.
 *          [useRdfType] true to use rdf:type, false to use @type
 *            (default: false).
 *          [useNativeTypes] true to convert XSD types into native types
 *            (boolean, integer, double), false not to (default: false).
 *
 * @return a Promise that resolves to the JSON-LD document.
 */
jsonld.fromRDF = async function(dataset, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not convert from RDF, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    format: _isString(dataset) ? 'application/n-quads' : undefined
  });

  const {format} = options;
  let {rdfParser} = options;

  // handle special format
  if(format) {
    // check supported formats
    rdfParser = rdfParser || _rdfParsers[format];
    if(!rdfParser) {
      throw new JsonLdError(
        'Unknown input format.',
        'jsonld.UnknownFormat', {format});
    }
  } else {
    // no-op parser, assume dataset already parsed
    rdfParser = () => dataset;
  }

  // rdfParser must be synchronous or return a promise, no callback support
  const parsedDataset = await rdfParser(dataset);
  return _fromRDF(parsedDataset, options);
};

/**
 * Outputs the RDF dataset found in the given JSON-LD object.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [skipExpansion] true to assume the input is expanded and skip
 *            expansion, false not to, defaults to false.
 *          [format] the format to use to output a string:
 *            'application/n-quads' for N-Quads.
 *          [produceGeneralizedRdf] true to output generalized RDF, false
 *            to produce only standard RDF (default: false).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the RDF dataset.
 */
jsonld.toRDF = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not convert to RDF, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    skipExpansion: false,
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // TODO: support toRDF custom map?
  let expanded;
  if(options.skipExpansion) {
    expanded = input;
  } else {
    // expand input
    expanded = await jsonld.expand(input, options);
  }

  // output RDF dataset
  const dataset = _toRDF(expanded, options);
  if(options.format) {
    if(options.format === 'application/n-quads' ||
      options.format === 'application/nquads') {
      return await NQuads.serialize(dataset);
    }
    throw new JsonLdError(
      'Unknown output format.',
      'jsonld.UnknownFormat', {format: options.format});
  }

  return dataset;
};

/**
 * **Experimental**
 *
 * Recursively flattens the nodes in the given JSON-LD input into a merged
 * map of node ID => node. All graphs will be merged into the default graph.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged node map.
 */
jsonld.createNodeMap = async function(input, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not create node map, too few arguments.');
  }

  // set default options
  options = _setDefaults(options, {
    base: _isString(input) ? input : '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand input
  const expanded = await jsonld.expand(input, options);

  return _createMergedNodeMap(expanded, options);
};

/**
 * **Experimental**
 *
 * Merges two or more JSON-LD documents into a single flattened document.
 *
 * @param docs the JSON-LD documents to merge together.
 * @param ctx the context to use to compact the merged result, or null.
 * @param [options] the options to use:
 *          [base] the base IRI to use.
 *          [expandContext] a context to expand with.
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *          [mergeNodes] true to merge properties for nodes with the same ID,
 *            false to ignore new properties for nodes with the same ID once
 *            the ID has been defined; note that this may not prevent merging
 *            new properties where a node is in the `object` position
 *            (default: true).
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the merged output.
 */
jsonld.merge = async function(docs, ctx, options) {
  if(arguments.length < 1) {
    throw new TypeError('Could not merge, too few arguments.');
  }
  if(!_isArray(docs)) {
    throw new TypeError('Could not merge, "docs" must be an array.');
  }

  if(typeof ctx === 'function') {
    ctx = null;
  } else {
    ctx = ctx || null;
  }

  // set default options
  options = _setDefaults(options, {
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // expand all documents
  const expanded = await Promise.all(docs.map(doc => {
    const opts = {...options};
    return jsonld.expand(doc, opts);
  }));

  let mergeNodes = true;
  if('mergeNodes' in options) {
    mergeNodes = options.mergeNodes;
  }

  const issuer = options.issuer || new IdentifierIssuer('_:b');
  const graphs = {'@default': {}};

  for(let i = 0; i < expanded.length; ++i) {
    // uniquely relabel blank nodes
    const doc = util.relabelBlankNodes(expanded[i], {
      issuer: new IdentifierIssuer('_:b' + i + '-')
    });

    // add nodes to the shared node map graphs if merging nodes, to a
    // separate graph set if not
    const _graphs = (mergeNodes || i === 0) ? graphs : {'@default': {}};
    _createNodeMap(doc, _graphs, '@default', issuer);

    if(_graphs !== graphs) {
      // merge document graphs but don't merge existing nodes
      for(const graphName in _graphs) {
        const _nodeMap = _graphs[graphName];
        if(!(graphName in graphs)) {
          graphs[graphName] = _nodeMap;
          continue;
        }
        const nodeMap = graphs[graphName];
        for(const key in _nodeMap) {
          if(!(key in nodeMap)) {
            nodeMap[key] = _nodeMap[key];
          }
        }
      }
    }
  }

  // add all non-default graphs to default graph
  const defaultGraph = _mergeNodeMaps(graphs);

  // produce flattened output
  const flattened = [];
  const keys = Object.keys(defaultGraph).sort();
  for(let ki = 0; ki < keys.length; ++ki) {
    const node = defaultGraph[keys[ki]];
    // only add full subjects to top-level
    if(!_isSubjectReference(node)) {
      flattened.push(node);
    }
  }

  if(ctx === null) {
    return flattened;
  }

  // compact result (force @graph option to true, skip expansion)
  options.graph = true;
  options.skipExpansion = true;
  const compacted = await jsonld.compact(flattened, ctx, options);

  return compacted;
};

/**
 * The default document loader for external documents.
 *
 * @param url the URL to load.
 *
 * @return a promise that resolves to the remote document.
 */
Object.defineProperty(jsonld, 'documentLoader', {
  get: () => jsonld._documentLoader,
  set: v => jsonld._documentLoader = v
});
// default document loader not implemented
jsonld.documentLoader = async url => {
  throw new JsonLdError(
    'Could not retrieve a JSON-LD document from the URL. URL ' +
    'dereferencing not implemented.', 'jsonld.LoadDocumentError',
    {code: 'loading document failed', url});
};

/**
 * Gets a remote JSON-LD document using the default document loader or
 * one given in the passed options.
 *
 * @param url the URL to fetch.
 * @param [options] the options to use:
 *          [documentLoader] the document loader to use.
 *
 * @return a Promise that resolves to the retrieved remote document.
 */
jsonld.get = async function(url, options) {
  let load;
  if(typeof options.documentLoader === 'function') {
    load = options.documentLoader;
  } else {
    load = jsonld.documentLoader;
  }

  const remoteDoc = await load(url);

  try {
    if(!remoteDoc.document) {
      throw new JsonLdError(
        'No remote document found at the given URL.',
        'jsonld.NullRemoteDocument');
    }
    if(_isString(remoteDoc.document)) {
      remoteDoc.document = JSON.parse(remoteDoc.document);
    }
  } catch(e) {
    throw new JsonLdError(
      'Could not retrieve a JSON-LD document from the URL.',
      'jsonld.LoadDocumentError', {
        code: 'loading document failed',
        cause: e,
        remoteDoc
      });
  }

  return remoteDoc;
};

/**
 * Processes a local context, resolving any URLs as necessary, and returns a
 * new active context.
 *
 * @param activeCtx the current active context.
 * @param localCtx the local context to process.
 * @param [options] the options to use:
 *          [documentLoader(url, options)] the document loader.
 *          [contextResolver] internal use only.
 *
 * @return a Promise that resolves to the new active context.
 */
jsonld.processContext = async function(
  activeCtx, localCtx, options) {
  // set default options
  options = _setDefaults(options, {
    base: '',
    contextResolver: new ContextResolver(
      {sharedCache: _resolvedContextCache})
  });

  // return initial context early for null context
  if(localCtx === null) {
    return _getInitialContext(options);
  }

  // get URLs in localCtx
  localCtx = util.clone(localCtx);
  if(!(_isObject(localCtx) && '@context' in localCtx)) {
    localCtx = {'@context': localCtx};
  }

  return _processContext({activeCtx, localCtx, options});
};

// backwards compatibility
jsonld.getContextValue = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js").getContextValue;

/**
 * Document loaders.
 */
jsonld.documentLoaders = {};
jsonld.documentLoaders.node = __webpack_require__(/*! ./documentLoaders/node */ "../node_modules/jsonld/lib/documentLoaders/node.js");
jsonld.documentLoaders.xhr = __webpack_require__(/*! ./documentLoaders/xhr */ "../node_modules/jsonld/lib/documentLoaders/xhr.js");

/**
 * Assigns the default document loader for external document URLs to a built-in
 * default. Supported types currently include: 'xhr' and 'node'.
 *
 * @param type the type to set.
 * @param [params] the parameters required to use the document loader.
 */
jsonld.useDocumentLoader = function(type) {
  if(!(type in jsonld.documentLoaders)) {
    throw new JsonLdError(
      'Unknown document loader type: "' + type + '"',
      'jsonld.UnknownDocumentLoader',
      {type});
  }

  // set document loader
  jsonld.documentLoader = jsonld.documentLoaders[type].apply(
    jsonld, Array.prototype.slice.call(arguments, 1));
};

/**
 * Registers an RDF dataset parser by content-type, for use with
 * jsonld.fromRDF. An RDF dataset parser will always be given one parameter,
 * a string of input. An RDF dataset parser can be synchronous or
 * asynchronous (by returning a promise).
 *
 * @param contentType the content-type for the parser.
 * @param parser(input) the parser function (takes a string as a parameter
 *          and either returns an RDF dataset or a Promise that resolves to one.
 */
jsonld.registerRDFParser = function(contentType, parser) {
  _rdfParsers[contentType] = parser;
};

/**
 * Unregisters an RDF dataset parser by content-type.
 *
 * @param contentType the content-type for the parser.
 */
jsonld.unregisterRDFParser = function(contentType) {
  delete _rdfParsers[contentType];
};

// register the N-Quads RDF parser
jsonld.registerRDFParser('application/n-quads', NQuads.parse);
jsonld.registerRDFParser('application/nquads', NQuads.parse);

// register the RDFa API RDF parser
jsonld.registerRDFParser('rdfa-api', Rdfa.parse);

/* URL API */
jsonld.url = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");

/* Utility API */
jsonld.util = util;
// backwards compatibility
Object.assign(jsonld, util);

// reexpose API as jsonld.promises for backwards compatability
jsonld.promises = jsonld;

// backwards compatibility
jsonld.RequestQueue = __webpack_require__(/*! ./RequestQueue */ "../node_modules/jsonld/lib/RequestQueue.js");

/* WebIDL API */
jsonld.JsonLdProcessor = __webpack_require__(/*! ./JsonLdProcessor */ "../node_modules/jsonld/lib/JsonLdProcessor.js")(jsonld);

// setup browser global JsonLdProcessor
if(_browser && typeof global.JsonLdProcessor === 'undefined') {
  Object.defineProperty(global, 'JsonLdProcessor', {
    writable: true,
    enumerable: false,
    configurable: true,
    value: jsonld.JsonLdProcessor
  });
}

// set platform-specific defaults/APIs
if(_nodejs) {
  // use node document loader by default
  jsonld.useDocumentLoader('node');
} else if(typeof XMLHttpRequest !== 'undefined') {
  // use xhr document loader by default
  jsonld.useDocumentLoader('xhr');
}

function _setDefaults(options, {
  documentLoader = jsonld.documentLoader,
  ...defaults
}) {
  return Object.assign({}, {documentLoader}, defaults, options);
}

// end of jsonld API `wrapper` factory
return jsonld;
};

// external APIs:

// used to generate a new jsonld API instance
const factory = function() {
  return wrapper(function() {
    return factory();
  });
};

// wrap the main jsonld API instance
wrapper(factory);
// export API
module.exports = factory;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../../webui/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/jsonld/lib/nodeMap.js":
/*!*********************************************!*\
  !*** ../node_modules/jsonld/lib/nodeMap.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {isKeyword} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");
const graphTypes = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");
const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");

const api = {};
module.exports = api;

/**
 * Creates a merged JSON-LD node map (node ID => node).
 *
 * @param input the expanded JSON-LD to create a node map of.
 * @param [options] the options to use:
 *          [issuer] a jsonld.IdentifierIssuer to use to label blank nodes.
 *
 * @return the node map.
 */
api.createMergedNodeMap = (input, options) => {
  options = options || {};

  // produce a map of all subjects and name each bnode
  const issuer = options.issuer || new util.IdentifierIssuer('_:b');
  const graphs = {'@default': {}};
  api.createNodeMap(input, graphs, '@default', issuer);

  // add all non-default graphs to default graph
  return api.mergeNodeMaps(graphs);
};

/**
 * Recursively flattens the subjects in the given JSON-LD expanded input
 * into a node map.
 *
 * @param input the JSON-LD expanded input.
 * @param graphs a map of graph name to subject map.
 * @param graph the name of the current graph.
 * @param issuer the blank node identifier issuer.
 * @param name the name assigned to the current input if it is a bnode.
 * @param list the list to append to, null for none.
 */
api.createNodeMap = (input, graphs, graph, issuer, name, list) => {
  // recurse through array
  if(types.isArray(input)) {
    for(const node of input) {
      api.createNodeMap(node, graphs, graph, issuer, undefined, list);
    }
    return;
  }

  // add non-object to list
  if(!types.isObject(input)) {
    if(list) {
      list.push(input);
    }
    return;
  }

  // add values to list
  if(graphTypes.isValue(input)) {
    if('@type' in input) {
      let type = input['@type'];
      // rename @type blank node
      if(type.indexOf('_:') === 0) {
        input['@type'] = type = issuer.getId(type);
      }
    }
    if(list) {
      list.push(input);
    }
    return;
  } else if(list && graphTypes.isList(input)) {
    const _list = [];
    api.createNodeMap(input['@list'], graphs, graph, issuer, name, _list);
    list.push({'@list': _list});
    return;
  }

  // Note: At this point, input must be a subject.

  // spec requires @type to be named first, so assign names early
  if('@type' in input) {
    const types = input['@type'];
    for(const type of types) {
      if(type.indexOf('_:') === 0) {
        issuer.getId(type);
      }
    }
  }

  // get name for subject
  if(types.isUndefined(name)) {
    name = graphTypes.isBlankNode(input) ?
      issuer.getId(input['@id']) : input['@id'];
  }

  // add subject reference to list
  if(list) {
    list.push({'@id': name});
  }

  // create new subject or merge into existing one
  const subjects = graphs[graph];
  const subject = subjects[name] = subjects[name] || {};
  subject['@id'] = name;
  const properties = Object.keys(input).sort();
  for(let property of properties) {
    // skip @id
    if(property === '@id') {
      continue;
    }

    // handle reverse properties
    if(property === '@reverse') {
      const referencedNode = {'@id': name};
      const reverseMap = input['@reverse'];
      for(const reverseProperty in reverseMap) {
        const items = reverseMap[reverseProperty];
        for(const item of items) {
          let itemName = item['@id'];
          if(graphTypes.isBlankNode(item)) {
            itemName = issuer.getId(itemName);
          }
          api.createNodeMap(item, graphs, graph, issuer, itemName);
          util.addValue(
            subjects[itemName], reverseProperty, referencedNode,
            {propertyIsArray: true, allowDuplicate: false});
        }
      }
      continue;
    }

    // recurse into graph
    if(property === '@graph') {
      // add graph subjects map entry
      if(!(name in graphs)) {
        graphs[name] = {};
      }
      api.createNodeMap(input[property], graphs, name, issuer);
      continue;
    }

    // recurse into included
    if(property === '@included') {
      api.createNodeMap(input[property], graphs, graph, issuer);
      continue;
    }

    // copy non-@type keywords
    if(property !== '@type' && isKeyword(property)) {
      if(property === '@index' && property in subject &&
        (input[property] !== subject[property] ||
        input[property]['@id'] !== subject[property]['@id'])) {
        throw new JsonLdError(
          'Invalid JSON-LD syntax; conflicting @index property detected.',
          'jsonld.SyntaxError',
          {code: 'conflicting indexes', subject});
      }
      subject[property] = input[property];
      continue;
    }

    // iterate over objects
    const objects = input[property];

    // if property is a bnode, assign it a new id
    if(property.indexOf('_:') === 0) {
      property = issuer.getId(property);
    }

    // ensure property is added for empty arrays
    if(objects.length === 0) {
      util.addValue(subject, property, [], {propertyIsArray: true});
      continue;
    }
    for(let o of objects) {
      if(property === '@type') {
        // rename @type blank nodes
        o = (o.indexOf('_:') === 0) ? issuer.getId(o) : o;
      }

      // handle embedded subject or subject reference
      if(graphTypes.isSubject(o) || graphTypes.isSubjectReference(o)) {
        // skip null @id
        if('@id' in o && !o['@id']) {
          continue;
        }

        // relabel blank node @id
        const id = graphTypes.isBlankNode(o) ?
          issuer.getId(o['@id']) : o['@id'];

        // add reference and recurse
        util.addValue(
          subject, property, {'@id': id},
          {propertyIsArray: true, allowDuplicate: false});
        api.createNodeMap(o, graphs, graph, issuer, id);
      } else if(graphTypes.isValue(o)) {
        util.addValue(
          subject, property, o,
          {propertyIsArray: true, allowDuplicate: false});
      } else if(graphTypes.isList(o)) {
        // handle @list
        const _list = [];
        api.createNodeMap(o['@list'], graphs, graph, issuer, name, _list);
        o = {'@list': _list};
        util.addValue(
          subject, property, o,
          {propertyIsArray: true, allowDuplicate: false});
      } else {
        // handle @value
        api.createNodeMap(o, graphs, graph, issuer, name);
        util.addValue(
          subject, property, o, {propertyIsArray: true, allowDuplicate: false});
      }
    }
  }
};

/**
 * Merge separate named graphs into a single merged graph including
 * all nodes from the default graph and named graphs.
 *
 * @param graphs a map of graph name to subject map.
 *
 * @return the merged graph map.
 */
api.mergeNodeMapGraphs = graphs => {
  const merged = {};
  for(const name of Object.keys(graphs).sort()) {
    for(const id of Object.keys(graphs[name]).sort()) {
      const node = graphs[name][id];
      if(!(id in merged)) {
        merged[id] = {'@id': id};
      }
      const mergedNode = merged[id];

      for(const property of Object.keys(node).sort()) {
        if(isKeyword(property) && property !== '@type') {
          // copy keywords
          mergedNode[property] = util.clone(node[property]);
        } else {
          // merge objects
          for(const value of node[property]) {
            util.addValue(
              mergedNode, property, util.clone(value),
              {propertyIsArray: true, allowDuplicate: false});
          }
        }
      }
    }
  }

  return merged;
};

api.mergeNodeMaps = graphs => {
  // add all non-default graphs to default graph
  const defaultGraph = graphs['@default'];
  const graphNames = Object.keys(graphs).sort();
  for(const graphName of graphNames) {
    if(graphName === '@default') {
      continue;
    }
    const nodeMap = graphs[graphName];
    let subject = defaultGraph[graphName];
    if(!subject) {
      defaultGraph[graphName] = subject = {
        '@id': graphName,
        '@graph': []
      };
    } else if(!('@graph' in subject)) {
      subject['@graph'] = [];
    }
    const graph = subject['@graph'];
    for(const id of Object.keys(nodeMap).sort()) {
      const node = nodeMap[id];
      // only add full subjects
      if(!graphTypes.isSubjectReference(node)) {
        graph.push(node);
      }
    }
  }
  return defaultGraph;
};


/***/ }),

/***/ "../node_modules/jsonld/lib/toRdf.js":
/*!*******************************************!*\
  !*** ../node_modules/jsonld/lib/toRdf.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const {createNodeMap} = __webpack_require__(/*! ./nodeMap */ "../node_modules/jsonld/lib/nodeMap.js");
const {isKeyword} = __webpack_require__(/*! ./context */ "../node_modules/jsonld/lib/context.js");
const graphTypes = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");
const jsonCanonicalize = __webpack_require__(/*! canonicalize */ "../node_modules/canonicalize/lib/canonicalize.js");
const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/jsonld/lib/util.js");

const {
  // RDF,
  // RDF_LIST,
  RDF_FIRST,
  RDF_REST,
  RDF_NIL,
  RDF_TYPE,
  // RDF_PLAIN_LITERAL,
  // RDF_XML_LITERAL,
  RDF_JSON_LITERAL,
  // RDF_OBJECT,
  RDF_LANGSTRING,

  // XSD,
  XSD_BOOLEAN,
  XSD_DOUBLE,
  XSD_INTEGER,
  XSD_STRING,
} = __webpack_require__(/*! ./constants */ "../node_modules/jsonld/lib/constants.js");

const {
  isAbsolute: _isAbsoluteIri
} = __webpack_require__(/*! ./url */ "../node_modules/jsonld/lib/url.js");

const api = {};
module.exports = api;

/**
 * Outputs an RDF dataset for the expanded JSON-LD input.
 *
 * @param input the expanded JSON-LD input.
 * @param options the RDF serialization options.
 *
 * @return the RDF dataset.
 */
api.toRDF = (input, options) => {
  // create node map for default graph (and any named graphs)
  const issuer = new util.IdentifierIssuer('_:b');
  const nodeMap = {'@default': {}};
  createNodeMap(input, nodeMap, '@default', issuer);

  const dataset = [];
  const graphNames = Object.keys(nodeMap).sort();
  for(const graphName of graphNames) {
    let graphTerm;
    if(graphName === '@default') {
      graphTerm = {termType: 'DefaultGraph', value: ''};
    } else if(_isAbsoluteIri(graphName)) {
      if(graphName.startsWith('_:')) {
        graphTerm = {termType: 'BlankNode'};
      } else {
        graphTerm = {termType: 'NamedNode'};
      }
      graphTerm.value = graphName;
    } else {
      // skip relative IRIs (not valid RDF)
      continue;
    }
    _graphToRDF(dataset, nodeMap[graphName], graphTerm, issuer, options);
  }

  return dataset;
};

/**
 * Adds RDF quads for a particular graph to the given dataset.
 *
 * @param dataset the dataset to append RDF quads to.
 * @param graph the graph to create RDF quads for.
 * @param graphTerm the graph term for each quad.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param options the RDF serialization options.
 *
 * @return the array of RDF triples for the given graph.
 */
function _graphToRDF(dataset, graph, graphTerm, issuer, options) {
  const ids = Object.keys(graph).sort();
  for(const id of ids) {
    const node = graph[id];
    const properties = Object.keys(node).sort();
    for(let property of properties) {
      const items = node[property];
      if(property === '@type') {
        property = RDF_TYPE;
      } else if(isKeyword(property)) {
        continue;
      }

      for(const item of items) {
        // RDF subject
        const subject = {
          termType: id.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: id
        };

        // skip relative IRI subjects (not valid RDF)
        if(!_isAbsoluteIri(id)) {
          continue;
        }

        // RDF predicate
        const predicate = {
          termType: property.startsWith('_:') ? 'BlankNode' : 'NamedNode',
          value: property
        };

        // skip relative IRI predicates (not valid RDF)
        if(!_isAbsoluteIri(property)) {
          continue;
        }

        // skip blank node predicates unless producing generalized RDF
        if(predicate.termType === 'BlankNode' &&
          !options.produceGeneralizedRdf) {
          continue;
        }

        // convert list, value or node object to triple
        const object =
          _objectToRDF(item, issuer, dataset, graphTerm, options.rdfDirection);
        // skip null objects (they are relative IRIs)
        if(object) {
          dataset.push({
            subject,
            predicate,
            object,
            graph: graphTerm
          });
        }
      }
    }
  }
}

/**
 * Converts a @list value into linked list of blank node RDF quads
 * (an RDF collection).
 *
 * @param list the @list value.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the array of quads to append to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the head of the list.
 */
function _listToRDF(list, issuer, dataset, graphTerm, rdfDirection) {
  const first = {termType: 'NamedNode', value: RDF_FIRST};
  const rest = {termType: 'NamedNode', value: RDF_REST};
  const nil = {termType: 'NamedNode', value: RDF_NIL};

  const last = list.pop();
  // Result is the head of the list
  const result = last ? {termType: 'BlankNode', value: issuer.getId()} : nil;
  let subject = result;

  for(const item of list) {
    const object = _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection);
    const next = {termType: 'BlankNode', value: issuer.getId()};
    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: next,
      graph: graphTerm
    });
    subject = next;
  }

  // Tail of list
  if(last) {
    const object = _objectToRDF(last, issuer, dataset, graphTerm, rdfDirection);
    dataset.push({
      subject,
      predicate: first,
      object,
      graph: graphTerm
    });
    dataset.push({
      subject,
      predicate: rest,
      object: nil,
      graph: graphTerm
    });
  }

  return result;
}

/**
 * Converts a JSON-LD value object to an RDF literal or a JSON-LD string,
 * node object to an RDF resource, or adds a list.
 *
 * @param item the JSON-LD value or node object.
 * @param issuer a IdentifierIssuer for assigning blank node names.
 * @param dataset the dataset to append RDF quads to.
 * @param graphTerm the graph term for each quad.
 *
 * @return the RDF literal or RDF resource.
 */
function _objectToRDF(item, issuer, dataset, graphTerm, rdfDirection) {
  const object = {};

  // convert value object to RDF
  if(graphTypes.isValue(item)) {
    object.termType = 'Literal';
    object.value = undefined;
    object.datatype = {
      termType: 'NamedNode'
    };
    let value = item['@value'];
    const datatype = item['@type'] || null;

    // convert to XSD/JSON datatypes as appropriate
    if(datatype === '@json') {
      object.value = jsonCanonicalize(value);
      object.datatype.value = RDF_JSON_LITERAL;
    } else if(types.isBoolean(value)) {
      object.value = value.toString();
      object.datatype.value = datatype || XSD_BOOLEAN;
    } else if(types.isDouble(value) || datatype === XSD_DOUBLE) {
      if(!types.isDouble(value)) {
        value = parseFloat(value);
      }
      // canonical double representation
      object.value = value.toExponential(15).replace(/(\d)0*e\+?/, '$1E');
      object.datatype.value = datatype || XSD_DOUBLE;
    } else if(types.isNumber(value)) {
      object.value = value.toFixed(0);
      object.datatype.value = datatype || XSD_INTEGER;
    } else if(rdfDirection === 'i18n-datatype' &&
      '@direction' in item) {
      const datatype = 'https://www.w3.org/ns/i18n#' +
        (item['@language'] || '') +
        `_${item['@direction']}`;
      object.datatype.value = datatype;
      object.value = value;
    } else if('@language' in item) {
      object.value = value;
      object.datatype.value = datatype || RDF_LANGSTRING;
      object.language = item['@language'];
    } else {
      object.value = value;
      object.datatype.value = datatype || XSD_STRING;
    }
  } else if(graphTypes.isList(item)) {
    const _list =
      _listToRDF(item['@list'], issuer, dataset, graphTerm, rdfDirection);
    object.termType = _list.termType;
    object.value = _list.value;
  } else {
    // convert string/node object to RDF
    const id = types.isObject(item) ? item['@id'] : item;
    object.termType = id.startsWith('_:') ? 'BlankNode' : 'NamedNode';
    object.value = id;
  }

  // skip relative IRIs, not valid RDF
  if(object.termType === 'NamedNode' && !_isAbsoluteIri(object.value)) {
    return null;
  }

  return object;
}


/***/ }),

/***/ "../node_modules/jsonld/lib/types.js":
/*!*******************************************!*\
  !*** ../node_modules/jsonld/lib/types.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const api = {};
module.exports = api;

/**
 * Returns true if the given value is an Array.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Array, false if not.
 */
api.isArray = Array.isArray;

/**
 * Returns true if the given value is a Boolean.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Boolean, false if not.
 */
api.isBoolean = v => (typeof v === 'boolean' ||
  Object.prototype.toString.call(v) === '[object Boolean]');

/**
 * Returns true if the given value is a double.
 *
 * @param v the value to check.
 *
 * @return true if the value is a double, false if not.
 */
api.isDouble = v => api.isNumber(v) &&
  (String(v).indexOf('.') !== -1 || Math.abs(v) >= 1e21);

/**
 * Returns true if the given value is an empty Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an empty Object, false if not.
 */
api.isEmptyObject = v => api.isObject(v) && Object.keys(v).length === 0;

/**
 * Returns true if the given value is a Number.
 *
 * @param v the value to check.
 *
 * @return true if the value is a Number, false if not.
 */
api.isNumber = v => (typeof v === 'number' ||
  Object.prototype.toString.call(v) === '[object Number]');

/**
 * Returns true if the given value is numeric.
 *
 * @param v the value to check.
 *
 * @return true if the value is numeric, false if not.
 */
api.isNumeric = v => !isNaN(parseFloat(v)) && isFinite(v);

/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */
api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';

/**
 * Returns true if the given value is a String.
 *
 * @param v the value to check.
 *
 * @return true if the value is a String, false if not.
 */
api.isString = v => (typeof v === 'string' ||
  Object.prototype.toString.call(v) === '[object String]');

/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */
api.isUndefined = v => typeof v === 'undefined';


/***/ }),

/***/ "../node_modules/jsonld/lib/url.js":
/*!*****************************************!*\
  !*** ../node_modules/jsonld/lib/url.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.
 */


const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");

const api = {};
module.exports = api;

// define URL parser
// parseUri 1.2.2
// (c) Steven Levithan <stevenlevithan.com>
// MIT License
// with local jsonld.js modifications
api.parsers = {
  simple: {
    // RFC 3986 basic parts
    keys: [
      'href', 'scheme', 'authority', 'path', 'query', 'fragment'
    ],
    /* eslint-disable-next-line max-len */
    regex: /^(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/
  },
  full: {
    keys: [
      'href', 'protocol', 'scheme', 'authority', 'auth', 'user', 'password',
      'hostname', 'port', 'path', 'directory', 'file', 'query', 'fragment'
    ],
    /* eslint-disable-next-line max-len */
    regex: /^(([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?(?:(((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/
  }
};
api.parse = (str, parser) => {
  const parsed = {};
  const o = api.parsers[parser || 'full'];
  const m = o.regex.exec(str);
  let i = o.keys.length;
  while(i--) {
    parsed[o.keys[i]] = (m[i] === undefined) ? null : m[i];
  }

  // remove default ports in found in URLs
  if((parsed.scheme === 'https' && parsed.port === '443') ||
    (parsed.scheme === 'http' && parsed.port === '80')) {
    parsed.href = parsed.href.replace(':' + parsed.port, '');
    parsed.authority = parsed.authority.replace(':' + parsed.port, '');
    parsed.port = null;
  }

  parsed.normalizedPath = api.removeDotSegments(parsed.path);
  return parsed;
};

/**
 * Prepends a base IRI to the given relative IRI.
 *
 * @param base the base IRI.
 * @param iri the relative IRI.
 *
 * @return the absolute IRI.
 */
api.prependBase = (base, iri) => {
  // skip IRI processing
  if(base === null) {
    return iri;
  }
  // already an absolute IRI
  if(api.isAbsolute(iri)) {
    return iri;
  }

  // parse base if it is a string
  if(!base || types.isString(base)) {
    base = api.parse(base || '');
  }

  // parse given IRI
  const rel = api.parse(iri);

  // per RFC3986 5.2.2
  const transform = {
    protocol: base.protocol || ''
  };

  if(rel.authority !== null) {
    transform.authority = rel.authority;
    transform.path = rel.path;
    transform.query = rel.query;
  } else {
    transform.authority = base.authority;

    if(rel.path === '') {
      transform.path = base.path;
      if(rel.query !== null) {
        transform.query = rel.query;
      } else {
        transform.query = base.query;
      }
    } else {
      if(rel.path.indexOf('/') === 0) {
        // IRI represents an absolute path
        transform.path = rel.path;
      } else {
        // merge paths
        let path = base.path;

        // append relative path to the end of the last directory from base
        path = path.substr(0, path.lastIndexOf('/') + 1);
        if((path.length > 0 || base.authority) && path.substr(-1) !== '/') {
          path += '/';
        }
        path += rel.path;

        transform.path = path;
      }
      transform.query = rel.query;
    }
  }

  if(rel.path !== '') {
    // remove slashes and dots in path
    transform.path = api.removeDotSegments(transform.path);
  }

  // construct URL
  let rval = transform.protocol;
  if(transform.authority !== null) {
    rval += '//' + transform.authority;
  }
  rval += transform.path;
  if(transform.query !== null) {
    rval += '?' + transform.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
};

/**
 * Removes a base IRI from the given absolute IRI.
 *
 * @param base the base IRI.
 * @param iri the absolute IRI.
 *
 * @return the relative IRI if relative to base, otherwise the absolute IRI.
 */
api.removeBase = (base, iri) => {
  // skip IRI processing
  if(base === null) {
    return iri;
  }

  if(!base || types.isString(base)) {
    base = api.parse(base || '');
  }

  // establish base root
  let root = '';
  if(base.href !== '') {
    root += (base.protocol || '') + '//' + (base.authority || '');
  } else if(iri.indexOf('//')) {
    // support network-path reference with empty base
    root += '//';
  }

  // IRI not relative to base
  if(iri.indexOf(root) !== 0) {
    return iri;
  }

  // remove root from IRI and parse remainder
  const rel = api.parse(iri.substr(root.length));

  // remove path segments that match (do not remove last segment unless there
  // is a hash or query)
  const baseSegments = base.normalizedPath.split('/');
  const iriSegments = rel.normalizedPath.split('/');
  const last = (rel.fragment || rel.query) ? 0 : 1;
  while(baseSegments.length > 0 && iriSegments.length > last) {
    if(baseSegments[0] !== iriSegments[0]) {
      break;
    }
    baseSegments.shift();
    iriSegments.shift();
  }

  // use '../' for each non-matching base segment
  let rval = '';
  if(baseSegments.length > 0) {
    // don't count the last segment (if it ends with '/' last path doesn't
    // count and if it doesn't end with '/' it isn't a path)
    baseSegments.pop();
    for(let i = 0; i < baseSegments.length; ++i) {
      rval += '../';
    }
  }

  // prepend remaining segments
  rval += iriSegments.join('/');

  // add query and hash
  if(rel.query !== null) {
    rval += '?' + rel.query;
  }
  if(rel.fragment !== null) {
    rval += '#' + rel.fragment;
  }

  // handle empty base
  if(rval === '') {
    rval = './';
  }

  return rval;
};

/**
 * Removes dot segments from a URL path.
 *
 * @param path the path to remove dot segments from.
 */
api.removeDotSegments = path => {
  // RFC 3986 5.2.4 (reworked)

  // empty path shortcut
  if(path.length === 0) {
    return '';
  }

  const input = path.split('/');
  const output = [];

  while(input.length > 0) {
    const next = input.shift();
    const done = input.length === 0;

    if(next === '.') {
      if(done) {
        // ensure output has trailing /
        output.push('');
      }
      continue;
    }

    if(next === '..') {
      output.pop();
      if(done) {
        // ensure output has trailing /
        output.push('');
      }
      continue;
    }

    output.push(next);
  }

  // if path was absolute, ensure output has leading /
  if(path[0] === '/' && output.length > 0 && output[0] !== '') {
    output.unshift('');
  }
  if(output.length === 1 && output[0] === '') {
    return '/';
  }

  return output.join('/');
};

// TODO: time better isAbsolute/isRelative checks using full regexes:
// http://jmrware.com/articles/2009/uri_regexp/URI_regex.html

// regex to check for absolute IRI (starting scheme and ':') or blank node IRI
const isAbsoluteRegex = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^\s]*$/;

/**
 * Returns true if the given value is an absolute IRI or blank node IRI, false
 * if not.
 * Note: This weak check only checks for a correct starting scheme.
 *
 * @param v the value to check.
 *
 * @return true if the value is an absolute IRI, false if not.
 */
api.isAbsolute = v => types.isString(v) && isAbsoluteRegex.test(v);

/**
 * Returns true if the given value is a relative IRI, false if not.
 * Note: this is a weak check.
 *
 * @param v the value to check.
 *
 * @return true if the value is a relative IRI, false if not.
 */
api.isRelative = v => types.isString(v);


/***/ }),

/***/ "../node_modules/jsonld/lib/util.js":
/*!******************************************!*\
  !*** ../node_modules/jsonld/lib/util.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2017-2019 Digital Bazaar, Inc. All rights reserved.
 */


const graphTypes = __webpack_require__(/*! ./graphTypes */ "../node_modules/jsonld/lib/graphTypes.js");
const types = __webpack_require__(/*! ./types */ "../node_modules/jsonld/lib/types.js");
// TODO: move `IdentifierIssuer` to its own package
const IdentifierIssuer = __webpack_require__(/*! rdf-canonize */ "../node_modules/rdf-canonize/lib/index.js").IdentifierIssuer;
const JsonLdError = __webpack_require__(/*! ./JsonLdError */ "../node_modules/jsonld/lib/JsonLdError.js");

// constants
const REGEX_LINK_HEADERS = /(?:<[^>]*?>|"[^"]*?"|[^,])+/g;
const REGEX_LINK_HEADER = /\s*<([^>]*?)>\s*(?:;\s*(.*))?/;
const REGEX_LINK_HEADER_PARAMS =
  /(.*?)=(?:(?:"([^"]*?)")|([^"]*?))\s*(?:(?:;\s*)|$)/g;

const DEFAULTS = {
  headers: {
    accept: 'application/ld+json, application/json'
  }
};

const api = {};
module.exports = api;
api.IdentifierIssuer = IdentifierIssuer;

/**
 * Clones an object, array, Map, Set, or string/number. If a typed JavaScript
 * object is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */
api.clone = function(value) {
  if(value && typeof value === 'object') {
    let rval;
    if(types.isArray(value)) {
      rval = [];
      for(let i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if(value instanceof Map) {
      rval = new Map();
      for(const [k, v] of value) {
        rval.set(k, api.clone(v));
      }
    } else if(value instanceof Set) {
      rval = new Set();
      for(const v of value) {
        rval.add(api.clone(v));
      }
    } else if(types.isObject(value)) {
      rval = {};
      for(const key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }
    return rval;
  }
  return value;
};

/**
 * Ensure a value is an array. If the value is an array, it is returned.
 * Otherwise, it is wrapped in an array.
 *
 * @param value the value to return as an array.
 *
 * @return the value as an array.
 */
api.asArray = function(value) {
  return Array.isArray(value) ? value : [value];
};

/**
 * Builds an HTTP headers object for making a JSON-LD request from custom
 * headers and asserts the `accept` header isn't overridden.
 *
 * @param headers an object of headers with keys as header names and values
 *          as header values.
 *
 * @return an object of headers with a valid `accept` header.
 */
api.buildHeaders = (headers = {}) => {
  const hasAccept = Object.keys(headers).some(
    h => h.toLowerCase() === 'accept');

  if(hasAccept) {
    throw new RangeError(
      'Accept header may not be specified; only "' +
      DEFAULTS.headers.accept + '" is supported.');
  }

  return Object.assign({Accept: DEFAULTS.headers.accept}, headers);
};

/**
 * Parses a link header. The results will be key'd by the value of "rel".
 *
 * Link: <http://json-ld.org/contexts/person.jsonld>;
 * rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"
 *
 * Parses as: {
 *   'http://www.w3.org/ns/json-ld#context': {
 *     target: http://json-ld.org/contexts/person.jsonld,
 *     type: 'application/ld+json'
 *   }
 * }
 *
 * If there is more than one "rel" with the same IRI, then entries in the
 * resulting map for that "rel" will be arrays.
 *
 * @param header the link header to parse.
 */
api.parseLinkHeader = header => {
  const rval = {};
  // split on unbracketed/unquoted commas
  const entries = header.match(REGEX_LINK_HEADERS);
  for(let i = 0; i < entries.length; ++i) {
    let match = entries[i].match(REGEX_LINK_HEADER);
    if(!match) {
      continue;
    }
    const result = {target: match[1]};
    const params = match[2];
    while((match = REGEX_LINK_HEADER_PARAMS.exec(params))) {
      result[match[1]] = (match[2] === undefined) ? match[3] : match[2];
    }
    const rel = result['rel'] || '';
    if(Array.isArray(rval[rel])) {
      rval[rel].push(result);
    } else if(rval.hasOwnProperty(rel)) {
      rval[rel] = [rval[rel], result];
    } else {
      rval[rel] = result;
    }
  }
  return rval;
};

/**
 * Throws an exception if the given value is not a valid @type value.
 *
 * @param v the value to check.
 */
api.validateTypeValue = (v, isFrame) => {
  if(types.isString(v)) {
    return;
  }

  if(types.isArray(v) && v.every(vv => types.isString(vv))) {
    return;
  }
  if(isFrame && types.isObject(v)) {
    switch(Object.keys(v).length) {
      case 0:
        // empty object is wildcard
        return;
      case 1:
        // default entry is all strings
        if('@default' in v &&
          api.asArray(v['@default']).every(vv => types.isString(vv))) {
          return;
        }
    }
  }

  throw new JsonLdError(
    'Invalid JSON-LD syntax; "@type" value must a string, an array of ' +
    'strings, an empty object, ' +
    'or a default object.', 'jsonld.SyntaxError',
    {code: 'invalid type value', value: v});
};

/**
 * Returns true if the given subject has the given property.
 *
 * @param subject the subject to check.
 * @param property the property to look for.
 *
 * @return true if the subject has the given property, false if not.
 */
api.hasProperty = (subject, property) => {
  if(subject.hasOwnProperty(property)) {
    const value = subject[property];
    return (!types.isArray(value) || value.length > 0);
  }
  return false;
};

/**
 * Determines if the given value is a property of the given subject.
 *
 * @param subject the subject to check.
 * @param property the property to check.
 * @param value the value to check.
 *
 * @return true if the value exists, false if not.
 */
api.hasValue = (subject, property, value) => {
  if(api.hasProperty(subject, property)) {
    let val = subject[property];
    const isList = graphTypes.isList(val);
    if(types.isArray(val) || isList) {
      if(isList) {
        val = val['@list'];
      }
      for(let i = 0; i < val.length; ++i) {
        if(api.compareValues(value, val[i])) {
          return true;
        }
      }
    } else if(!types.isArray(value)) {
      // avoid matching the set of values with an array value parameter
      return api.compareValues(value, val);
    }
  }
  return false;
};

/**
 * Adds a value to a subject. If the value is an array, all values in the
 * array will be added.
 *
 * @param subject the subject to add the value to.
 * @param property the property that relates the value to the subject.
 * @param value the value to add.
 * @param [options] the options to use:
 *        [propertyIsArray] true if the property is always an array, false
 *          if not (default: false).
 *        [valueIsArray] true if the value to be added should be preserved as
 *          an array (lists) (default: false).
 *        [allowDuplicate] true to allow duplicates, false not to (uses a
 *          simple shallow comparison of subject ID or value) (default: true).
 *        [prependValue] false to prepend value to any existing values.
 *          (default: false)
 */
api.addValue = (subject, property, value, options) => {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }
  if(!('valueIsArray' in options)) {
    options.valueIsArray = false;
  }
  if(!('allowDuplicate' in options)) {
    options.allowDuplicate = true;
  }
  if(!('prependValue' in options)) {
    options.prependValue = false;
  }

  if(options.valueIsArray) {
    subject[property] = value;
  } else if(types.isArray(value)) {
    if(value.length === 0 && options.propertyIsArray &&
      !subject.hasOwnProperty(property)) {
      subject[property] = [];
    }
    if(options.prependValue) {
      value = value.concat(subject[property]);
      subject[property] = [];
    }
    for(let i = 0; i < value.length; ++i) {
      api.addValue(subject, property, value[i], options);
    }
  } else if(subject.hasOwnProperty(property)) {
    // check if subject already has value if duplicates not allowed
    const hasValue = (!options.allowDuplicate &&
      api.hasValue(subject, property, value));

    // make property an array if value not present or always an array
    if(!types.isArray(subject[property]) &&
      (!hasValue || options.propertyIsArray)) {
      subject[property] = [subject[property]];
    }

    // add new value
    if(!hasValue) {
      if(options.prependValue) {
        subject[property].unshift(value);
      } else {
        subject[property].push(value);
      }
    }
  } else {
    // add new value as set or single value
    subject[property] = options.propertyIsArray ? [value] : value;
  }
};

/**
 * Gets all of the values for a subject's property as an array.
 *
 * @param subject the subject.
 * @param property the property.
 *
 * @return all of the values for a subject's property as an array.
 */
api.getValues = (subject, property) => [].concat(subject[property] || []);

/**
 * Removes a property from a subject.
 *
 * @param subject the subject.
 * @param property the property.
 */
api.removeProperty = (subject, property) => {
  delete subject[property];
};

/**
 * Removes a value from a subject.
 *
 * @param subject the subject.
 * @param property the property that relates the value to the subject.
 * @param value the value to remove.
 * @param [options] the options to use:
 *          [propertyIsArray] true if the property is always an array, false
 *            if not (default: false).
 */
api.removeValue = (subject, property, value, options) => {
  options = options || {};
  if(!('propertyIsArray' in options)) {
    options.propertyIsArray = false;
  }

  // filter out value
  const values = api.getValues(subject, property).filter(
    e => !api.compareValues(e, value));

  if(values.length === 0) {
    api.removeProperty(subject, property);
  } else if(values.length === 1 && !options.propertyIsArray) {
    subject[property] = values[0];
  } else {
    subject[property] = values;
  }
};

/**
 * Relabels all blank nodes in the given JSON-LD input.
 *
 * @param input the JSON-LD input.
 * @param [options] the options to use:
 *          [issuer] an IdentifierIssuer to use to label blank nodes.
 */
api.relabelBlankNodes = (input, options) => {
  options = options || {};
  const issuer = options.issuer || new IdentifierIssuer('_:b');
  return _labelBlankNodes(issuer, input);
};

/**
 * Compares two JSON-LD values for equality. Two JSON-LD values will be
 * considered equal if:
 *
 * 1. They are both primitives of the same type and value.
 * 2. They are both @values with the same @value, @type, @language,
 *   and @index, OR
 * 3. They both have @ids they are the same.
 *
 * @param v1 the first value.
 * @param v2 the second value.
 *
 * @return true if v1 and v2 are considered equal, false if not.
 */
api.compareValues = (v1, v2) => {
  // 1. equal primitives
  if(v1 === v2) {
    return true;
  }

  // 2. equal @values
  if(graphTypes.isValue(v1) && graphTypes.isValue(v2) &&
    v1['@value'] === v2['@value'] &&
    v1['@type'] === v2['@type'] &&
    v1['@language'] === v2['@language'] &&
    v1['@index'] === v2['@index']) {
    return true;
  }

  // 3. equal @ids
  if(types.isObject(v1) &&
    ('@id' in v1) &&
    types.isObject(v2) &&
    ('@id' in v2)) {
    return v1['@id'] === v2['@id'];
  }

  return false;
};

/**
 * Compares two strings first based on length and then lexicographically.
 *
 * @param a the first string.
 * @param b the second string.
 *
 * @return -1 if a < b, 1 if a > b, 0 if a === b.
 */
api.compareShortestLeast = (a, b) => {
  if(a.length < b.length) {
    return -1;
  }
  if(b.length < a.length) {
    return 1;
  }
  if(a === b) {
    return 0;
  }
  return (a < b) ? -1 : 1;
};

/**
 * Labels the blank nodes in the given value using the given IdentifierIssuer.
 *
 * @param issuer the IdentifierIssuer to use.
 * @param element the element with blank nodes to rename.
 *
 * @return the element.
 */
function _labelBlankNodes(issuer, element) {
  if(types.isArray(element)) {
    for(let i = 0; i < element.length; ++i) {
      element[i] = _labelBlankNodes(issuer, element[i]);
    }
  } else if(graphTypes.isList(element)) {
    element['@list'] = _labelBlankNodes(issuer, element['@list']);
  } else if(types.isObject(element)) {
    // relabel blank node
    if(graphTypes.isBlankNode(element)) {
      element['@id'] = issuer.getId(element['@id']);
    }

    // recursively apply to all keys
    const keys = Object.keys(element).sort();
    for(let ki = 0; ki < keys.length; ++ki) {
      const key = keys[ki];
      if(key !== '@id') {
        element[key] = _labelBlankNodes(issuer, element[key]);
      }
    }
  }

  return element;
}


/***/ }),

/***/ "../node_modules/lru-cache/index.js":
/*!******************************************!*\
  !*** ../node_modules/lru-cache/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// A linked list to keep track of recently-used-ness
const Yallist = __webpack_require__(/*! yallist */ "../node_modules/yallist/yallist.js")

const MAX = Symbol('max')
const LENGTH = Symbol('length')
const LENGTH_CALCULATOR = Symbol('lengthCalculator')
const ALLOW_STALE = Symbol('allowStale')
const MAX_AGE = Symbol('maxAge')
const DISPOSE = Symbol('dispose')
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')
const LRU_LIST = Symbol('lruList')
const CACHE = Symbol('cache')
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')

const naiveLength = () => 1

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options }

    if (!options)
      options = {}

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    const max = this[MAX] = options.max || Infinity

    const lc = options.length || naiveLength
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc
    this[ALLOW_STALE] = options.stale || false
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0
    this[DISPOSE] = options.dispose
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
    this.reset()
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity
    trim(this)
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA
    trim(this)
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC
      this[LENGTH] = 0
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
        this[LENGTH] += hit.length
      })
    }
    trim(this)
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev
      forEachStep(this, fn, walker, thisp)
      walker = prev
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next
      forEachStep(this, fn, walker, thisp)
      walker = next
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))
    }

    this[CACHE] = new Map() // hash of items by key
    this[LRU_LIST] = new Yallist() // list of items in order of use recency
    this[LENGTH] = 0 // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE]

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0
    const len = this[LENGTH_CALCULATOR](value, key)

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key))
        return false
      }

      const node = this[CACHE].get(key)
      const item = node.value

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value)
      }

      item.now = now
      item.maxAge = maxAge
      item.value = value
      this[LENGTH] += len - item.length
      item.length = len
      this.get(key)
      trim(this)
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge)

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value)

      return false
    }

    this[LENGTH] += hit.length
    this[LRU_LIST].unshift(hit)
    this[CACHE].set(key, this[LRU_LIST].head)
    trim(this)
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail
    if (!node)
      return null

    del(this, node)
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key))
  }

  load (arr) {
    // reset the cache
    this.reset()

    const now = Date.now()
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l]
      const expiresAt = hit.e || 0
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v)
      else {
        const maxAge = expiresAt - now
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge)
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false))
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key)
  if (node) {
    const hit = node.value
    if (isStale(self, hit)) {
      del(self, node)
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now()
        self[LRU_LIST].unshiftNode(node)
      }
    }
    return hit.value
  }
}

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
}

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev
      del(self, walker)
      walker = prev
    }
  }
}

const del = (self, node) => {
  if (node) {
    const hit = node.value
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value)

    self[LENGTH] -= hit.length
    self[CACHE].delete(hit.key)
    self[LRU_LIST].removeNode(node)
  }
}

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key
    this.value = value
    this.length = length
    this.now = now
    this.maxAge = maxAge || 0
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value
  if (isStale(self, hit)) {
    del(self, node)
    if (!self[ALLOW_STALE])
      hit = undefined
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self)
}

module.exports = LRUCache


/***/ }),

/***/ "../node_modules/n3/src/IRIs.js":
/*!**************************************!*\
  !*** ../node_modules/n3/src/IRIs.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    XSD  = 'http://www.w3.org/2001/XMLSchema#',
    SWAP = 'http://www.w3.org/2000/10/swap/';

/* harmony default export */ __webpack_exports__["default"] = ({
  xsd: {
    decimal: XSD + 'decimal',
    boolean: XSD + 'boolean',
    double:  XSD + 'double',
    integer: XSD + 'integer',
    string:  XSD + 'string',
  },
  rdf: {
    type:       RDF + 'type',
    nil:        RDF + 'nil',
    first:      RDF + 'first',
    rest:       RDF + 'rest',
    langString: RDF + 'langString',
  },
  owl: {
    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',
  },
  r: {
    forSome: SWAP + 'reify#forSome',
    forAll:  SWAP + 'reify#forAll',
  },
  log: {
    implies: SWAP + 'log#implies',
  },
});


/***/ }),

/***/ "../node_modules/n3/src/N3DataFactory.js":
/*!***********************************************!*\
  !*** ../node_modules/n3/src/N3DataFactory.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ "../node_modules/n3/src/IRIs.js");
// N3.js implementations of the RDF/JS core data types
// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md


const { rdf, xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__["default"];

var DataFactory, DEFAULTGRAPH;

var _blankNodeCounter = 0;

// ## Term constructor
class Term {
  constructor(id) {
    this.id = id;
  }

  // ### The value of this term
  get value() {
    return this.id;
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through ids
    if (other instanceof Term)
      return this.id === other.id;
    // Otherwise, compare term type and value
    return !!other && this.termType === other.termType &&
                      this.value    === other.value;
  }

  // ### Returns a plain object representation of this term
  toJSON() {
    return {
      termType: this.termType,
      value:    this.value,
    };
  }
}


// ## NamedNode constructor
class NamedNode extends Term {
  // ### The term type of this term
  get termType() {
    return 'NamedNode';
  }
}

// ## Literal constructor
class Literal extends Term {
  // ### The term type of this term
  get termType() {
    return 'Literal';
  }

  // ### The text value of this literal
  get value() {
    return this.id.substring(1, this.id.lastIndexOf('"'));
  }

  // ### The language of this literal
  get language() {
    // Find the last quotation mark (e.g., '"abc"@en-us')
    var id = this.id, atPos = id.lastIndexOf('"') + 1;
    // If "@" it follows, return the remaining substring; empty otherwise
    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';
  }

  // ### The datatype IRI of this literal
  get datatype() {
    return new NamedNode(this.datatypeString);
  }

  // ### The datatype string of this literal
  get datatypeString() {
    // Find the last quotation mark (e.g., '"abc"^^http://ex.org/types#t')
    var id = this.id, dtPos = id.lastIndexOf('"') + 1, ch;
    // If "^" it follows, return the remaining substring
    return dtPos < id.length && (ch = id[dtPos]) === '^' ? id.substr(dtPos + 2) :
           // If "@" follows, return rdf:langString; xsd:string otherwise
           (ch !== '@' ? xsd.string : rdf.langString);
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both literals were created by this library,
    // equality can be computed through ids
    if (other instanceof Literal)
      return this.id === other.id;
    // Otherwise, compare term type, value, language, and datatype
    return !!other && !!other.datatype &&
                      this.termType === other.termType &&
                      this.value    === other.value    &&
                      this.language === other.language &&
                      this.datatype.value === other.datatype.value;
  }

  toJSON() {
    return {
      termType: this.termType,
      value:    this.value,
      language: this.language,
      datatype: { termType: 'NamedNode', value: this.datatypeString },
    };
  }
}

// ## BlankNode constructor
class BlankNode extends Term {
  constructor(name) {
    super('_:' + name);
  }

  // ### The term type of this term
  get termType() {
    return 'BlankNode';
  }

  // ### The name of this blank node
  get value() {
    return this.id.substr(2);
  }
}

class Variable extends Term {
  constructor(name) {
    super('?' + name);
  }

  // ### The term type of this term
  get termType() {
    return 'Variable';
  }

  // ### The name of this variable
  get value() {
    return this.id.substr(1);
  }
}

// ## DefaultGraph constructor
class DefaultGraph extends Term {
  constructor() {
    super('');
    return DEFAULTGRAPH || this;
  }

  // ### The term type of this term
  get termType() {
    return 'DefaultGraph';
  }

  // ### Returns whether this object represents the same term as the other
  equals(other) {
    // If both terms were created by this library,
    // equality can be computed through strict equality;
    // otherwise, compare term types.
    return (this === other) || (!!other && (this.termType === other.termType));
  }
}

// ## DefaultGraph singleton
DEFAULTGRAPH = new DefaultGraph();


// ### Constructs a term from the given internal string ID
function fromId(id, factory) {
  factory = factory || DataFactory;

  // Falsy value or empty string indicate the default graph
  if (!id)
    return factory.defaultGraph();

  // Identify the term type based on the first character
  switch (id[0]) {
  case '_': return factory.blankNode(id.substr(2));
  case '?': return factory.variable(id.substr(1));
  case '"':
    // Shortcut for internal literals
    if (factory === DataFactory)
      return new Literal(id);
    // Literal without datatype or language
    if (id[id.length - 1] === '"')
      return factory.literal(id.substr(1, id.length - 2));
    // Literal with datatype or language
    var endPos = id.lastIndexOf('"', id.length - 1);
    return factory.literal(id.substr(1, endPos - 1),
            id[endPos + 1] === '@' ? id.substr(endPos + 2)
                                   : factory.namedNode(id.substr(endPos + 3)));
  default:  return factory.namedNode(id);
  }
}

// ### Constructs an internal string ID from the given term or ID string
function toId(term) {
  if (typeof term === 'string')
    return term;
  if (term instanceof Term)
    return term.id;
  if (!term)
    return DEFAULTGRAPH.id;

  // Term instantiated with another library
  switch (term.termType) {
  case 'NamedNode':    return term.value;
  case 'BlankNode':    return '_:' + term.value;
  case 'Variable':     return '?' + term.value;
  case 'DefaultGraph': return '';
  case 'Literal':      return '"' + term.value + '"' +
    (term.language ? '@' + term.language :
      (term.datatype && term.datatype.value !== xsd.string ? '^^' + term.datatype.value : ''));
  default: throw new Error('Unexpected termType: ' + term.termType);
  }
}


// ## Quad constructor
class Quad {
  constructor(subject, predicate, object, graph) {
    this.subject   = subject;
    this.predicate = predicate;
    this.object    = object;
    this.graph     = graph || DEFAULTGRAPH;
  }

  // ### Returns a plain object representation of this quad
  toJSON() {
    return {
      subject:   this.subject.toJSON(),
      predicate: this.predicate.toJSON(),
      object:    this.object.toJSON(),
      graph:     this.graph.toJSON(),
    };
  }

  // ### Returns whether this object represents the same quad as the other
  equals(other) {
    return !!other && this.subject.equals(other.subject)     &&
                      this.predicate.equals(other.predicate) &&
                      this.object.equals(other.object)       &&
                      this.graph.equals(other.graph);
  }
}


// ## DataFactory singleton
DataFactory = {
  // ### Public factory functions
  namedNode,
  blankNode,
  variable,
  literal,
  defaultGraph,
  quad,
  triple: quad,

  // ### Internal datatype constructors
  internal: {
    Term,
    NamedNode,
    BlankNode,
    Variable,
    Literal,
    DefaultGraph,
    Quad,
    Triple: Quad,
    fromId,
    toId,
  },
};
/* harmony default export */ __webpack_exports__["default"] = (DataFactory);

// ### Creates an IRI
function namedNode(iri) {
  return new NamedNode(iri);
}

// ### Creates a blank node
function blankNode(name) {
  return new BlankNode(name || `n3-${_blankNodeCounter++}`);
}

// ### Creates a literal
function literal(value, languageOrDataType) {
  // Create a language-tagged string
  if (typeof languageOrDataType === 'string')
    return new Literal('"' + value + '"@' + languageOrDataType.toLowerCase());

  // Automatically determine datatype for booleans and numbers
  let datatype = languageOrDataType ? languageOrDataType.value : '';
  if (datatype === '') {
    // Convert a boolean
    if (typeof value === 'boolean')
      datatype = xsd.boolean;
    // Convert an integer or double
    else if (typeof value === 'number') {
      if (Number.isFinite(value))
        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;
      else {
        datatype = xsd.double;
        if (!Number.isNaN(value))
          value = value > 0 ? 'INF' : '-INF';
      }
    }
  }

  // Create a datatyped literal
  return (datatype === '' || datatype === xsd.string) ?
    new Literal('"' + value + '"') :
    new Literal('"' + value + '"^^' + datatype);
}

// ### Creates a variable
function variable(name) {
  return new Variable(name);
}

// ### Returns the default graph
function defaultGraph() {
  return DEFAULTGRAPH;
}

// ### Creates a quad
function quad(subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph);
}


/***/ }),

/***/ "../node_modules/n3/src/N3Lexer.js":
/*!*****************************************!*\
  !*** ../node_modules/n3/src/N3Lexer.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3Lexer; });
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ "../node_modules/n3/src/IRIs.js");
/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! queue-microtask */ "../node_modules/queue-microtask/index.js");
/* harmony import */ var queue_microtask__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(queue_microtask__WEBPACK_IMPORTED_MODULE_1__);
// **N3Lexer** tokenizes N3 documents.



const { xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__["default"];
const { fromCharCode } = String;

// Regular expression and replacement string to escape N3 strings.
// Note how we catch invalid unicode sequences separately (they will trigger an error).
var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\[uU]|\\(.)/g;
var escapeReplacements = {
  '\\': '\\', "'": "'", '"': '"',
  'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
};
var illegalIriChars = /[\x00-\x20<>\\"\{\}\|\^\`]/;

var lineModeRegExps = {
  _iri: true,
  _unescapedIri: true,
  _simpleQuotedString: true,
  _langcode: true,
  _blank: true,
  _newline: true,
  _comment: true,
  _whitespace: true,
  _endOfFile: true,
};
var invalidRegExp = /$0^/;

// ## Constructor
class N3Lexer {
  constructor(options) {
    // ## Regular expressions
    // It's slightly faster to have these as properties than as in-scope variables
    this._iri = /^<((?:[^ <>{}\\]|\\[uU])+)>[ \t]*/; // IRI with escape sequences; needs sanity check after unescaping
    this._unescapedIri = /^<([^\x00-\x20<>\\"\{\}\|\^\`]*)>[ \t]*/; // IRI without escape sequences; no unescaping
    this._simpleQuotedString = /^"([^"\\\r\n]*)"(?=[^"])/; // string without escape sequences
    this._simpleApostropheString = /^'([^'\\\r\n]*)'(?=[^'])/;
    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\-])/i;
    this._prefix = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:(?=[#\s<])/;
    this._prefixed = /^((?:[A-Za-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)?:((?:(?:[0-:A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])(?:(?:[\.\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~])*(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff]|%[0-9a-fA-F]{2}|\\[!#-\/;=?\-@_~]))?)?)(?:[ \t]+|(?=\.?[,;!\^\s#()\[\]\{\}"'<]))/;
    this._variable = /^\?(?:(?:[A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:[\-0-:A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?=[.,;!\^\s#()\[\]\{\}"'<])/;
    this._blank = /^_:((?:[0-9A-Z_a-z\xc0-\xd6\xd8-\xf6\xf8-\u02ff\u0370-\u037d\u037f-\u1fff\u200c\u200d\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])(?:\.?[\-0-9A-Z_a-z\xb7\xc0-\xd6\xd8-\xf6\xf8-\u037d\u037f-\u1fff\u200c\u200d\u203f\u2040\u2070-\u218f\u2c00-\u2fef\u3001-\ud7ff\uf900-\ufdcf\ufdf0-\ufffd]|[\ud800-\udb7f][\udc00-\udfff])*)(?:[ \t]+|(?=\.?[,;:\s#()\[\]\{\}"'<]))/;
    this._number = /^[\-+]?(?:(\d+\.\d*|\.?\d+)[eE][\-+]?|\d*(\.)?)\d+(?=\.?[,;:\s#()\[\]\{\}"'<])/;
    this._boolean = /^(?:true|false)(?=[.,;\s#()\[\]\{\}"'<])/;
    this._keyword = /^@[a-z]+(?=[\s#<:])/i;
    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\s#<])/i;
    this._shortPredicates = /^a(?=[\s()\[\]\{\}"'<])/;
    this._newline = /^[ \t]*(?:#[^\n\r]*)?(?:\r\n|\n|\r)[ \t]*/;
    this._comment = /#([^\n\r]*)/;
    this._whitespace = /^[ \t]+/;
    this._endOfFile = /^(?:#[^\n\r]*)?$/;
    options = options || {};

    // In line mode (N-Triples or N-Quads), only simple features may be parsed
    if (this._lineMode = !!options.lineMode) {
      this._n3Mode = false;
      // Don't tokenize special literals
      for (var key in this) {
        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)
          this[key] = invalidRegExp;
      }
    }
    // When not in line mode, enable N3 functionality by default
    else {
      this._n3Mode = options.n3 !== false;
    }
    // Don't output comment tokens by default
    this._comments = !!options.comments;
    // Cache the last tested closing position of long literals
    this._literalClosingPos = 0;
  }

  // ## Private methods

  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback
  _tokenizeToEnd(callback, inputFinished) {
    // Continue parsing as far as possible; the loop will return eventually
    var input = this._input, outputComments = this._comments;
    while (true) {
      // Count and skip whitespace lines
      var whiteSpaceMatch, comment;
      while (whiteSpaceMatch = this._newline.exec(input)) {
        // Try to find a comment
        if (outputComments && (comment = this._comment.exec(whiteSpaceMatch[0])))
          callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
        // Advance the input
        input = input.substr(whiteSpaceMatch[0].length, input.length);
        this._line++;
      }
      // Skip whitespace on current line
      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))
        input = input.substr(whiteSpaceMatch[0].length, input.length);

      // Stop for now if we're at the end
      if (this._endOfFile.test(input)) {
        // If the input is finished, emit EOF
        if (inputFinished) {
          // Try to find a final comment
          if (outputComments && (comment = this._comment.exec(input)))
            callback(null, { line: this._line, type: 'comment', value: comment[1], prefix: '' });
          callback(input = null, { line: this._line, type: 'eof', value: '', prefix: '' });
        }
        return this._input = input;
      }

      // Look for specific token types based on the first character
      var line = this._line, type = '', value = '', prefix = '',
          firstChar = input[0], match = null, matchLength = 0, inconclusive = false;
      switch (firstChar) {
      case '^':
        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed
        if (input.length < 3)
          break;
        // Try to match a type
        else if (input[1] === '^') {
          this._previousMarker = '^^';
          // Move to type IRI or prefixed name
          input = input.substr(2);
          if (input[0] !== '<') {
            inconclusive = true;
            break;
          }
        }
        // If no type, it must be a path expression
        else {
          if (this._n3Mode) {
            matchLength = 1;
            type = '^';
          }
          break;
        }
        // Fall through in case the type is an IRI
      case '<':
        // Try to find a full IRI without escape sequences
        if (match = this._unescapedIri.exec(input))
          type = 'IRI', value = match[1];
        // Try to find a full IRI with escape sequences
        else if (match = this._iri.exec(input)) {
          value = this._unescape(match[1]);
          if (value === null || illegalIriChars.test(value))
            return reportSyntaxError(this);
          type = 'IRI';
        }
        // Try to find a backwards implication arrow
        else if (this._n3Mode && input.length > 1 && input[1] === '=')
          type = 'inverse', matchLength = 2, value = '>';
        break;

      case '_':
        // Try to find a blank node. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a blank node.
        // Therefore, try inserting a space if we're at the end of the input.
        if ((match = this._blank.exec(input)) ||
            inputFinished && (match = this._blank.exec(input + ' ')))
          type = 'blank', prefix = '_', value = match[1];
        break;

      case '"':
        // Try to find a literal without escape sequences
        if (match = this._simpleQuotedString.exec(input))
          value = match[1];
        // Try to find a literal wrapped in three pairs of quotes
        else {
          ({ value, matchLength } = this._parseLiteral(input));
          if (value === null)
            return reportSyntaxError(this);
        }
        if (match !== null || matchLength !== 0) {
          type = 'literal';
          this._literalClosingPos = 0;
        }
        break;

      case "'":
        if (!this._lineMode) {
          // Try to find a literal without escape sequences
          if (match = this._simpleApostropheString.exec(input))
            value = match[1];
          // Try to find a literal wrapped in three pairs of quotes
          else {
            ({ value, matchLength } = this._parseLiteral(input));
            if (value === null)
              return reportSyntaxError(this);
          }
          if (match !== null || matchLength !== 0) {
            type = 'literal';
            this._literalClosingPos = 0;
          }
        }
        break;

      case '?':
        // Try to find a variable
        if (this._n3Mode && (match = this._variable.exec(input)))
          type = 'var', value = match[0];
        break;

      case '@':
        // Try to find a language code
        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))
          type = 'langcode', value = match[1];
        // Try to find a keyword
        else if (match = this._keyword.exec(input))
          type = match[0];
        break;

      case '.':
        // Try to find a dot as punctuation
        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {
          type = '.';
          matchLength = 1;
          break;
        }
        // Fall through to numerical case (could be a decimal dot)

      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case '+':
      case '-':
        // Try to find a number. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a number.
        // Therefore, try inserting a space if we're at the end of the input.
        if (match = this._number.exec(input) ||
            inputFinished && (match = this._number.exec(input + ' '))) {
          type = 'literal', value = match[0];
          prefix = (typeof match[1] === 'string' ? xsd.double :
                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));
        }
        break;

      case 'B':
      case 'b':
      case 'p':
      case 'P':
      case 'G':
      case 'g':
        // Try to find a SPARQL-style keyword
        if (match = this._sparqlKeyword.exec(input))
          type = match[0].toUpperCase();
        else
          inconclusive = true;
        break;

      case 'f':
      case 't':
        // Try to match a boolean
        if (match = this._boolean.exec(input))
          type = 'literal', value = match[0], prefix = xsd.boolean;
        else
          inconclusive = true;
        break;

      case 'a':
        // Try to find an abbreviated predicate
        if (match = this._shortPredicates.exec(input))
          type = 'abbreviation', value = 'a';
        else
          inconclusive = true;
        break;

      case '=':
        // Try to find an implication arrow or equals sign
        if (this._n3Mode && input.length > 1) {
          type = 'abbreviation';
          if (input[1] !== '>')
            matchLength = 1, value = '=';
          else
            matchLength = 2, value = '>';
        }
        break;

      case '!':
        if (!this._n3Mode)
          break;
      case ',':
      case ';':
      case '[':
      case ']':
      case '(':
      case ')':
      case '{':
      case '}':
        if (!this._lineMode) {
          matchLength = 1;
          type = firstChar;
        }
        break;

      default:
        inconclusive = true;
      }

      // Some first characters do not allow an immediate decision, so inspect more
      if (inconclusive) {
        // Try to find a prefix
        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&
            (match = this._prefix.exec(input)))
          type = 'prefix', value = match[1] || '';
        // Try to find a prefixed name. Since it can contain (but not end with) a dot,
        // we always need a non-dot character before deciding it is a prefixed name.
        // Therefore, try inserting a space if we're at the end of the input.
        else if ((match = this._prefixed.exec(input)) ||
                 inputFinished && (match = this._prefixed.exec(input + ' ')))
          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);
      }

      // A type token is special: it can only be emitted after an IRI or prefixed name is read
      if (this._previousMarker === '^^') {
        switch (type) {
        case 'prefixed': type = 'type';    break;
        case 'IRI':      type = 'typeIRI'; break;
        default:         type = '';
        }
      }

      // What if nothing of the above was found?
      if (!type) {
        // We could be in streaming mode, and then we just wait for more input to arrive.
        // Otherwise, a syntax error has occurred in the input.
        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).
        if (inputFinished || (!/^'''|^"""/.test(input) && /\n|\r/.test(input)))
          return reportSyntaxError(this);
        else
          return this._input = input;
      }

      // Emit the parsed token
      var token = { line: line, type: type, value: value, prefix: prefix };
      callback(null, token);
      this.previousToken = token;
      this._previousMarker = type;
      // Advance to next part to tokenize
      input = input.substr(matchLength || match[0].length, input.length);
    }

    // Signals the syntax error through the callback
    function reportSyntaxError(self) { callback(self._syntaxError(/^\S*/.exec(input)[0])); }
  }

  // ### `_unescape` replaces N3 escape codes by their corresponding characters
  _unescape(item) {
    try {
      return item.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode <= 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) / 0x400), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement)
            throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return null; }
  }

  // ### `_parseLiteral` parses a literal into an unescaped value
  _parseLiteral(input) {
    // Ensure we have enough lookahead to identify triple-quoted strings
    if (input.length >= 3) {
      // Identify the opening quote(s)
      const opening = input.match(/^(?:"""|"|'''|'|)/)[0];
      const openingLength = opening.length;

      // Find the next candidate closing quotes
      let closingPos = Math.max(this._literalClosingPos, openingLength);
      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {
        // Count backslashes right before the closing quotes
        let backslashCount = 0;
        while (input[closingPos - backslashCount - 1] === '\\')
          backslashCount++;

        // An even number of backslashes (in particular 0)
        // means these are actual, non-escaped closing quotes
        if (backslashCount % 2 === 0) {
          // Extract and unescape the value
          const raw = input.substring(openingLength, closingPos);
          const lines = raw.split(/\r\n|\r|\n/).length - 1;
          const matchLength = closingPos + openingLength;
          // Only triple-quoted strings can be multi-line
          if (openingLength === 1 && lines !== 0 ||
              openingLength === 3 && this._lineMode)
            break;
          this._line += lines;
          return { value: this._unescape(raw), matchLength };
        }
        closingPos++;
      }
      this._literalClosingPos = input.length - openingLength + 1;
    }
    return { value: '', matchLength: 0 };
  }

  // ### `_syntaxError` creates a syntax error for the given issue
  _syntaxError(issue) {
    this._input = null;
    var err = new Error('Unexpected "' + issue + '" on line ' + this._line + '.');
    err.context = {
      token: undefined,
      line: this._line,
      previousToken: this.previousToken,
    };
    return err;
  }

  // ## Public methods

  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.
  // The input can be a string or a stream.
  tokenize(input, callback) {
    var self = this;
    this._line = 1;

    // If the input is a string, continuously emit tokens through the callback until the end
    if (typeof input === 'string') {
      this._input = input;
      // If a callback was passed, asynchronously call it
      if (typeof callback === 'function')
        queue_microtask__WEBPACK_IMPORTED_MODULE_1___default()(() => self._tokenizeToEnd(callback, true));
      // If no callback was passed, tokenize synchronously and return
      else {
        var tokens = [], error;
        this._tokenizeToEnd(function (e, t) { e ? (error = e) : tokens.push(t); }, true);
        if (error) throw error;
        return tokens;
      }
    }
    // Otherwise, the input must be a stream
    else {
      this._input = '';
      this._pendingBuffer = null;
      if (typeof input.setEncoding === 'function')
        input.setEncoding('utf8');
      // Adds the data chunk to the buffer and parses as far as possible
      input.on('data', function (data) {
        if (self._input !== null && data.length !== 0) {
          // Prepend any previous pending writes
          if (self._pendingBuffer) {
            data = Buffer.concat([self._pendingBuffer, data]);
            self._pendingBuffer = null;
          }
          // Hold if the buffer ends in an incomplete unicode sequence
          if (data[data.length - 1] & 0x80) {
            self._pendingBuffer = data;
          }
          // Otherwise, tokenize as far as possible
          else {
            self._input += data;
            self._tokenizeToEnd(callback, false);
          }
        }
      });
      // Parses until the end
      input.on('end', function () {
        if (self._input !== null)
          self._tokenizeToEnd(callback, true);
      });
      input.on('error', callback);
    }
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../node_modules/n3/src/N3Parser.js":
/*!******************************************!*\
  !*** ../node_modules/n3/src/N3Parser.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3Parser; });
/* harmony import */ var _N3Lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3Lexer */ "../node_modules/n3/src/N3Lexer.js");
/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3DataFactory */ "../node_modules/n3/src/N3DataFactory.js");
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IRIs */ "../node_modules/n3/src/IRIs.js");
// **N3Parser** parses N3 documents.




let blankNodePrefix = 0;

// ## Constructor
class N3Parser {
  constructor(options) {
    this._contextStack = [];
    this._graph = null;

    // Set the document IRI
    options = options || {};
    this._setBase(options.baseIRI);
    options.factory && initDataFactory(this, options.factory);

    // Set supported features depending on the format
    var format = (typeof options.format === 'string') ?
                 options.format.match(/\w*$/)[0].toLowerCase() : '',
        isTurtle = format === 'turtle', isTriG = format === 'trig',
        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),
        isN3 = this._n3Mode = /n3/.test(format),
        isLineMode = isNTriples || isNQuads;
    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))
      this._readPredicateOrNamedGraph = this._readPredicate;
    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);
    // Disable relative IRIs in N-Triples or N-Quads mode
    if (isLineMode)
      this._resolveRelativeIRI = function (iri) { return null; };
    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :
                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');
    this._lexer = options.lexer || new _N3Lexer__WEBPACK_IMPORTED_MODULE_0__["default"]({ lineMode: isLineMode, n3: isN3 });
    // Disable explicit quantifiers by default
    this._explicitQuantifiers = !!options.explicitQuantifiers;
  }

  // ## Static class methods

  // ### `_resetBlankNodePrefix` restarts blank node prefix identification
  static _resetBlankNodePrefix() {
    blankNodePrefix = 0;
  }

  // ## Private methods

  // ### `_setBase` sets the base IRI to resolve relative IRIs
  _setBase(baseIRI) {
    if (!baseIRI) {
      this._base = '';
      this._basePath = '';
    }
    else {
      // Remove fragment if present
      var fragmentPos = baseIRI.indexOf('#');
      if (fragmentPos >= 0)
        baseIRI = baseIRI.substr(0, fragmentPos);
      // Set base IRI and its components
      this._base = baseIRI;
      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :
                         baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i);
      this._baseRoot   = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  }

  // ### `_saveContext` stores the current parsing context
  // when entering a new scope (list, blank node, formula)
  _saveContext(type, graph, subject, predicate, object) {
    var n3Mode = this._n3Mode;
    this._contextStack.push({
      subject: subject, predicate: predicate, object: object,
      graph: graph, type: type,
      inverse: n3Mode ? this._inversePredicate : false,
      blankPrefix: n3Mode ? this._prefixes._ : '',
      quantified: n3Mode ? this._quantified : null,
    });
    // The settings below only apply to N3 streams
    if (n3Mode) {
      // Every new scope resets the predicate direction
      this._inversePredicate = false;
      // In N3, blank nodes are scoped to a formula
      // (using a dot as separator, as a blank node label cannot start with it)
      this._prefixes._ = (this._graph ? this._graph.id.substr(2) + '.' : '.');
      // Quantifiers are scoped to a formula
      this._quantified = Object.create(this._quantified);
    }
  }

  // ### `_restoreContext` restores the parent context
  // when leaving a scope (list, blank node, formula)
  _restoreContext() {
    var context = this._contextStack.pop(), n3Mode = this._n3Mode;
    this._subject   = context.subject;
    this._predicate = context.predicate;
    this._object    = context.object;
    this._graph     = context.graph;
    // The settings below only apply to N3 streams
    if (n3Mode) {
      this._inversePredicate = context.inverse;
      this._prefixes._ = context.blankPrefix;
      this._quantified = context.quantified;
    }
  }

  // ### `_readInTopContext` reads a token when in the top context
  _readInTopContext(token) {
    switch (token.type) {
    // If an EOF token arrives in the top context, signal that we're done
    case 'eof':
      if (this._graph !== null)
        return this._error('Unclosed graph', token);
      delete this._prefixes._;
      return this._callback(null, null, this._prefixes);
    // It could be a prefix declaration
    case 'PREFIX':
      this._sparqlStyle = true;
    case '@prefix':
      return this._readPrefix;
    // It could be a base declaration
    case 'BASE':
      this._sparqlStyle = true;
    case '@base':
      return this._readBaseIRI;
    // It could be a graph
    case '{':
      if (this._supportsNamedGraphs) {
        this._graph = '';
        this._subject = null;
        return this._readSubject;
      }
    case 'GRAPH':
      if (this._supportsNamedGraphs)
        return this._readNamedGraphLabel;
    // Otherwise, the next token must be a subject
    default:
      return this._readSubject(token);
    }
  }

  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable
  _readEntity(token, quantifier) {
    var value;
    switch (token.type) {
    // Read a relative or absolute IRI
    case 'IRI':
    case 'typeIRI':
      var iri = this._resolveIRI(token.value);
      if (iri === null)
        return this._error('Invalid IRI', token);
      value = this._namedNode(iri);
      break;
    // Read a prefixed name
    case 'type':
    case 'prefixed':
      var prefix = this._prefixes[token.prefix];
      if (prefix === undefined)
        return this._error('Undefined prefix "' + token.prefix + ':"', token);
      value = this._namedNode(prefix + token.value);
      break;
    // Read a blank node
    case 'blank':
      value = this._blankNode(this._prefixes[token.prefix] + token.value);
      break;
    // Read a variable
    case 'var':
      value = this._variable(token.value.substr(1));
      break;
    // Everything else is not an entity
    default:
      return this._error('Expected entity but got ' + token.type, token);
    }
    // In N3 mode, replace the entity if it is quantified
    if (!quantifier && this._n3Mode && (value.id in this._quantified))
      value = this._quantified[value.id];
    return value;
  }

  // ### `_readSubject` reads a quad's subject
  _readSubject(token) {
    this._predicate = null;
    switch (token.type) {
    case '[':
      // Start a new quad with a new blank node as subject
      this._saveContext('blank', this._graph,
                        this._subject = this._blankNode(), null, null);
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, this.RDF_NIL, null, null);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph,
                        this._graph = this._blankNode(), null, null);
      return this._readSubject;
    case '}':
       // No subject; the graph in which we are reading is closed instead
      return this._readPunctuation(token);
    case '@forSome':
      if (!this._n3Mode)
        return this._error('Unexpected "@forSome"', token);
      this._subject = null;
      this._predicate = this.N3_FORSOME;
      this._quantifier = this._blankNode;
      return this._readQuantifierList;
    case '@forAll':
      if (!this._n3Mode)
        return this._error('Unexpected "@forAll"', token);
      this._subject = null;
      this._predicate = this.N3_FORALL;
      this._quantifier = this._variable;
      return this._readQuantifierList;
    case 'literal':
      if (!this._n3Mode)
        return this._error('Unexpected literal', token);

      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        return this._completeSubjectLiteral;
      }
      else
        this._subject = this._literal(token.value, this._namedNode(token.prefix));

      break;
    default:
      // Read the subject entity
      if ((this._subject = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the subject might be a path
      if (this._n3Mode)
        return this._getPathReader(this._readPredicateOrNamedGraph);
    }

    // The next token must be a predicate,
    // or, if the subject was actually a graph IRI, a named graph
    return this._readPredicateOrNamedGraph;
  }

  // ### `_readPredicate` reads a quad's predicate
  _readPredicate(token) {
    var type = token.type;
    switch (type) {
    case 'inverse':
      this._inversePredicate = true;
    case 'abbreviation':
      this._predicate = this.ABBREVIATIONS[token.value];
      break;
    case '.':
    case ']':
    case '}':
      // Expected predicate didn't come, must have been trailing semicolon
      if (this._predicate === null)
        return this._error('Unexpected ' + type, token);
      this._subject = null;
      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);
    case ';':
      // Additional semicolons can be safely ignored
      return this._predicate !== null ? this._readPredicate :
             this._error('Expected predicate but got ;', token);
    case 'blank':
      if (!this._n3Mode)
        return this._error('Disallowed blank node as predicate', token);
    default:
      if ((this._predicate = this._readEntity(token)) === undefined)
        return;
    }
    // The next token must be an object
    return this._readObject;
  }

  // ### `_readObject` reads a quad's object
  _readObject(token) {
    switch (token.type) {
    case 'literal':
      // Regular literal, can still get a datatype or language
      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        return this._readDataTypeOrLang;
      }
      // Pre-datatyped string literal (prefix stores the datatype)
      else
        this._object = this._literal(token.value, this._namedNode(token.prefix));
      break;
    case '[':
      // Start a new quad with a new blank node as subject
      this._saveContext('blank', this._graph, this._subject, this._predicate,
                        this._subject = this._blankNode());
      return this._readBlankNodeHead;
    case '(':
      // Start a new list
      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);
      this._subject = null;
      return this._readListItem;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph, this._subject, this._predicate,
                        this._graph = this._blankNode());
      return this._readSubject;
    default:
      // Read the object entity
      if ((this._object = this._readEntity(token)) === undefined)
        return;
      // In N3 mode, the object might be a path
      if (this._n3Mode)
        return this._getPathReader(this._getContextEndReader());
    }
    return this._getContextEndReader();
  }

  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph
  _readPredicateOrNamedGraph(token) {
    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);
  }

  // ### `_readGraph` reads a graph
  _readGraph(token) {
    if (token.type !== '{')
      return this._error('Expected graph but got ' + token.type, token);
    // The "subject" we read is actually the GRAPH's label
    this._graph = this._subject, this._subject = null;
    return this._readSubject;
  }

  // ### `_readBlankNodeHead` reads the head of a blank node
  _readBlankNodeHead(token) {
    if (token.type === ']') {
      this._subject = null;
      return this._readBlankNodeTail(token);
    }
    else {
      this._predicate = null;
      return this._readPredicate(token);
    }
  }

  // ### `_readBlankNodeTail` reads the end of a blank node
  _readBlankNodeTail(token) {
    if (token.type !== ']')
      return this._readBlankNodePunctuation(token);

    // Store blank node quad
    if (this._subject !== null)
      this._emit(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this blank node
    var empty = this._predicate === null;
    this._restoreContext();
    // If the blank node was the subject, continue reading the predicate
    if (this._object === null)
      // If the blank node was empty, it could be a named graph label
      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;
    // If the blank node was the object, restore previous context and read punctuation
    else
      return this._getContextEndReader();
  }

  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node
  _readPredicateAfterBlank(token) {
    switch (token.type) {
    case '.':
    case '}':
      // No predicate is coming if the triple is terminated here
      this._subject = null;
      return this._readPunctuation(token);
    default:
      return this._readPredicate(token);
    }
  }

  // ### `_readListItem` reads items from a list
  _readListItem(token) {
    var item = null,                      // The item of the list
        list = null,                      // The list itself
        previousList = this._subject,     // The previous list that contains this list
        stack = this._contextStack,       // The stack of parent contexts
        parent = stack[stack.length - 1], // The parent containing the current list
        next = this._readListItem;        // The next function to execute

    switch (token.type) {
    case '[':
      // Stack the current list quad and start a new quad with a blank node as subject
      this._saveContext('blank', this._graph,
                        list = this._blankNode(), this.RDF_FIRST,
                        this._subject = item = this._blankNode());
      next = this._readBlankNodeHead;
      break;
    case '(':
      // Stack the current list quad and start a new list
      this._saveContext('list', this._graph,
                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);
      this._subject = null;
      break;
    case ')':
      // Closing the list; restore the parent context
      this._restoreContext();
      // If this list is contained within a parent list, return the membership quad here.
      // This will be `<parent list element> rdf:first <this list>.`.
      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')
        this._emit(this._subject, this._predicate, this._object, this._graph);
      // Was this list the parent's subject?
      if (this._predicate === null) {
        // The next token is the predicate
        next = this._readPredicate;
        // No list tail if this was an empty list
        if (this._subject === this.RDF_NIL)
          return next;
      }
      // The list was in the parent context's object
      else {
        next = this._getContextEndReader();
        // No list tail if this was an empty list
        if (this._object === this.RDF_NIL)
          return next;
      }
      // Close the list by making the head nil
      list = this.RDF_NIL;
      break;
    case 'literal':
      // Regular literal, can still get a datatype or language
      if (token.prefix.length === 0) {
        this._literalValue = token.value;
        next = this._readListItemDataTypeOrLang;
      }
      // Pre-datatyped string literal (prefix stores the datatype)
      else {
        item = this._literal(token.value, this._namedNode(token.prefix));
        next = this._getContextEndReader();
      }
      break;
    case '{':
      // Start a new formula
      if (!this._n3Mode)
        return this._error('Unexpected graph', token);
      this._saveContext('formula', this._graph, this._subject, this._predicate,
                        this._graph = this._blankNode());
      return this._readSubject;
    default:
      if ((item = this._readEntity(token)) === undefined)
        return;
    }

     // Create a new blank node if no item head was assigned yet
    if (list === null)
      this._subject = list = this._blankNode();

    // Is this the first element of the list?
    if (previousList === null) {
      // This list is either the subject or the object of its parent
      if (parent.predicate === null)
        parent.subject = list;
      else
        parent.object = list;
    }
    else {
      // Continue the previous list with the current list
      this._emit(previousList, this.RDF_REST, list, this._graph);
    }
    // If an item was read, add it to the list
    if (item !== null) {
      // In N3 mode, the item might be a path
      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {
        // Create a new context to add the item's path
        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);
        this._subject = item, this._predicate = null;
        // _readPath will restore the context and output the item
        return this._getPathReader(this._readListItem);
      }
      // Output the item
      this._emit(list, this.RDF_FIRST, item, this._graph);
    }
    return next;
  }

  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language
  _readDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, false);
  }


  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list
  _readListItemDataTypeOrLang(token) {
    return this._completeObjectLiteral(token, true);
  }

  // ### `_completeLiteral` completes a literal with an optional datatype or language
  _completeLiteral(token) {
    // Create a simple string literal by default
    let literal = this._literal(this._literalValue);

    switch (token.type) {
    // Create a datatyped literal
    case 'type':
    case 'typeIRI':
      var datatype = this._readEntity(token);
      if (datatype === undefined) return; // No datatype means an error occurred
      literal = this._literal(this._literalValue, datatype);
      token = null;
      break;
    // Create a language-tagged string
    case 'langcode':
      literal = this._literal(this._literalValue, token.value);
      token = null;
      break;
    }

    return { token, literal };
  }

  // Completes a literal in subject position
  _completeSubjectLiteral(token) {
    this._subject = this._completeLiteral(token).literal;
    return this._readPredicateOrNamedGraph;
  }

  // Completes a literal in object position
  _completeObjectLiteral(token, listItem) {
    const completed = this._completeLiteral(token);
    if (!completed)
      return;
    this._object = completed.literal;

    // If this literal was part of a list, write the item
    // (we could also check the context stack, but passing in a flag is faster)
    if (listItem)
      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);
    // If the token was consumed, continue with the rest of the input
    if (completed.token === null)
      return this._getContextEndReader();
    // Otherwise, consume the token now
    else {
      this._readCallback = this._getContextEndReader();
      return this._readCallback(completed.token);
    }
  }

  // ### `_readFormulaTail` reads the end of a formula
  _readFormulaTail(token) {
    if (token.type !== '}')
      return this._readPunctuation(token);

    // Store the last quad of the formula
    if (this._subject !== null)
      this._emit(this._subject, this._predicate, this._object, this._graph);

    // Restore the parent context containing this formula
    this._restoreContext();
    // If the formula was the subject, continue reading the predicate.
    // If the formula was the object, read punctuation.
    return this._object === null ? this._readPredicate : this._getContextEndReader();
  }

  // ### `_readPunctuation` reads punctuation between quads or quad parts
  _readPunctuation(token) {
    var next, subject = this._subject, graph = this._graph,
        inversePredicate = this._inversePredicate;
    switch (token.type) {
    // A closing brace ends a graph
    case '}':
      if (this._graph === null)
        return this._error('Unexpected graph closing', token);
      if (this._n3Mode)
        return this._readFormulaTail(token);
      this._graph = null;
    // A dot just ends the statement, without sharing anything with the next
    case '.':
      this._subject = null;
      next = this._contextStack.length ? this._readSubject : this._readInTopContext;
      if (inversePredicate) this._inversePredicate = false;
      break;
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      // An entity means this is a quad (only allowed if not already inside a graph)
      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {
        next = this._readQuadPunctuation;
        break;
      }
      return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
    }
    // A quad has been completed now, so return it
    if (subject !== null) {
      var predicate = this._predicate, object = this._object;
      if (!inversePredicate)
        this._emit(subject, predicate, object,  graph);
      else
        this._emit(object,  predicate, subject, graph);
    }
    return next;
  }

    // ### `_readBlankNodePunctuation` reads punctuation in a blank node
  _readBlankNodePunctuation(token) {
    var next;
    switch (token.type) {
    // Semicolon means the subject is shared; predicate and object are different
    case ';':
      next = this._readPredicate;
      break;
    // Comma means both the subject and predicate are shared; the object is different
    case ',':
      next = this._readObject;
      break;
    default:
      return this._error('Expected punctuation to follow "' + this._object.id + '"', token);
    }
    // A quad has been completed now, so return it
    this._emit(this._subject, this._predicate, this._object, this._graph);
    return next;
  }

  // ### `_readQuadPunctuation` reads punctuation after a quad
  _readQuadPunctuation(token) {
    if (token.type !== '.')
      return this._error('Expected dot to follow quad', token);
    return this._readInTopContext;
  }

  // ### `_readPrefix` reads the prefix of a prefix declaration
  _readPrefix(token) {
    if (token.type !== 'prefix')
      return this._error('Expected prefix to follow @prefix', token);
    this._prefix = token.value;
    return this._readPrefixIRI;
  }

  // ### `_readPrefixIRI` reads the IRI of a prefix declaration
  _readPrefixIRI(token) {
    if (token.type !== 'IRI')
      return this._error('Expected IRI to follow prefix "' + this._prefix + ':"', token);
    var prefixNode = this._readEntity(token);
    this._prefixes[this._prefix] = prefixNode.value;
    this._prefixCallback(this._prefix, prefixNode);
    return this._readDeclarationPunctuation;
  }

  // ### `_readBaseIRI` reads the IRI of a base declaration
  _readBaseIRI(token) {
    var iri = token.type === 'IRI' && this._resolveIRI(token.value);
    if (!iri)
      return this._error('Expected valid IRI to follow base declaration', token);
    this._setBase(iri);
    return this._readDeclarationPunctuation;
  }

  // ### `_readNamedGraphLabel` reads the label of a named graph
  _readNamedGraphLabel(token) {
    switch (token.type) {
    case 'IRI':
    case 'blank':
    case 'prefixed':
      return this._readSubject(token), this._readGraph;
    case '[':
      return this._readNamedGraphBlankLabel;
    default:
      return this._error('Invalid graph label', token);
    }
  }

  // ### `_readNamedGraphLabel` reads a blank node label of a named graph
  _readNamedGraphBlankLabel(token) {
    if (token.type !== ']')
      return this._error('Invalid graph label', token);
    this._subject = this._blankNode();
    return this._readGraph;
  }

  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration
  _readDeclarationPunctuation(token) {
    // SPARQL-style declarations don't have punctuation
    if (this._sparqlStyle) {
      this._sparqlStyle = false;
      return this._readInTopContext(token);
    }

    if (token.type !== '.')
      return this._error('Expected declaration to end with a dot', token);
    return this._readInTopContext;
  }

  // Reads a list of quantified symbols from a @forSome or @forAll statement
  _readQuantifierList(token) {
    var entity;
    switch (token.type) {
    case 'IRI':
    case 'prefixed':
      if ((entity = this._readEntity(token, true)) !== undefined)
        break;
    default:
      return this._error('Unexpected ' + token.type, token);
    }
    // Without explicit quantifiers, map entities to a quantified entity
    if (!this._explicitQuantifiers)
      this._quantified[entity.id] = this._quantifier(this._blankNode().value);
    // With explicit quantifiers, output the reified quantifier
    else {
      // If this is the first item, start a new quantifier list
      if (this._subject === null)
        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,
                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
      // Otherwise, continue the previous list
      else
        this._emit(this._subject, this.RDF_REST,
                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);
      // Output the list item
      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);
    }
    return this._readQuantifierPunctuation;
  }

  // Reads punctuation from a @forSome or @forAll statement
  _readQuantifierPunctuation(token) {
    // Read more quantifiers
    if (token.type === ',')
      return this._readQuantifierList;
    // End of the quantifier list
    else {
      // With explicit quantifiers, close the quantifier list
      if (this._explicitQuantifiers) {
        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);
        this._subject = null;
      }
      // Read a dot
      this._readCallback = this._getContextEndReader();
      return this._readCallback(token);
    }
  }

  // ### `_getPathReader` reads a potential path and then resumes with the given function
  _getPathReader(afterPath) {
    this._afterPath = afterPath;
    return this._readPath;
  }

  // ### `_readPath` reads a potential path
  _readPath(token) {
    switch (token.type) {
    // Forward path
    case '!': return this._readForwardPath;
    // Backward path
    case '^': return this._readBackwardPath;
    // Not a path; resume reading where we left off
    default:
      var stack = this._contextStack, parent = stack.length && stack[stack.length - 1];
      // If we were reading a list item, we still need to output it
      if (parent && parent.type === 'item') {
        // The list item is the remaining subejct after reading the path
        var item = this._subject;
        // Switch back to the context of the list
        this._restoreContext();
        // Output the list item
        this._emit(this._subject, this.RDF_FIRST, item, this._graph);
      }
      return this._afterPath(token);
    }
  }

  // ### `_readForwardPath` reads a '!' path
  _readForwardPath(token) {
    var subject, predicate, object = this._blankNode();
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's object
    if (this._predicate === null)
      subject = this._subject, this._subject = object;
    // If we were reading an object, replace the subject by the path's object
    else
      subject = this._object,  this._object  = object;
    // Emit the path's current quad and read its next section
    this._emit(subject, predicate, object, this._graph);
    return this._readPath;
  }

  // ### `_readBackwardPath` reads a '^' path
  _readBackwardPath(token) {
    var subject = this._blankNode(), predicate, object;
    // The next token is the predicate
    if ((predicate = this._readEntity(token)) === undefined)
      return;
    // If we were reading a subject, replace the subject by the path's subject
    if (this._predicate === null)
      object = this._subject, this._subject = subject;
    // If we were reading an object, replace the subject by the path's subject
    else
      object = this._object,  this._object  = subject;
    // Emit the path's current quad and read its next section
    this._emit(subject, predicate, object, this._graph);
    return this._readPath;
  }

  // ### `_getContextEndReader` gets the next reader function at the end of a context
  _getContextEndReader() {
    var contextStack = this._contextStack;
    if (!contextStack.length)
      return this._readPunctuation;

    switch (contextStack[contextStack.length - 1].type) {
    case 'blank':
      return this._readBlankNodeTail;
    case 'list':
      return this._readListItem;
    case 'formula':
      return this._readFormulaTail;
    }
  }

  // ### `_emit` sends a quad through the callback
  _emit(subject, predicate, object, graph) {
    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));
  }

  // ### `_error` emits an error message through the callback
  _error(message, token) {
    var err = new Error(message + ' on line ' + token.line + '.');
    err.context = {
      token: token,
      line: token.line,
      previousToken: this._lexer.previousToken,
    };
    this._callback(err);
    this._callback = noop;
  }

  // ### `_resolveIRI` resolves an IRI against the base path
  _resolveIRI(iri) {
    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);
  }

  // ### `_resolveRelativeIRI` resolves an IRI against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative
  _resolveRelativeIRI(iri) {
    // An empty relative IRI indicates the base IRI
    if (!iri.length)
      return this._base;
    // Decide resolving strategy based in the first character
    switch (iri[0]) {
    // Resolve relative fragment IRIs against the base IRI
    case '#': return this._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default:
      // Relative IRIs cannot contain a colon in the first path segment
      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986
  _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!/(^|\/)\.\.?($|[/#?])/.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    var result = '', length = iri.length, i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  // ## Public methods

  // ### `parse` parses the N3 input and emits each parsed quad through the callback
  parse(input, quadCallback, prefixCallback) {
    var self = this;
    // The read callback is the next function to be executed when a token arrives.
    // We start reading in the top context.
    this._readCallback = this._readInTopContext;
    this._sparqlStyle = false;
    this._prefixes = Object.create(null);
    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)
                                             : 'b' + blankNodePrefix++ + '_';
    this._prefixCallback = prefixCallback || noop;
    this._inversePredicate = false;
    this._quantified = Object.create(null);

    // Parse synchronously if no quad callback is given
    if (!quadCallback) {
      var quads = [], error;
      this._callback = function (e, t) { e ? (error = e) : t && quads.push(t); };
      this._lexer.tokenize(input).every(function (token) {
        return self._readCallback = self._readCallback(token);
      });
      if (error) throw error;
      return quads;
    }

    // Parse asynchronously otherwise, executing the read callback when a token arrives
    this._callback = quadCallback;
    this._lexer.tokenize(input, function (error, token) {
      if (error !== null)
        self._callback(error), self._callback = noop;
      else if (self._readCallback)
        self._readCallback = self._readCallback(token);
    });
  }
}

// The empty function
function noop() {}

// Initializes the parser with the given data factory
function initDataFactory(parser, factory) {
  // Set factory methods
  var namedNode = factory.namedNode;
  parser._namedNode   = namedNode;
  parser._blankNode   = factory.blankNode;
  parser._literal     = factory.literal;
  parser._variable    = factory.variable;
  parser._quad        = factory.quad;
  parser.DEFAULTGRAPH = factory.defaultGraph();

  // Set common named nodes
  parser.RDF_FIRST  = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.first);
  parser.RDF_REST   = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.rest);
  parser.RDF_NIL    = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.nil);
  parser.N3_FORALL  = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].r.forAll);
  parser.N3_FORSOME = namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].r.forSome);
  parser.ABBREVIATIONS = {
    'a': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.type),
    '=': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].owl.sameAs),
    '>': namedNode(_IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].log.implies),
  };
  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');
}
initDataFactory(N3Parser.prototype, _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__["default"]);


/***/ }),

/***/ "../node_modules/n3/src/N3Store.js":
/*!*****************************************!*\
  !*** ../node_modules/n3/src/N3Store.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3Store; });
/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ "../node_modules/n3/src/N3DataFactory.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ "../node_modules/readable-stream/readable-browser.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IRIs */ "../node_modules/n3/src/IRIs.js");
// **N3Store** objects store N3 quads by graph in memory.




const { toId, fromId } = _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__["default"].internal;

// ## Constructor
class N3Store {
  constructor(quads, options) {
    // The number of quads is initially zero
    this._size = 0;
    // `_graphs` contains subject, predicate, and object indexes per graph
    this._graphs = Object.create(null);
    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`
    this._id = 0;
    this._ids = Object.create(null);
    this._ids['><'] = 0; // dummy entry, so the first actual key is non-zero
    this._entities = Object.create(null); // inverse of `_ids`
    // `_blankNodeIndex` is the index of the last automatically named blank node
    this._blankNodeIndex = 0;

    // Shift parameters if `quads` is not given
    if (!options && quads && !quads[0])
      options = quads, quads = null;
    options = options || {};
    this._factory = options.factory || _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__["default"];

    // Add quads if passed
    if (quads)
      this.addQuads(quads);
  }

  // ## Public properties

  // ### `size` returns the number of quads in the store
  get size() {
    // Return the quad count if if was cached
    var size = this._size;
    if (size !== null)
      return size;

    // Calculate the number of quads by counting to the deepest level
    size = 0;
    var graphs = this._graphs, subjects, subject;
    for (var graphKey in graphs)
      for (var subjectKey in (subjects = graphs[graphKey].subjects))
        for (var predicateKey in (subject = subjects[subjectKey]))
          size += Object.keys(subject[predicateKey]).length;
    return this._size = size;
  }

  // ## Private methods

  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex(index0, key0, key1, key2) {
    // Create layers as necessary
    var index1 = index0[key0] || (index0[key0] = {});
    var index2 = index1[key1] || (index1[key1] = {});
    // Setting the key to _any_ value signals the presence of the quad
    var existed = key2 in index2;
    if (!existed)
      index2[key2] = null;
    return !existed;
  }

  // ### `_removeFromIndex` removes a quad from a three-layered index
  _removeFromIndex(index0, key0, key1, key2) {
    // Remove the quad from the index
    var index1 = index0[key0], index2 = index1[key1], key;
    delete index2[key2];

    // Remove intermediary index layers if they are empty
    for (key in index2) return;
    delete index1[key1];
    for (key in index1) return;
    delete index0[key0];
  }

  // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created quads.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any quad.
  // If instead `array` is given, each result is added to the array.
  _findInIndex(index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    var tmp, index1, index2, varCount = !key0 + !key1 + !key2,
        // depending on the number of variables, keys or reverse index are faster
        entityKeys = varCount > 1 ? Object.keys(this._ids) : this._entities;

    // If a key is specified, use only that part of index 0.
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      var entity0 = entityKeys[value0];

      if (index1 = index0[value0]) {
        // If a key is specified, use only that part of index 1.
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          var entity1 = entityKeys[value1];

          if (index2 = index1[value1]) {
            // If a key is specified, use only that part of index 2, if it exists.
            var values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);
            // Create quads for all items found in index 2.
            for (var l = 0; l < values.length; l++) {
              var parts = { subject: null, predicate: null, object: null };
              parts[name0] = fromId(entity0, this._factory);
              parts[name1] = fromId(entity1, this._factory);
              parts[name2] = fromId(entityKeys[values[l]], this._factory);
              var quad = this._factory.quad(
                parts.subject, parts.predicate, parts.object, fromId(graph, this._factory));
              if (array)
                array.push(quad);
              else if (callback(quad))
                return true;
            }
          }
        }
      }
    }
    return array;
  }

  // ### `_loop` executes the callback on all keys of index 0
  _loop(index0, callback) {
    for (var key0 in index0)
      callback(key0);
  }

  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0
  _loopByKey0(index0, key0, callback) {
    var index1, key1;
    if (index1 = index0[key0]) {
      for (key1 in index1)
        callback(key1);
    }
  }

  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0
  _loopByKey1(index0, key1, callback) {
    var key0, index1;
    for (key0 in index0) {
      index1 = index0[key0];
      if (index1[key1])
        callback(key0);
    }
  }

  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2
  _loopBy2Keys(index0, key0, key1, callback) {
    var index1, index2, key2;
    if ((index1 = index0[key0]) && (index2 = index1[key1])) {
      for (key2 in index2)
        callback(key2);
    }
  }

  // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex(index0, key0, key1, key2) {
    var count = 0, tmp, index1, index2;

    // If a key is specified, count only that part of index 0
    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];
    for (var value0 in index0) {
      if (index1 = index0[value0]) {
        // If a key is specified, count only that part of index 1
        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];
        for (var value1 in index1) {
          if (index2 = index1[value1]) {
            // If a key is specified, count the quad if it exists
            if (key2) (key2 in index2) && count++;
            // Otherwise, count all quads
            else count += Object.keys(index2).length;
          }
        }
      }
    }
    return count;
  }

  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs(graph) {
    if (!isString(graph))
      return this._graphs;
    var graphs = {};
    graphs[graph] = this._graphs[graph];
    return graphs;
  }

  // ### `_uniqueEntities` returns a function that accepts an entity ID
  // and passes the corresponding entity to callback if it hasn't occurred before.
  _uniqueEntities(callback) {
    var uniqueIds = Object.create(null), entities = this._entities;
    return function (id) {
      if (!(id in uniqueIds)) {
        uniqueIds[id] = true;
        callback(fromId(entities[id]));
      }
    };
  }

  // ## Public methods

  // ### `addQuad` adds a new quad to the store.
  // Returns if the quad index has changed, if the quad did not already exist.
  addQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Convert terms to internal string representation
    subject = toId(subject);
    predicate = toId(predicate);
    object = toId(object);
    graph = toId(graph);

    // Find the graph that will contain the triple
    var graphItem = this._graphs[graph];
    // Create the graph if it doesn't exist yet
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway
      Object.freeze(graphItem);
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    var ids = this._ids;
    var entities = this._entities;
    subject   = ids[subject]   || (ids[entities[++this._id] = subject]   = this._id);
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id);
    object    = ids[object]    || (ids[entities[++this._id] = object]    = this._id);

    var changed = this._addToIndex(graphItem.subjects,   subject,   predicate, object);
    this._addToIndex(graphItem.predicates, predicate, object,    subject);
    this._addToIndex(graphItem.objects,    object,    subject,   predicate);

    // The cached quad count is now invalid
    this._size = null;
    return changed;
  }

  // ### `addQuads` adds multiple quads to the store
  addQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.addQuad(quads[i]);
  }

  // ### `import` adds a stream of quads to the store
  import(stream) {
    var self = this;
    stream.on('data', function (quad) { self.addQuad(quad); });
    return stream;
  }

  // ### `removeQuad` removes a quad from the store if it exists
  removeQuad(subject, predicate, object, graph) {
    // Shift arguments if a quad object is given instead of components
    if (!predicate)
      graph = subject.graph, object = subject.object,
        predicate = subject.predicate, subject = subject.subject;

    // Convert terms to internal string representation
    subject = toId(subject);
    predicate = toId(predicate);
    object = toId(object);
    graph = toId(graph);

    // Find internal identifiers for all components
    // and verify the quad exists.
    var graphItem, ids = this._ids, graphs = this._graphs, subjects, predicates;
    if (!(subject    = ids[subject]) || !(predicate = ids[predicate]) ||
        !(object     = ids[object])  || !(graphItem = graphs[graph])  ||
        !(subjects   = graphItem.subjects[subject]) ||
        !(predicates = subjects[predicate]) ||
        !(object in predicates))
      return false;

    // Remove it from all indexes
    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);
    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);
    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);
    if (this._size !== null) this._size--;

    // Remove the graph if it is empty
    for (subject in graphItem.subjects) return true;
    delete graphs[graph];
    return true;
  }

  // ### `removeQuads` removes multiple quads from the store
  removeQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.removeQuad(quads[i]);
  }

  // ### `remove` removes a stream of quads from the store
  remove(stream) {
    var self = this;
    stream.on('data', function (quad) { self.removeQuad(quad); });
    return stream;
  }

  // ### `removeMatches` removes all matching quads from the store
  // Setting any field to `undefined` or `null` indicates a wildcard.
  removeMatches(subject, predicate, object, graph) {
    return this.remove(this.match(subject, predicate, object, graph));
  }

  // ### `deleteGraph` removes all triples with the given graph from the store
  deleteGraph(graph) {
    return this.removeMatches(null, null, null, graph);
  }

  // ### `getQuads` returns an array of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && toId(subject);
    predicate = predicate && toId(predicate);
    object = object && toId(object);
    graph = graph && toId(graph);

    var quads = [], graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return quads;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, subjectId, predicateId,
                              'object', 'subject', 'predicate', graphId, null, quads);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            this._findInIndex(content.subjects, subjectId, predicateId, null,
                              'subject', 'predicate', 'object', graphId, null, quads);
        }
        else if (predicateId)
          // If only predicate and possibly object are given, the predicate index will be the fastest
          this._findInIndex(content.predicates, predicateId, objectId, null,
                            'predicate', 'object', 'subject', graphId, null, quads);
        else if (objectId)
          // If only object is given, the object index will be the fastest
          this._findInIndex(content.objects, objectId, null, null,
                            'object', 'subject', 'predicate', graphId, null, quads);
        else
          // If nothing is given, iterate subjects and predicates first
          this._findInIndex(content.subjects, null, null, null,
                            'subject', 'predicate', 'object', graphId, null, quads);
      }
    }
    return quads;
  }

  // ### `match` returns a stream of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  match(subject, predicate, object, graph) {
    var stream = new stream__WEBPACK_IMPORTED_MODULE_1__["Readable"]({ objectMode: true });

    // Initialize stream once it is being read
    stream._read = () => {
      for (var quad of this.getQuads(subject, predicate, object, graph))
        stream.push(quad);
      stream.push(null);
    };

    return stream;
  }

  // ### `countQuads` returns the number of quads matching a pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  countQuads(subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && toId(subject);
    predicate = predicate && toId(predicate);
    object = object && toId(object);
    graph = graph && toId(graph);

    var count = 0, graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return 0;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subject) {
          if (object)
            // If subject and object are given, the object index will be the fastest
            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);
        }
        else if (predicate) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);
        }
        else {
          // If only object is possibly given, the object index will be the fastest
          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);
        }
      }
    }
    return count;
  }

  // ### `forEach` executes the callback on all quads.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forEach(callback, subject, predicate, object, graph) {
    this.some(function (quad) {
      callback(quad);
      return false;
    }, subject, predicate, object, graph);
  }

  // ### `every` executes the callback on all quads,
  // and returns `true` if it returns truthy for all them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  every(callback, subject, predicate, object, graph) {
    var some = false;
    var every = !this.some(function (quad) {
      some = true;
      return !callback(quad);
    }, subject, predicate, object, graph);
    return some && every;
  }

  // ### `some` executes the callback on all quads,
  // and returns `true` if it returns truthy for any of them.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  some(callback, subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && toId(subject);
    predicate = predicate && toId(predicate);
    object = object && toId(object);
    graph = graph && toId(graph);

    var graphs = this._getGraphs(graph), content,
        ids = this._ids, subjectId, predicateId, objectId;

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject])   ||
        isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return false;

    for (var graphId in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graphId]) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) {
          // If subject and object are given, the object index will be the fastest
            if (this._findInIndex(content.objects, objectId, subjectId, predicateId,
                                  'object', 'subject', 'predicate', graphId, callback, null))
              return true;
          }
          else
            // If only subject and possibly predicate are given, the subject index will be the fastest
            if (this._findInIndex(content.subjects, subjectId, predicateId, null,
                                  'subject', 'predicate', 'object', graphId, callback, null))
              return true;
        }
        else if (predicateId) {
          // If only predicate and possibly object are given, the predicate index will be the fastest
          if (this._findInIndex(content.predicates, predicateId, objectId, null,
                                'predicate', 'object', 'subject', graphId, callback, null)) {
            return true;
          }
        }
        else if (objectId) {
          // If only object is given, the object index will be the fastest
          if (this._findInIndex(content.objects, objectId, null, null,
                                'object', 'subject', 'predicate', graphId, callback, null)) {
            return true;
          }
        }
        else
        // If nothing is given, iterate subjects and predicates first
        if (this._findInIndex(content.subjects, null, null, null,
                              'subject', 'predicate', 'object', graphId, callback, null)) {
          return true;
        }
      }
    }
    return false;
  }

  // ### `getSubjects` returns all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getSubjects(predicate, object, graph) {
    var results = [];
    this.forSubjects(function (s) { results.push(s); }, predicate, object, graph);
    return results;
  }

  // ### `forSubjects` executes the callback on all subjects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forSubjects(callback, predicate, object, graph) {
    // Convert terms to internal string representation
    predicate = predicate && toId(predicate);
    object = object && toId(object);
    graph = graph && toId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, predicateId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(predicate) && !(predicateId = ids[predicate]) ||
        isString(object)    && !(objectId    = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (predicateId) {
          if (objectId)
            // If predicate and object are given, the POS index is best.
            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);
          else
            // If only predicate is given, the SPO index is best.
            this._loopByKey1(content.subjects, predicateId, callback);
        }
        else if (objectId)
          // If only object is given, the OSP index is best.
          this._loopByKey0(content.objects, objectId, callback);
        else
          // If no params given, iterate all the subjects
          this._loop(content.subjects, callback);
      }
    }
  }

  // ### `getPredicates` returns all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getPredicates(subject, object, graph) {
    var results = [];
    this.forPredicates(function (p) { results.push(p); }, subject, object, graph);
    return results;
  }

  // ### `forPredicates` executes the callback on all predicates that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forPredicates(callback, subject, object, graph) {
    // Convert terms to internal string representation
    subject = subject && toId(subject);
    object = object && toId(object);
    graph = graph && toId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, objectId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject) && !(subjectId = ids[subject]) ||
        isString(object)  && !(objectId  = ids[object]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (objectId)
            // If subject and object are given, the OSP index is best.
            this._loopBy2Keys(content.objects, objectId, subjectId, callback);
          else
            // If only subject is given, the SPO index is best.
            this._loopByKey0(content.subjects, subjectId, callback);
        }
        else if (objectId)
          // If only object is given, the POS index is best.
          this._loopByKey1(content.predicates, objectId, callback);
        else
          // If no params given, iterate all the predicates.
          this._loop(content.predicates, callback);
      }
    }
  }

  // ### `getObjects` returns all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getObjects(subject, predicate, graph) {
    var results = [];
    this.forObjects(function (o) { results.push(o); }, subject, predicate, graph);
    return results;
  }

  // ### `forObjects` executes the callback on all objects that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forObjects(callback, subject, predicate, graph) {
    // Convert terms to internal string representation
    subject = subject && toId(subject);
    predicate = predicate && toId(predicate);
    graph = graph && toId(graph);

    var ids = this._ids, graphs = this._getGraphs(graph), content, subjectId, predicateId;
    callback = this._uniqueEntities(callback);

    // Translate IRIs to internal index keys.
    if (isString(subject)   && !(subjectId   = ids[subject]) ||
        isString(predicate) && !(predicateId = ids[predicate]))
      return;

    for (graph in graphs) {
      // Only if the specified graph contains triples, there can be results
      if (content = graphs[graph]) {
        // Choose optimal index based on which fields are wildcards
        if (subjectId) {
          if (predicateId)
            // If subject and predicate are given, the SPO index is best.
            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);
          else
            // If only subject is given, the OSP index is best.
            this._loopByKey1(content.objects, subjectId, callback);
        }
        else if (predicateId)
          // If only predicate is given, the POS index is best.
          this._loopByKey0(content.predicates, predicateId, callback);
        else
          // If no params given, iterate all the objects.
          this._loop(content.objects, callback);
      }
    }
  }

  // ### `getGraphs` returns all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  getGraphs(subject, predicate, object) {
    var results = [];
    this.forGraphs(function (g) { results.push(g); }, subject, predicate, object);
    return results;
  }

  // ### `forGraphs` executes the callback on all graphs that match the pattern.
  // Setting any field to `undefined` or `null` indicates a wildcard.
  forGraphs(callback, subject, predicate, object) {
    for (var graph in this._graphs) {
      this.some(function (quad) {
        callback(quad.graph);
        return true; // Halt iteration of some()
      }, subject, predicate, object, graph);
    }
  }

  // ### `createBlankNode` creates a new blank node, returning its name
  createBlankNode(suggestedName) {
    var name, index;
    // Generate a name based on the suggested name
    if (suggestedName) {
      name = suggestedName = '_:' + suggestedName, index = 1;
      while (this._ids[name])
        name = suggestedName + index++;
    }
    // Generate a generic blank node name
    else {
      do { name = '_:b' + this._blankNodeIndex++; }
      while (this._ids[name]);
    }
    // Add the blank node to the entities, avoiding the generation of duplicates
    this._ids[name] = ++this._id;
    this._entities[this._id] = name;
    return this._factory.blankNode(name.substr(2));
  }

  // ### `extractLists` finds and removes all list triples
  // and returns the items per list.
  extractLists({ remove = false, ignoreErrors = false } = {}) {
    var lists = {}; // has scalar keys so could be a simple Object
    var onError = ignoreErrors ? (() => true) :
                  ((node, message) => { throw new Error(`${node.value} ${message}`); });

    // Traverse each list from its tail
    var tails = this.getQuads(null, _IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.rest, _IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.nil, null);
    var toRemove = remove ? [...tails] : [];
    tails.forEach(tailQuad => {
      var items = [];             // the members found as objects of rdf:first quads
      var malformed = false;      // signals whether the current list is malformed
      var head;                   // the head of the list (_:b1 in above example)
      var headPos;                // set to subject or object when head is set
      var graph = tailQuad.graph; // make sure list is in exactly one graph

      // Traverse the list from tail to end
      var current = tailQuad.subject;
      while (current && !malformed) {
        var objectQuads = this.getQuads(null, null, current, null);
        var subjectQuads = this.getQuads(current, null, null, null);
        var i, quad, first = null, rest = null, parent = null;

        // Find the first and rest of this list node
        for (i = 0; i < subjectQuads.length && !malformed; i++) {
          quad = subjectQuads[i];
          if (!quad.graph.equals(graph))
            malformed = onError(current, 'not confined to single graph');
          else if (head)
            malformed = onError(current, 'has non-list arcs out');

          // one rdf:first
          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.first) {
            if (first)
              malformed = onError(current, 'has multiple rdf:first arcs');
            else
              toRemove.push(first = quad);
          }

          // one rdf:rest
          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.rest) {
            if (rest)
              malformed = onError(current, 'has multiple rdf:rest arcs');
            else
              toRemove.push(rest = quad);
          }

          // alien triple
          else if (objectQuads.length)
            malformed = onError(current, 'can\'t be subject and object');
          else {
            head = quad; // e.g. { (1 2 3) :p :o }
            headPos = 'subject';
          }
        }

        // { :s :p (1 2) } arrives here with no head
        // { (1 2) :p :o } arrives here with head set to the list.
        for (i = 0; i < objectQuads.length && !malformed; ++i) {
          quad = objectQuads[i];
          if (head)
            malformed = onError(current, 'can\'t have coreferences');
          // one rdf:rest
          else if (quad.predicate.value === _IRIs__WEBPACK_IMPORTED_MODULE_2__["default"].rdf.rest) {
            if (parent)
              malformed = onError(current, 'has incoming rdf:rest arcs');
            else
              parent = quad;
          }
          else {
            head = quad; // e.g. { :s :p (1 2) }
            headPos = 'object';
          }
        }

        // Store the list item and continue with parent
        if (!first)
          malformed = onError(current, 'has no list head');
        else
          items.unshift(first.object);
        current = parent && parent.subject;
      }

      // Don't remove any quads if the list is malformed
      if (malformed)
        remove = false;
      // Store the list under the value of its head
      else if (head)
        lists[head[headPos].value] = items;
    });

    // Remove list quads if requested
    if (remove)
      this.removeQuads(toRemove);
    return lists;
  }
}

// Determines whether the argument is a string
function isString(s) {
  return typeof s === 'string' || s instanceof String;
}


/***/ }),

/***/ "../node_modules/n3/src/N3StreamParser.js":
/*!************************************************!*\
  !*** ../node_modules/n3/src/N3StreamParser.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3StreamParser; });
/* harmony import */ var _N3Parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3Parser */ "../node_modules/n3/src/N3Parser.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stream */ "../node_modules/readable-stream/readable-browser.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_1__);
// **N3StreamParser** parses a text stream into a quad stream.



// ## Constructor
class N3StreamParser extends stream__WEBPACK_IMPORTED_MODULE_1__["Transform"] {
  constructor(options) {
    super({ decodeStrings: true });
    this._readableState.objectMode = true;

    // Set up parser with dummy stream to obtain `data` and `end` callbacks
    var self = this, parser = new _N3Parser__WEBPACK_IMPORTED_MODULE_0__["default"](options), onData, onEnd;
    parser.parse({
      on: function (event, callback) {
        switch (event) {
        case 'data': onData = callback; break;
        case 'end':   onEnd = callback; break;
        }
      },
    },
      // Handle quads by pushing them down the pipeline
      function (error, quad) { error && self.emit('error', error) || quad && self.push(quad); },
      // Emit prefixes through the `prefix` event
      function (prefix, uri) { self.emit('prefix', prefix, uri); }
    );

    // Implement Transform methods through parser callbacks
    this._transform = function (chunk, encoding, done) { onData(chunk); done(); };
    this._flush = function (done) { onEnd(); done(); };
  }

  // ### Parses a stream of strings
  import(stream) {
    var self = this;
    stream.on('data',  function (chunk) { self.write(chunk); });
    stream.on('end',   function ()      { self.end(); });
    stream.on('error', function (error) { self.emit('error', error); });
    return this;
  }
}


/***/ }),

/***/ "../node_modules/n3/src/N3StreamWriter.js":
/*!************************************************!*\
  !*** ../node_modules/n3/src/N3StreamWriter.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3StreamWriter; });
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ "../node_modules/readable-stream/readable-browser.js");
/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(stream__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _N3Writer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3Writer */ "../node_modules/n3/src/N3Writer.js");
// **N3StreamWriter** serializes a quad stream into a text stream.



// ## Constructor
class N3StreamWriter extends stream__WEBPACK_IMPORTED_MODULE_0__["Transform"] {
  constructor(options) {
    super({ encoding: 'utf8' });
    this._writableState.objectMode = true;

    // Set up writer with a dummy stream object
    var self = this;
    var writer = this._writer = new _N3Writer__WEBPACK_IMPORTED_MODULE_1__["default"]({
      write: function (quad, encoding, callback) { self.push(quad); callback && callback(); },
      end: function (callback) { self.push(null); callback && callback(); },
    }, options);

    // Implement Transform methods on top of writer
    this._transform = function (quad, encoding, done) { writer.addQuad(quad, done); };
    this._flush = function (done) { writer.end(done); };
  }

// ### Serializes a stream of quads
  import(stream) {
    var self = this;
    stream.on('data',   function (quad)  { self.write(quad); });
    stream.on('end',    function ()      { self.end(); });
    stream.on('error',  function (error) { self.emit('error', error); });
    stream.on('prefix', function (prefix, iri) { self._writer.addPrefix(prefix, iri); });
    return this;
  }
}


/***/ }),

/***/ "../node_modules/n3/src/N3Util.js":
/*!****************************************!*\
  !*** ../node_modules/n3/src/N3Util.js ***!
  \****************************************/
/*! exports provided: isNamedNode, isBlankNode, isLiteral, isVariable, isDefaultGraph, inDefaultGraph, prefix, prefixes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNamedNode", function() { return isNamedNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBlankNode", function() { return isBlankNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLiteral", function() { return isLiteral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isVariable", function() { return isVariable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDefaultGraph", function() { return isDefaultGraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inDefaultGraph", function() { return inDefaultGraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prefix", function() { return prefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prefixes", function() { return prefixes; });
/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ "../node_modules/n3/src/N3DataFactory.js");
// **N3Util** provides N3 utility functions.



// Tests whether the given term represents an IRI
function isNamedNode(term) {
  return !!term && term.termType === 'NamedNode';
}

// Tests whether the given term represents a blank node
function isBlankNode(term) {
  return !!term && term.termType === 'BlankNode';
}

// Tests whether the given term represents a literal
function isLiteral(term) {
  return !!term && term.termType === 'Literal';
}

// Tests whether the given term represents a variable
function isVariable(term) {
  return !!term && term.termType === 'Variable';
}

// Tests whether the given term represents the default graph
function isDefaultGraph(term) {
  return !!term && term.termType === 'DefaultGraph';
}

// Tests whether the given quad is in the default graph
function inDefaultGraph(quad) {
  return isDefaultGraph(quad.graph);
}

// Creates a function that prepends the given IRI to a local name
function prefix(iri, factory) {
  return prefixes({ '': iri }, factory)('');
}

// Creates a function that allows registering and expanding prefixes
function prefixes(defaultPrefixes, factory) {
  // Add all of the default prefixes
  var prefixes = Object.create(null);
  for (var prefix in defaultPrefixes)
    processPrefix(prefix, defaultPrefixes[prefix]);
  // Set the default factory if none was specified
  factory = factory || _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__["default"];

  // Registers a new prefix (if an IRI was specified)
  // or retrieves a function that expands an existing prefix (if no IRI was specified)
  function processPrefix(prefix, iri) {
    // Create a new prefix if an IRI is specified or the prefix doesn't exist
    if (typeof iri === 'string') {
      // Create a function that expands the prefix
      var cache = Object.create(null);
      prefixes[prefix] = function (local) {
        return cache[local] || (cache[local] = factory.namedNode(iri + local));
      };
    }
    else if (!(prefix in prefixes)) {
      throw new Error('Unknown prefix: ' + prefix);
    }
    return prefixes[prefix];
  }
  return processPrefix;
}


/***/ }),

/***/ "../node_modules/n3/src/N3Writer.js":
/*!******************************************!*\
  !*** ../node_modules/n3/src/N3Writer.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return N3Writer; });
/* harmony import */ var _IRIs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IRIs */ "../node_modules/n3/src/IRIs.js");
/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3DataFactory */ "../node_modules/n3/src/N3DataFactory.js");
// **N3Writer** writes N3 documents.



const DEFAULTGRAPH = _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__["default"].defaultGraph();

const { rdf, xsd } = _IRIs__WEBPACK_IMPORTED_MODULE_0__["default"];

// Characters in literals that require escaping
var escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapedCharacters = {
      '\\': '\\\\', '"': '\\"', '\t': '\\t',
      '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f',
    };

// ## Placeholder class to represent already pretty-printed terms
class SerializedTerm extends _N3DataFactory__WEBPACK_IMPORTED_MODULE_1__["default"].internal.Term {
  // Pretty-printed nodes are not equal to any other node
  // (e.g., [] does not equal [])
  equals() {
    return false;
  }
}

// ## Constructor
class N3Writer {
  constructor(outputStream, options) {
    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    this._prefixRegex = /$0^/;

    // Shift arguments if the first argument is not a stream
    if (outputStream && typeof outputStream.write !== 'function')
      options = outputStream, outputStream = null;
    options = options || {};
    this._lists = options.lists;

    // If no output stream given, send the output as string through the end callback
    if (!outputStream) {
      var output = '';
      this._outputStream = {
        write(chunk, encoding, done) { output += chunk; done && done(); },
        end:   function (done) { done && done(null, output); },
      };
      this._endStream = true;
    }
    else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    }

    // Initialize writer, depending on the format
    this._subject = null;
    if (!(/triple|quad/i).test(options.format)) {
      this._graph = DEFAULTGRAPH;
      this._prefixIRIs = Object.create(null);
      options.prefixes && this.addPrefixes(options.prefixes);
    }
    else {
      this._writeQuad = this._writeQuadLine;
    }
  }

  // ## Private methods

  // ### Whether the current graph is the default graph
  get _inDefaultGraph() {
    return DEFAULTGRAPH.equals(this._graph);
  }

  // ### `_write` writes the argument to the output stream
  _write(string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  }

  // ### `_writeQuad` writes the quad to the output stream
  _writeQuad(subject, predicate, object, graph, done) {
    try {
      // Write the graph's label if it has changed
      if (!graph.equals(this._graph)) {
        // Close the previous graph and start the new one
        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\n' : '\n}\n')) +
                    (DEFAULTGRAPH.equals(graph) ? '' : this._encodeIriOrBlank(graph) + ' {\n'));
        this._graph = graph;
        this._subject = null;
      }
      // Don't repeat the subject if it's the same
      if (subject.equals(this._subject)) {
        // Don't repeat the predicate if it's the same
        if (predicate.equals(this._predicate))
          this._write(', ' + this._encodeObject(object), done);
        // Same subject, different predicate
        else
          this._write(';\n    ' +
                      this._encodePredicate(this._predicate = predicate) + ' ' +
                      this._encodeObject(object), done);
      }
      // Different subject; write the whole quad
      else
        this._write((this._subject === null ? '' : '.\n') +
                    this._encodeIriOrBlank(this._subject = subject) + ' ' +
                    this._encodePredicate(this._predicate = predicate) + ' ' +
                    this._encodeObject(object), done);
    }
    catch (error) { done && done(error); }
  }

  // ### `_writeQuadLine` writes the quad to the output stream as a single line
  _writeQuadLine(subject, predicate, object, graph, done) {
    // Write the quad without prefixes
    delete this._prefixMatch;
    this._write(this.quadToString(subject, predicate, object, graph), done);
  }

  // ### `quadToString` serializes a quad as a string
  quadToString(subject, predicate, object, graph) {
    return  this._encodeIriOrBlank(subject)   + ' ' +
            this._encodeIriOrBlank(predicate) + ' ' +
            this._encodeObject(object) +
            (graph && graph.value ? ' ' + this._encodeIriOrBlank(graph) + ' .\n' : ' .\n');
  }

  // ### `quadsToString` serializes an array of quads as a string
  quadsToString(quads) {
    return quads.map(function (t) {
      return this.quadToString(t.subject, t.predicate, t.object, t.graph);
    }, this).join('');
  }

  // ### `_encodeIriOrBlank` represents an IRI or blank node
  _encodeIriOrBlank(entity) {
    // A blank node or list is represented as-is
    if (entity.termType !== 'NamedNode') {
      // If it is a list head, pretty-print it
      if (this._lists && (entity.value in this._lists))
        entity = this.list(this._lists[entity.value]);
      return 'id' in entity ? entity.id : '_:' + entity.value;
    }
    // Escape special characters
    var iri = entity.value;
    if (escape.test(iri))
      iri = iri.replace(escapeAll, characterReplacer);
    // Try to represent the IRI as prefixed name
    var prefixMatch = this._prefixRegex.exec(iri);
    return !prefixMatch ? '<' + iri + '>' :
           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);
  }

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral(literal) {
    // Escape special characters
    var value = literal.value;
    if (escape.test(value))
      value = value.replace(escapeAll, characterReplacer);
    // Write the literal, possibly with type or language
    if (literal.language)
      return '"' + value + '"@' + literal.language;
    else if (literal.datatype.value !== xsd.string)
      return '"' + value + '"^^' + this._encodeIriOrBlank(literal.datatype);
    else
      return '"' + value + '"';
  }

  // ### `_encodePredicate` represents a predicate
  _encodePredicate(predicate) {
    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);
  }

  // ### `_encodeObject` represents an object
  _encodeObject(object) {
    return object.termType === 'Literal' ? this._encodeLiteral(object) : this._encodeIriOrBlank(object);
  }

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite() {
    throw new Error('Cannot write because the writer has been closed.');
  }

  // ### `addQuad` adds the quad to the output stream
  addQuad(subject, predicate, object, graph, done) {
    // The quad was given as an object, so shift parameters
    if (object === undefined)
      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);
    // The optional `graph` parameter was not provided
    else if (typeof graph === 'function')
      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);
    // The `graph` parameter was provided
    else
      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);
  }

  // ### `addQuads` adds the quads to the output stream
  addQuads(quads) {
    for (var i = 0; i < quads.length; i++)
      this.addQuad(quads[i]);
  }

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix(prefix, iri, done) {
    var prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  }

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes(prefixes, done) {
    var prefixIRIs = this._prefixIRIs, hasPrefixes = false;
    for (var prefix in prefixes) {
      var iri = prefixes[prefix];
      if (typeof iri !== 'string')
        iri = iri.value;
      hasPrefixes = true;
      // Finish a possible pending quad
      if (this._subject !== null) {
        this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
        this._subject = null, this._graph = '';
      }
      // Store and write the prefix
      prefixIRIs[iri] = (prefix += ':');
      this._write('@prefix ' + prefix + ' <' + iri + '>.\n');
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      var IRIlist = '', prefixList = '';
      for (var prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  }

  // ### `blank` creates a blank node with the given content
  blank(predicate, object) {
    var children = predicate, child, length;
    // Empty blank node
    if (predicate === undefined)
      children = [];
    // Blank node passed as blank(Term("predicate"), Term("object"))
    else if (predicate.termType)
      children = [{ predicate: predicate, object: object }];
    // Blank node passed as blank({ predicate: predicate, object: object })
    else if (!('length' in predicate))
      children = [predicate];

    switch (length = children.length) {
    // Generate an empty blank node
    case 0:
      return new SerializedTerm('[]');
    // Generate a non-nested one-triple blank node
    case 1:
      child = children[0];
      if (!(child.object instanceof SerializedTerm))
        return new SerializedTerm('[ ' + this._encodePredicate(child.predicate) + ' ' +
                                  this._encodeObject(child.object) + ' ]');
    // Generate a multi-triple or nested blank node
    default:
      var contents = '[';
      // Write all triples in order
      for (var i = 0; i < length; i++) {
        child = children[i];
        // Write only the object is the predicate is the same as the previous
        if (child.predicate.equals(predicate))
          contents += ', ' + this._encodeObject(child.object);
        // Otherwise, write the predicate and the object
        else {
          contents += (i ? ';\n  ' : '\n  ') +
                      this._encodePredicate(child.predicate) + ' ' +
                      this._encodeObject(child.object);
          predicate = child.predicate;
        }
      }
      return new SerializedTerm(contents + '\n]');
    }
  }

  // ### `list` creates a list node with the given content
  list(elements) {
    var length = elements && elements.length || 0, contents = new Array(length);
    for (var i = 0; i < length; i++)
      contents[i] = this._encodeObject(elements[i]);
    return new SerializedTerm('(' + contents.join(' ') + ')');
  }

  // ### `end` signals the end of the output stream
  end(done) {
    // Finish a possible pending quad
    if (this._subject !== null) {
      this._write(this._inDefaultGraph ? '.\n' : '\n}\n');
      this._subject = null;
    }
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    var singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  }
}

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  var result = escapedCharacters[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}


/***/ }),

/***/ "../node_modules/n3/src/index.js":
/*!***************************************!*\
  !*** ../node_modules/n3/src/index.js ***!
  \***************************************/
/*! exports provided: DataFactory, Lexer, Parser, Writer, Store, StreamParser, StreamWriter, Util */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./N3DataFactory */ "../node_modules/n3/src/N3DataFactory.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataFactory", function() { return _N3DataFactory__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _N3Lexer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./N3Lexer */ "../node_modules/n3/src/N3Lexer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Lexer", function() { return _N3Lexer__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _N3Parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./N3Parser */ "../node_modules/n3/src/N3Parser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Parser", function() { return _N3Parser__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _N3Writer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./N3Writer */ "../node_modules/n3/src/N3Writer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Writer", function() { return _N3Writer__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _N3Store__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./N3Store */ "../node_modules/n3/src/N3Store.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return _N3Store__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _N3StreamParser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./N3StreamParser */ "../node_modules/n3/src/N3StreamParser.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StreamParser", function() { return _N3StreamParser__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _N3StreamWriter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./N3StreamWriter */ "../node_modules/n3/src/N3StreamWriter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StreamWriter", function() { return _N3StreamWriter__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _N3Util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./N3Util */ "../node_modules/n3/src/N3Util.js");
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "Util", function() { return _N3Util__WEBPACK_IMPORTED_MODULE_7__; });












/***/ }),

/***/ "../node_modules/node-forge/lib/baseN.js":
/*!***********************************************!*\
  !*** ../node_modules/node-forge/lib/baseN.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
var api = {};
module.exports = api;

// baseN alphabet indexes
var _reverseAlphabets = {};

/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */
api.encode = function(input, alphabet, maxline) {
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }
  if(maxline !== undefined && typeof maxline !== 'number') {
    throw new TypeError('"maxline" must be a number.');
  }

  var output = '';

  if(!(input instanceof Uint8Array)) {
    // assume forge byte buffer
    output = _encodeWithByteBuffer(input, alphabet);
  } else {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [0];
    for(i = 0; i < input.length; ++i) {
      for(var j = 0, carry = input[i]; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % base;
        carry = (carry / base) | 0;
      }

      while(carry > 0) {
        digits.push(carry % base);
        carry = (carry / base) | 0;
      }
    }

    // deal with leading zeros
    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {
      output += first;
    }
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i) {
      output += alphabet[digits[i]];
    }
  }

  if(maxline) {
    var regex = new RegExp('.{1,' + maxline + '}', 'g');
    output = output.match(regex).join('\r\n');
  }

  return output;
};

/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */
api.decode = function(input, alphabet) {
  if(typeof input !== 'string') {
    throw new TypeError('"input" must be a string.');
  }
  if(typeof alphabet !== 'string') {
    throw new TypeError('"alphabet" must be a string.');
  }

  var table = _reverseAlphabets[alphabet];
  if(!table) {
    // compute reverse alphabet
    table = _reverseAlphabets[alphabet] = [];
    for(var i = 0; i < alphabet.length; ++i) {
      table[alphabet.charCodeAt(i)] = i;
    }
  }

  // remove whitespace characters
  input = input.replace(/\s/g, '');

  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var bytes = [0];
  for(var i = 0; i < input.length; i++) {
    var value = table[input.charCodeAt(i)];
    if(value === undefined) {
      return;
    }

    for(var j = 0, carry = value; j < bytes.length; ++j) {
      carry += bytes[j] * base;
      bytes[j] = carry & 0xff;
      carry >>= 8;
    }

    while(carry > 0) {
      bytes.push(carry & 0xff);
      carry >>= 8;
    }
  }

  // deal with leading zeros
  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {
    bytes.push(0);
  }

  if(typeof Buffer !== 'undefined') {
    return Buffer.from(bytes.reverse());
  }

  return new Uint8Array(bytes.reverse());
};

function _encodeWithByteBuffer(input, alphabet) {
  var i = 0;
  var base = alphabet.length;
  var first = alphabet.charAt(0);
  var digits = [0];
  for(i = 0; i < input.length(); ++i) {
    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {
      carry += digits[j] << 8;
      digits[j] = carry % base;
      carry = (carry / base) | 0;
    }

    while(carry > 0) {
      digits.push(carry % base);
      carry = (carry / base) | 0;
    }
  }

  var output = '';

  // deal with leading zeros
  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
    output += first;
  }
  // convert digits to a string
  for(i = digits.length - 1; i >= 0; --i) {
    output += alphabet[digits[i]];
  }

  return output;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../node_modules/node-forge/lib/forge.js":
/*!***********************************************!*\
  !*** ../node_modules/node-forge/lib/forge.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */
module.exports = {
  // default options
  options: {
    usePureJavaScript: false
  }
};


/***/ }),

/***/ "../node_modules/node-forge/lib/md.js":
/*!********************************************!*\
  !*** ../node_modules/node-forge/lib/md.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(/*! ./forge */ "../node_modules/node-forge/lib/forge.js");

module.exports = forge.md = forge.md || {};
forge.md.algorithms = forge.md.algorithms || {};


/***/ }),

/***/ "../node_modules/node-forge/lib/sha1.js":
/*!**********************************************!*\
  !*** ../node_modules/node-forge/lib/sha1.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(/*! ./forge */ "../node_modules/node-forge/lib/forge.js");
__webpack_require__(/*! ./md */ "../node_modules/node-forge/lib/md.js");
__webpack_require__(/*! ./util */ "../node_modules/node-forge/lib/util.js");

var sha1 = module.exports = forge.sha1 = forge.sha1 || {};
forge.md.sha1 = forge.md.algorithms.sha1 = sha1;

/**
 * Creates a SHA-1 message digest object.
 *
 * @return a message digest object.
 */
sha1.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-1 state contains five 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(80);

  // message digest object
  var md = {
    algorithm: 'sha1',
    blockLength: 64,
    digestLength: 20,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x67452301,
      h1: 0xEFCDAB89,
      h2: 0x98BADCFE,
      h3: 0x10325476,
      h4: 0xC3D2E1F0
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-1 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    return rval;
  };

  return md;
};

// sha-1 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-1 state with the given byte buffer.
 *
 * @param s the SHA-1 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t, a, b, c, d, e, f, i;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 80 32-bit words according to SHA-1 algorithm
    // and for 32-79 using Max Locktyukhin's optimization

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;

    // round 1
    for(i = 0; i < 16; ++i) {
      t = bytes.getInt32();
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 20; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = d ^ (b & (c ^ d));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 2
    for(; i < 32; ++i) {
      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
      t = (t << 1) | (t >>> 31);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    for(; i < 40; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 3
    for(; i < 60; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = (b & c) | (d & (b ^ c));
      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }
    // round 4
    for(; i < 80; ++i) {
      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
      t = (t << 2) | (t >>> 30);
      w[i] = t;
      f = b ^ c ^ d;
      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
      e = d;
      d = c;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      c = ((b << 30) | (b >>> 2)) >>> 0;
      b = a;
      a = t;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;

    len -= 64;
  }
}


/***/ }),

/***/ "../node_modules/node-forge/lib/sha256.js":
/*!************************************************!*\
  !*** ../node_modules/node-forge/lib/sha256.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
 *
 * See FIPS 180-2 for details.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(/*! ./forge */ "../node_modules/node-forge/lib/forge.js");
__webpack_require__(/*! ./md */ "../node_modules/node-forge/lib/md.js");
__webpack_require__(/*! ./util */ "../node_modules/node-forge/lib/util.js");

var sha256 = module.exports = forge.sha256 = forge.sha256 || {};
forge.md.sha256 = forge.md.algorithms.sha256 = sha256;

/**
 * Creates a SHA-256 message digest object.
 *
 * @return a message digest object.
 */
sha256.create = function() {
  // do initialization as necessary
  if(!_initialized) {
    _init();
  }

  // SHA-256 state contains eight 32-bit integers
  var _state = null;

  // input buffer
  var _input = forge.util.createBuffer();

  // used for word storage
  var _w = new Array(64);

  // message digest object
  var md = {
    algorithm: 'sha256',
    blockLength: 64,
    digestLength: 32,
    // 56-bit length of message so far (does not including padding)
    messageLength: 0,
    // true message length
    fullMessageLength: null,
    // size of message length in bytes
    messageLengthSize: 8
  };

  /**
   * Starts the digest.
   *
   * @return this digest object.
   */
  md.start = function() {
    // up to 56-bit message length for convenience
    md.messageLength = 0;

    // full message length (set md.messageLength64 for backwards-compatibility)
    md.fullMessageLength = md.messageLength64 = [];
    var int32s = md.messageLengthSize / 4;
    for(var i = 0; i < int32s; ++i) {
      md.fullMessageLength.push(0);
    }
    _input = forge.util.createBuffer();
    _state = {
      h0: 0x6A09E667,
      h1: 0xBB67AE85,
      h2: 0x3C6EF372,
      h3: 0xA54FF53A,
      h4: 0x510E527F,
      h5: 0x9B05688C,
      h6: 0x1F83D9AB,
      h7: 0x5BE0CD19
    };
    return md;
  };
  // start digest automatically for first time
  md.start();

  /**
   * Updates the digest with the given message input. The given input can
   * treated as raw input (no encoding will be applied) or an encoding of
   * 'utf8' maybe given to encode the input using UTF-8.
   *
   * @param msg the message input to update with.
   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
   *
   * @return this digest object.
   */
  md.update = function(msg, encoding) {
    if(encoding === 'utf8') {
      msg = forge.util.encodeUtf8(msg);
    }

    // update message length
    var len = msg.length;
    md.messageLength += len;
    len = [(len / 0x100000000) >>> 0, len >>> 0];
    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
      md.fullMessageLength[i] += len[1];
      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
      len[0] = ((len[1] / 0x100000000) >>> 0);
    }

    // add bytes to input buffer
    _input.putBytes(msg);

    // process bytes
    _update(_state, _w, _input);

    // compact input buffer every 2K or if empty
    if(_input.read > 2048 || _input.length() === 0) {
      _input.compact();
    }

    return md;
  };

  /**
   * Produces the digest.
   *
   * @return a byte buffer containing the digest value.
   */
  md.digest = function() {
    /* Note: Here we copy the remaining bytes in the input buffer and
    add the appropriate SHA-256 padding. Then we do the final update
    on a copy of the state so that if the user wants to get
    intermediate digests they can do so. */

    /* Determine the number of bytes that must be added to the message
    to ensure its length is congruent to 448 mod 512. In other words,
    the data to be digested must be a multiple of 512 bits (or 128 bytes).
    This data includes the message, some padding, and the length of the
    message. Since the length of the message will be encoded as 8 bytes (64
    bits), that means that the last segment of the data must have 56 bytes
    (448 bits) of message and padding. Therefore, the length of the message
    plus the padding must be congruent to 448 mod 512 because
    512 - 128 = 448.

    In order to fill up the message length it must be filled with
    padding that begins with 1 bit followed by all 0 bits. Padding
    must *always* be present, so if the message length is already
    congruent to 448 mod 512, then 512 padding bits must be added. */

    var finalBlock = forge.util.createBuffer();
    finalBlock.putBytes(_input.bytes());

    // compute remaining size to be digested (include message length size)
    var remaining = (
      md.fullMessageLength[md.fullMessageLength.length - 1] +
      md.messageLengthSize);

    // add padding for overflow blockSize - overflow
    // _padding starts with 1 byte with first bit is set (byte value 128), then
    // there may be up to (blockSize - 1) other pad bytes
    var overflow = remaining & (md.blockLength - 1);
    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

    // serialize message length in bits in big-endian order; since length
    // is stored in bytes we multiply by 8 and add carry from next int
    var next, carry;
    var bits = md.fullMessageLength[0] * 8;
    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
      next = md.fullMessageLength[i + 1] * 8;
      carry = (next / 0x100000000) >>> 0;
      bits += carry;
      finalBlock.putInt32(bits >>> 0);
      bits = next >>> 0;
    }
    finalBlock.putInt32(bits);

    var s2 = {
      h0: _state.h0,
      h1: _state.h1,
      h2: _state.h2,
      h3: _state.h3,
      h4: _state.h4,
      h5: _state.h5,
      h6: _state.h6,
      h7: _state.h7
    };
    _update(s2, _w, finalBlock);
    var rval = forge.util.createBuffer();
    rval.putInt32(s2.h0);
    rval.putInt32(s2.h1);
    rval.putInt32(s2.h2);
    rval.putInt32(s2.h3);
    rval.putInt32(s2.h4);
    rval.putInt32(s2.h5);
    rval.putInt32(s2.h6);
    rval.putInt32(s2.h7);
    return rval;
  };

  return md;
};

// sha-256 padding bytes not initialized yet
var _padding = null;
var _initialized = false;

// table of constants
var _k = null;

/**
 * Initializes the constant tables.
 */
function _init() {
  // create padding
  _padding = String.fromCharCode(128);
  _padding += forge.util.fillString(String.fromCharCode(0x00), 64);

  // create K table for SHA-256
  _k = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

  // now initialized
  _initialized = true;
}

/**
 * Updates a SHA-256 state with the given byte buffer.
 *
 * @param s the SHA-256 state to update.
 * @param w the array to use to store words.
 * @param bytes the byte buffer to update with.
 */
function _update(s, w, bytes) {
  // consume 512 bit (64 byte) chunks
  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
  var len = bytes.length();
  while(len >= 64) {
    // the w array will be populated with sixteen 32-bit big-endian words
    // and then extended into 64 32-bit words according to SHA-256
    for(i = 0; i < 16; ++i) {
      w[i] = bytes.getInt32();
    }
    for(; i < 64; ++i) {
      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
      t1 = w[i - 2];
      t1 =
        ((t1 >>> 17) | (t1 << 15)) ^
        ((t1 >>> 19) | (t1 << 13)) ^
        (t1 >>> 10);
      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
      t2 = w[i - 15];
      t2 =
        ((t2 >>> 7) | (t2 << 25)) ^
        ((t2 >>> 18) | (t2 << 14)) ^
        (t2 >>> 3);
      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
    }

    // initialize hash value for this chunk
    a = s.h0;
    b = s.h1;
    c = s.h2;
    d = s.h3;
    e = s.h4;
    f = s.h5;
    g = s.h6;
    h = s.h7;

    // round function
    for(i = 0; i < 64; ++i) {
      // Sum1(e)
      s1 =
        ((e >>> 6) | (e << 26)) ^
        ((e >>> 11) | (e << 21)) ^
        ((e >>> 25) | (e << 7));
      // Ch(e, f, g) (optimized the same way as SHA-1)
      ch = g ^ (e & (f ^ g));
      // Sum0(a)
      s0 =
        ((a >>> 2) | (a << 30)) ^
        ((a >>> 13) | (a << 19)) ^
        ((a >>> 22) | (a << 10));
      // Maj(a, b, c) (optimized the same way as SHA-1)
      maj = (a & b) | (c & (a ^ b));

      // main algorithm
      t1 = h + s1 + ch + _k[i] + w[i];
      t2 = s0 + maj;
      h = g;
      g = f;
      f = e;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      e = (d + t1) >>> 0;
      d = c;
      c = b;
      b = a;
      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
      // can't truncate with `| 0`
      a = (t1 + t2) >>> 0;
    }

    // update hash state
    s.h0 = (s.h0 + a) | 0;
    s.h1 = (s.h1 + b) | 0;
    s.h2 = (s.h2 + c) | 0;
    s.h3 = (s.h3 + d) | 0;
    s.h4 = (s.h4 + e) | 0;
    s.h5 = (s.h5 + f) | 0;
    s.h6 = (s.h6 + g) | 0;
    s.h7 = (s.h7 + h) | 0;
    len -= 64;
  }
}


/***/ }),

/***/ "../node_modules/node-forge/lib/util.js":
/*!**********************************************!*\
  !*** ../node_modules/node-forge/lib/util.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, setImmediate, global, Buffer) {/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */
var forge = __webpack_require__(/*! ./forge */ "../node_modules/node-forge/lib/forge.js");
var baseN = __webpack_require__(/*! ./baseN */ "../node_modules/node-forge/lib/baseN.js");

/* Utilities API */
var util = module.exports = forge.util = forge.util || {};

// define setImmediate and nextTick
(function() {
  // use native nextTick (unless we're in webpack)
  // webpack (or better node-libs-browser polyfill) sets process.browser.
  // this way we can detect webpack properly
  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {
    util.nextTick = process.nextTick;
    if(typeof setImmediate === 'function') {
      util.setImmediate = setImmediate;
    } else {
      // polyfill setImmediate with nextTick, older versions of node
      // (those w/o setImmediate) won't totally starve IO
      util.setImmediate = util.nextTick;
    }
    return;
  }

  // polyfill nextTick with native setImmediate
  if(typeof setImmediate === 'function') {
    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
    util.nextTick = function(callback) {
      return setImmediate(callback);
    };
    return;
  }

  /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */

  // polyfill with setTimeout
  util.setImmediate = function(callback) {
    setTimeout(callback, 0);
  };

  // upgrade polyfill to use postMessage
  if(typeof window !== 'undefined' &&
    typeof window.postMessage === 'function') {
    var msg = 'forge.setImmediate';
    var callbacks = [];
    util.setImmediate = function(callback) {
      callbacks.push(callback);
      // only send message when one hasn't been sent in
      // the current turn of the event loop
      if(callbacks.length === 1) {
        window.postMessage(msg, '*');
      }
    };
    function handler(event) {
      if(event.source === window && event.data === msg) {
        event.stopPropagation();
        var copy = callbacks.slice();
        callbacks.length = 0;
        copy.forEach(function(callback) {
          callback();
        });
      }
    }
    window.addEventListener('message', handler, true);
  }

  // upgrade polyfill to use MutationObserver
  if(typeof MutationObserver !== 'undefined') {
    // polyfill with MutationObserver
    var now = Date.now();
    var attr = true;
    var div = document.createElement('div');
    var callbacks = [];
    new MutationObserver(function() {
      var copy = callbacks.slice();
      callbacks.length = 0;
      copy.forEach(function(callback) {
        callback();
      });
    }).observe(div, {attributes: true});
    var oldSetImmediate = util.setImmediate;
    util.setImmediate = function(callback) {
      if(Date.now() - now > 15) {
        now = Date.now();
        oldSetImmediate(callback);
      } else {
        callbacks.push(callback);
        // only trigger observer when it hasn't been triggered in
        // the current turn of the event loop
        if(callbacks.length === 1) {
          div.setAttribute('a', attr = !attr);
        }
      }
    };
  }

  util.nextTick = util.setImmediate;
})();

// check if running under Node.js
util.isNodejs =
  typeof process !== 'undefined' && process.versions && process.versions.node;


// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.
util.globalScope = (function() {
  if(util.isNodejs) {
    return global;
  }

  return typeof self === 'undefined' ? window : self;
})();

// define isArray
util.isArray = Array.isArray || function(x) {
  return Object.prototype.toString.call(x) === '[object Array]';
};

// define isArrayBuffer
util.isArrayBuffer = function(x) {
  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
};

// define isArrayBufferView
util.isArrayBufferView = function(x) {
  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};

/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */
function _checkBitsParam(n) {
  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {
    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
  }
}

// TODO: set ByteBuffer to best available backing
util.ByteBuffer = ByteStringBuffer;

/** Buffer w/BinaryString backing */

/**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */
function ByteStringBuffer(b) {
  // TODO: update to match DataBuffer API

  // the data in this buffer
  this.data = '';
  // the pointer for reading from this buffer
  this.read = 0;

  if(typeof b === 'string') {
    this.data = b;
  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {
    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {
      this.data = b.toString('binary');
    } else {
      // convert native buffer to forge buffer
      // FIXME: support native buffers internally instead
      var arr = new Uint8Array(b);
      try {
        this.data = String.fromCharCode.apply(null, arr);
      } catch(e) {
        for(var i = 0; i < arr.length; ++i) {
          this.putByte(arr[i]);
        }
      }
    }
  } else if(b instanceof ByteStringBuffer ||
    (typeof b === 'object' && typeof b.data === 'string' &&
    typeof b.read === 'number')) {
    // copy existing buffer
    this.data = b.data;
    this.read = b.read;
  }

  // used for v8 optimization
  this._constructedStringLength = 0;
}
util.ByteStringBuffer = ByteStringBuffer;

/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */
var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
  this._constructedStringLength += x;
  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
    // this substr() should cause the constructed string to join
    this.data.substr(0, 1);
    this._constructedStringLength = 0;
  }
};

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.ByteStringBuffer.prototype.length = function() {
  return this.data.length - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.ByteStringBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putByte = function(b) {
  return this.putBytes(String.fromCharCode(b));
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
  b = String.fromCharCode(b);
  var d = this.data;
  while(n > 0) {
    if(n & 1) {
      d += b;
    }
    n >>>= 1;
    if(n > 0) {
      b += b;
    }
  }
  this.data = d;
  this._optimizeConstructedString(n);
  return this;
};

/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBytes = function(bytes) {
  this.data += bytes;
  this._optimizeConstructedString(bytes.length);
  return this;
};

/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putString = function(str) {
  return this.putBytes(util.encodeUtf8(str));
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32 = function(i) {
  return this.putBytes(
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt16Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF));
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt24Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF));
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt32Le = function(i) {
  return this.putBytes(
    String.fromCharCode(i & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 24 & 0xFF));
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  var bytes = '';
  do {
    n -= 8;
    bytes += String.fromCharCode((i >> n) & 0xFF);
  } while(n > 0);
  return this.putBytes(bytes);
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
  // putInt checks n
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
  return this.putBytes(buffer.getBytes());
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.getByte = function() {
  return this.data.charCodeAt(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 8 ^
    this.data.charCodeAt(this.read + 1));
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 16 ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32 = function() {
  var rval = (
    this.data.charCodeAt(this.read) << 24 ^
    this.data.charCodeAt(this.read + 1) << 16 ^
    this.data.charCodeAt(this.read + 2) << 8 ^
    this.data.charCodeAt(this.read + 3));
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.ByteStringBuffer.prototype.getInt16Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.ByteStringBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.ByteStringBuffer.prototype.getInt32Le = function() {
  var rval = (
    this.data.charCodeAt(this.read) ^
    this.data.charCodeAt(this.read + 1) << 8 ^
    this.data.charCodeAt(this.read + 2) << 16 ^
    this.data.charCodeAt(this.read + 3) << 24);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.charCodeAt(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.ByteStringBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.ByteStringBuffer.prototype.getBytes = function(count) {
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.ByteStringBuffer.prototype.bytes = function(count) {
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.ByteStringBuffer.prototype.at = function(i) {
  return this.data.charCodeAt(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.setAt = function(i, b) {
  this.data = this.data.substr(0, this.read + i) +
    String.fromCharCode(b) +
    this.data.substr(this.read + i + 1);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.ByteStringBuffer.prototype.last = function() {
  return this.data.charCodeAt(this.data.length - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.ByteStringBuffer.prototype.copy = function() {
  var c = util.createBuffer(this.data);
  c.read = this.read;
  return c;
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.compact = function() {
  if(this.read > 0) {
    this.data = this.data.slice(this.read);
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.clear = function() {
  this.data = '';
  this.read = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.ByteStringBuffer.prototype.truncate = function(count) {
  var len = Math.max(0, this.length() - count);
  this.data = this.data.substr(this.read, len);
  this.read = 0;
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.ByteStringBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.length; ++i) {
    var b = this.data.charCodeAt(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */
util.ByteStringBuffer.prototype.toString = function() {
  return util.decodeUtf8(this.bytes());
};

/** End Buffer w/BinaryString backing */

/** Buffer w/UInt8Array backing */

/**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */
function DataBuffer(b, options) {
  // default options
  options = options || {};

  // pointers for read from/write to buffer
  this.read = options.readOffset || 0;
  this.growSize = options.growSize || 1024;

  var isArrayBuffer = util.isArrayBuffer(b);
  var isArrayBufferView = util.isArrayBufferView(b);
  if(isArrayBuffer || isArrayBufferView) {
    // use ArrayBuffer directly
    if(isArrayBuffer) {
      this.data = new DataView(b);
    } else {
      // TODO: adjust read/write offset based on the type of view
      // or specify that this must be done in the options ... that the
      // offsets are byte-based
      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
    }
    this.write = ('writeOffset' in options ?
      options.writeOffset : this.data.byteLength);
    return;
  }

  // initialize to empty array buffer and add any given bytes using putBytes
  this.data = new DataView(new ArrayBuffer(0));
  this.write = 0;

  if(b !== null && b !== undefined) {
    this.putBytes(b);
  }

  if('writeOffset' in options) {
    this.write = options.writeOffset;
  }
}
util.DataBuffer = DataBuffer;

/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */
util.DataBuffer.prototype.length = function() {
  return this.write - this.read;
};

/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */
util.DataBuffer.prototype.isEmpty = function() {
  return this.length() <= 0;
};

/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */
util.DataBuffer.prototype.accommodate = function(amount, growSize) {
  if(this.length() >= amount) {
    return this;
  }
  growSize = Math.max(growSize || this.growSize, amount);

  // grow buffer
  var src = new Uint8Array(
    this.data.buffer, this.data.byteOffset, this.data.byteLength);
  var dst = new Uint8Array(this.length() + growSize);
  dst.set(src);
  this.data = new DataView(dst.buffer);

  return this;
};

/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putByte = function(b) {
  this.accommodate(1);
  this.data.setUint8(this.write++, b);
  return this;
};

/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.fillWithByte = function(b, n) {
  this.accommodate(n);
  for(var i = 0; i < n; ++i) {
    this.data.setUint8(b);
  }
  return this;
};

/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
  if(util.isArrayBufferView(bytes)) {
    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    var len = src.byteLength - src.byteOffset;
    this.accommodate(len);
    var dst = new Uint8Array(this.data.buffer, this.write);
    dst.set(src);
    this.write += len;
    return this;
  }

  if(util.isArrayBuffer(bytes)) {
    var src = new Uint8Array(bytes);
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(this.data.buffer);
    dst.set(src, this.write);
    this.write += src.byteLength;
    return this;
  }

  // bytes is a util.DataBuffer or equivalent
  if(bytes instanceof util.DataBuffer ||
    (typeof bytes === 'object' &&
    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
    util.isArrayBufferView(bytes.data))) {
    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
    this.accommodate(src.byteLength);
    var dst = new Uint8Array(bytes.data.byteLength, this.write);
    dst.set(src);
    this.write += src.byteLength;
    return this;
  }

  if(bytes instanceof util.ByteStringBuffer) {
    // copy binary string and process as the same as a string parameter below
    bytes = bytes.data;
    encoding = 'binary';
  }

  // string conversion
  encoding = encoding || 'binary';
  if(typeof bytes === 'string') {
    var view;

    // decode from string
    if(encoding === 'hex') {
      this.accommodate(Math.ceil(bytes.length / 2));
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.hex.decode(bytes, view, this.write);
      return this;
    }
    if(encoding === 'base64') {
      this.accommodate(Math.ceil(bytes.length / 4) * 3);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.base64.decode(bytes, view, this.write);
      return this;
    }

    // encode text as UTF-8 bytes
    if(encoding === 'utf8') {
      // encode as UTF-8 then decode string as raw binary
      bytes = util.encodeUtf8(bytes);
      encoding = 'binary';
    }

    // decode string as raw binary
    if(encoding === 'binary' || encoding === 'raw') {
      // one byte per character
      this.accommodate(bytes.length);
      view = new Uint8Array(this.data.buffer, this.write);
      this.write += util.binary.raw.decode(view);
      return this;
    }

    // encode text as UTF-16 bytes
    if(encoding === 'utf16') {
      // two bytes per character
      this.accommodate(bytes.length * 2);
      view = new Uint16Array(this.data.buffer, this.write);
      this.write += util.text.utf16.encode(view);
      return this;
    }

    throw new Error('Invalid encoding: ' + encoding);
  }

  throw Error('Invalid parameter: ' + bytes);
};

/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putBuffer = function(buffer) {
  this.putBytes(buffer);
  buffer.clear();
  return this;
};

/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putString = function(str) {
  return this.putBytes(str, 'utf16');
};

/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16 = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24 = function(i) {
  this.accommodate(3);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32 = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i);
  this.write += 4;
  return this;
};

/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt16Le = function(i) {
  this.accommodate(2);
  this.data.setInt16(this.write, i, true);
  this.write += 2;
  return this;
};

/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt24Le = function(i) {
  this.accommodate(3);
  this.data.setInt8(this.write, i >> 16 & 0xFF);
  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
  this.write += 3;
  return this;
};

/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt32Le = function(i) {
  this.accommodate(4);
  this.data.setInt32(this.write, i, true);
  this.write += 4;
  return this;
};

/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  do {
    n -= 8;
    this.data.setInt8(this.write++, (i >> n) & 0xFF);
  } while(n > 0);
  return this;
};

/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.putSignedInt = function(i, n) {
  _checkBitsParam(n);
  this.accommodate(n / 8);
  if(i < 0) {
    i += 2 << (n - 1);
  }
  return this.putInt(i, n);
};

/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.getByte = function() {
  return this.data.getInt8(this.read++);
};

/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16 = function() {
  var rval = this.data.getInt16(this.read);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24 = function() {
  var rval = (
    this.data.getInt16(this.read) << 8 ^
    this.data.getInt8(this.read + 2));
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32 = function() {
  var rval = this.data.getInt32(this.read);
  this.read += 4;
  return rval;
};

/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */
util.DataBuffer.prototype.getInt16Le = function() {
  var rval = this.data.getInt16(this.read, true);
  this.read += 2;
  return rval;
};

/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */
util.DataBuffer.prototype.getInt24Le = function() {
  var rval = (
    this.data.getInt8(this.read) ^
    this.data.getInt16(this.read + 1, true) << 8);
  this.read += 3;
  return rval;
};

/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */
util.DataBuffer.prototype.getInt32Le = function() {
  var rval = this.data.getInt32(this.read, true);
  this.read += 4;
  return rval;
};

/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getInt = function(n) {
  _checkBitsParam(n);
  var rval = 0;
  do {
    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
    rval = (rval << 8) + this.data.getInt8(this.read++);
    n -= 8;
  } while(n > 0);
  return rval;
};

/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */
util.DataBuffer.prototype.getSignedInt = function(n) {
  // getInt checks n
  var x = this.getInt(n);
  var max = 2 << (n - 2);
  if(x >= max) {
    x -= max << 1;
  }
  return x;
};

/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */
util.DataBuffer.prototype.getBytes = function(count) {
  // TODO: deprecate this method, it is poorly named and
  // this.toString('binary') replaces it
  // add a toTypedArray()/toArrayBuffer() function
  var rval;
  if(count) {
    // read count bytes
    count = Math.min(this.length(), count);
    rval = this.data.slice(this.read, this.read + count);
    this.read += count;
  } else if(count === 0) {
    rval = '';
  } else {
    // read all bytes, optimize to only copy when needed
    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
    this.clear();
  }
  return rval;
};

/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */
util.DataBuffer.prototype.bytes = function(count) {
  // TODO: deprecate this method, it is poorly named, add "getString()"
  return (typeof(count) === 'undefined' ?
    this.data.slice(this.read) :
    this.data.slice(this.read, this.read + count));
};

/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */
util.DataBuffer.prototype.at = function(i) {
  return this.data.getUint8(this.read + i);
};

/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.setAt = function(i, b) {
  this.data.setUint8(i, b);
  return this;
};

/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */
util.DataBuffer.prototype.last = function() {
  return this.data.getUint8(this.write - 1);
};

/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */
util.DataBuffer.prototype.copy = function() {
  return new util.DataBuffer(this);
};

/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.compact = function() {
  if(this.read > 0) {
    var src = new Uint8Array(this.data.buffer, this.read);
    var dst = new Uint8Array(src.byteLength);
    dst.set(src);
    this.data = new DataView(dst);
    this.write -= this.read;
    this.read = 0;
  }
  return this;
};

/**
 * Clears this buffer.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.clear = function() {
  this.data = new DataView(new ArrayBuffer(0));
  this.read = this.write = 0;
  return this;
};

/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */
util.DataBuffer.prototype.truncate = function(count) {
  this.write = Math.max(0, this.length() - count);
  this.read = Math.min(this.read, this.write);
  return this;
};

/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */
util.DataBuffer.prototype.toHex = function() {
  var rval = '';
  for(var i = this.read; i < this.data.byteLength; ++i) {
    var b = this.data.getUint8(i);
    if(b < 16) {
      rval += '0';
    }
    rval += b.toString(16);
  }
  return rval;
};

/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */
util.DataBuffer.prototype.toString = function(encoding) {
  var view = new Uint8Array(this.data, this.read, this.length());
  encoding = encoding || 'utf8';

  // encode to string
  if(encoding === 'binary' || encoding === 'raw') {
    return util.binary.raw.encode(view);
  }
  if(encoding === 'hex') {
    return util.binary.hex.encode(view);
  }
  if(encoding === 'base64') {
    return util.binary.base64.encode(view);
  }

  // decode to text
  if(encoding === 'utf8') {
    return util.text.utf8.decode(view);
  }
  if(encoding === 'utf16') {
    return util.text.utf16.decode(view);
  }

  throw new Error('Invalid encoding: ' + encoding);
};

/** End Buffer w/UInt8Array backing */

/**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */
util.createBuffer = function(input, encoding) {
  // TODO: deprecate, use new ByteBuffer() instead
  encoding = encoding || 'raw';
  if(input !== undefined && encoding === 'utf8') {
    input = util.encodeUtf8(input);
  }
  return new util.ByteBuffer(input);
};

/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */
util.fillString = function(c, n) {
  var s = '';
  while(n > 0) {
    if(n & 1) {
      s += c;
    }
    n >>>= 1;
    if(n > 0) {
      c += c;
    }
  }
  return s;
};

/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */
util.xorBytes = function(s1, s2, n) {
  var s3 = '';
  var b = '';
  var t = '';
  var i = 0;
  var c = 0;
  for(; n > 0; --n, ++i) {
    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
    if(c >= 10) {
      s3 += t;
      t = '';
      c = 0;
    }
    t += String.fromCharCode(b);
    ++c;
  }
  s3 += t;
  return s3;
};

/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */
util.hexToBytes = function(hex) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
  var rval = '';
  var i = 0;
  if(hex.length & 1 == 1) {
    // odd number of characters, convert first character alone
    i = 1;
    rval += String.fromCharCode(parseInt(hex[0], 16));
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  }
  return rval;
};

/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.bytesToHex = function(bytes) {
  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
  return util.createBuffer(bytes).toHex();
};

/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */
util.int32ToBytes = function(i) {
  return (
    String.fromCharCode(i >> 24 & 0xFF) +
    String.fromCharCode(i >> 16 & 0xFF) +
    String.fromCharCode(i >> 8 & 0xFF) +
    String.fromCharCode(i & 0xFF));
};

// base64 characters, reverse mapping
var _base64 =
  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var _base64Idx = [
/*43 -43 = 0*/
/*'+',  1,  2,  3,'/' */
   62, -1, -1, -1, 63,

/*'0','1','2','3','4','5','6','7','8','9' */
   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

/*15, 16, 17,'=', 19, 20, 21 */
  -1, -1, -1, 64, -1, -1, -1,

/*65 - 43 = 22*/
/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

/*91 - 43 = 48 */
/*48, 49, 50, 51, 52, 53 */
  -1, -1, -1, -1, -1, -1,

/*97 - 43 = 54*/
/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
];

// base58 characters (Bitcoin alphabet)
var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */
util.encode64 = function(input, maxline) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.length) {
    chr1 = input.charCodeAt(i++);
    chr2 = input.charCodeAt(i++);
    chr3 = input.charCodeAt(i++);

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */
util.decode64 = function(input) {
  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  var output = '';
  var enc1, enc2, enc3, enc4;
  var i = 0;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
      if(enc4 !== 64) {
        // decoded 3 bytes
        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
      }
    }
  }

  return output;
};

/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */
util.encodeUtf8 = function(str) {
  return unescape(encodeURIComponent(str));
};

/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */
util.decodeUtf8 = function(str) {
  return decodeURIComponent(escape(str));
};

// binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.binary = {
  raw: {},
  hex: {},
  base64: {},
  base58: {},
  baseN : {
    encode: baseN.encode,
    decode: baseN.decode
  }
};

/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */
util.binary.raw.encode = function(bytes) {
  return String.fromCharCode.apply(null, bytes);
};

/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.raw.decode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */
util.binary.hex.encode = util.bytesToHex;

/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.hex.decode = function(hex, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(hex.length / 2));
  }
  offset = offset || 0;
  var i = 0, j = offset;
  if(hex.length & 1) {
    // odd number of characters, convert first character alone
    i = 1;
    out[j++] = parseInt(hex[0], 16);
  }
  // convert 2 characters (1 byte) at a time
  for(; i < hex.length; i += 2) {
    out[j++] = parseInt(hex.substr(i, 2), 16);
  }
  return output ? (j - offset) : out;
};

/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */
util.binary.base64.encode = function(input, maxline) {
  var line = '';
  var output = '';
  var chr1, chr2, chr3;
  var i = 0;
  while(i < input.byteLength) {
    chr1 = input[i++];
    chr2 = input[i++];
    chr3 = input[i++];

    // encode 4 character group
    line += _base64.charAt(chr1 >> 2);
    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
    if(isNaN(chr2)) {
      line += '==';
    } else {
      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
    }

    if(maxline && line.length > maxline) {
      output += line.substr(0, maxline) + '\r\n';
      line = line.substr(maxline);
    }
  }
  output += line;
  return output;
};

/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.binary.base64.decode = function(input, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
  }

  // remove all non-base64 characters
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

  offset = offset || 0;
  var enc1, enc2, enc3, enc4;
  var i = 0, j = offset;

  while(i < input.length) {
    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

    out[j++] = (enc1 << 2) | (enc2 >> 4);
    if(enc3 !== 64) {
      // decoded at least 2 bytes
      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
      if(enc4 !== 64) {
        // decoded 3 bytes
        out[j++] = ((enc3 & 3) << 6) | enc4;
      }
    }
  }

  // make sure result is the exact decoded length
  return output ? (j - offset) : out.subarray(0, j);
};

// add support for base58 encoding/decoding with Bitcoin alphabet
util.binary.base58.encode = function(input, maxline) {
  return util.binary.baseN.encode(input, _base58, maxline);
};
util.binary.base58.decode = function(input, maxline) {
  return util.binary.baseN.decode(input, _base58, maxline);
};

// text encoding/decoding tools
// FIXME: Experimental. Do not use yet.
util.text = {
  utf8: {},
  utf16: {}
};

/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf8.encode = function(str, output, offset) {
  str = util.encodeUtf8(str);
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length);
  }
  offset = offset || 0;
  var j = offset;
  for(var i = 0; i < str.length; ++i) {
    out[j++] = str.charCodeAt(i);
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf8.decode = function(bytes) {
  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};

/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */
util.text.utf16.encode = function(str, output, offset) {
  var out = output;
  if(!out) {
    out = new Uint8Array(str.length * 2);
  }
  var view = new Uint16Array(out.buffer);
  offset = offset || 0;
  var j = offset;
  var k = offset;
  for(var i = 0; i < str.length; ++i) {
    view[k++] = str.charCodeAt(i);
    j += 2;
  }
  return output ? (j - offset) : out;
};

/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */
util.text.utf16.decode = function(bytes) {
  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};

/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */
util.deflate = function(api, bytes, raw) {
  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);

  // strip zlib header and trailer if necessary
  if(raw) {
    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
    // there is a 4-byte DICT (alder-32) block before the data if
    // its 5th bit is set
    var start = 2;
    var flg = bytes.charCodeAt(1);
    if(flg & 0x20) {
      start = 6;
    }
    // zlib trailer is 4 bytes of adler-32
    bytes = bytes.substring(start, bytes.length - 4);
  }

  return bytes;
};

/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */
util.inflate = function(api, bytes, raw) {
  // TODO: add zlib header and trailer if necessary/possible
  var rval = api.inflate(util.encode64(bytes)).rval;
  return (rval === null) ? null : util.decode64(rval);
};

/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */
var _setStorageObject = function(api, id, obj) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  var rval;
  if(obj === null) {
    rval = api.removeItem(id);
  } else {
    // json-encode and base64-encode object
    obj = util.encode64(JSON.stringify(obj));
    rval = api.setItem(id, obj);
  }

  // handle potential flash error
  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
    var error = new Error(rval.error.message);
    error.id = rval.error.id;
    error.name = rval.error.name;
    throw error;
  }
};

/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */
var _getStorageObject = function(api, id) {
  if(!api) {
    throw new Error('WebStorage not available.');
  }

  // get the existing entry
  var rval = api.getItem(id);

  /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */

  // flash returns item wrapped in an object, handle special case
  if(api.init) {
    if(rval.rval === null) {
      if(rval.error) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
      }
      // no error, but also no item
      rval = null;
    } else {
      rval = rval.rval;
    }
  }

  // handle decoding
  if(rval !== null) {
    // base64-decode and json-decode data
    rval = JSON.parse(util.decode64(rval));
  }

  return rval;
};

/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */
var _setItem = function(api, id, key, data) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj === null) {
    // create a new storage object
    obj = {};
  }
  // update key
  obj[key] = data;

  // set storage object
  _setStorageObject(api, id, obj);
};

/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */
var _getItem = function(api, id, key) {
  // get storage object
  var rval = _getStorageObject(api, id);
  if(rval !== null) {
    // return data at key
    rval = (key in rval) ? rval[key] : null;
  }

  return rval;
};

/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */
var _removeItem = function(api, id, key) {
  // get storage object
  var obj = _getStorageObject(api, id);
  if(obj !== null && key in obj) {
    // remove key
    delete obj[key];

    // see if entry has no keys remaining
    var empty = true;
    for(var prop in obj) {
      empty = false;
      break;
    }
    if(empty) {
      // remove entry entirely if no keys are left
      obj = null;
    }

    // set storage object
    _setStorageObject(api, id, obj);
  }
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */
var _clearItems = function(api, id) {
  _setStorageObject(api, id, null);
};

/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */
var _callStorageFunction = function(func, args, location) {
  var rval = null;

  // default storage types
  if(typeof(location) === 'undefined') {
    location = ['web', 'flash'];
  }

  // apply storage types in order of preference
  var type;
  var done = false;
  var exception = null;
  for(var idx in location) {
    type = location[idx];
    try {
      if(type === 'flash' || type === 'both') {
        if(args[0] === null) {
          throw new Error('Flash local storage not available.');
        }
        rval = func.apply(this, args);
        done = (type === 'flash');
      }
      if(type === 'web' || type === 'both') {
        args[0] = localStorage;
        rval = func.apply(this, args);
        done = true;
      }
    } catch(ex) {
      exception = ex;
    }
    if(done) {
      break;
    }
  }

  if(!done) {
    throw exception;
  }

  return rval;
};

/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */
util.setItem = function(api, id, key, data, location) {
  _callStorageFunction(_setItem, arguments, location);
};

/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */
util.getItem = function(api, id, key, location) {
  return _callStorageFunction(_getItem, arguments, location);
};

/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */
util.removeItem = function(api, id, key, location) {
  _callStorageFunction(_removeItem, arguments, location);
};

/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */
util.clearItems = function(api, id, location) {
  _callStorageFunction(_clearItems, arguments, location);
};

/**
 * Parses the scheme, host, and port from an http(s) url.
 *
 * @param str the url string.
 *
 * @return the parsed url object or null if the url is invalid.
 */
util.parseUrl = function(str) {
  // FIXME: this regex looks a bit broken
  var regex = /^(https?):\/\/([^:&^\/]*):?(\d*)(.*)$/g;
  regex.lastIndex = 0;
  var m = regex.exec(str);
  var url = (m === null) ? null : {
    full: str,
    scheme: m[1],
    host: m[2],
    port: m[3],
    path: m[4]
  };
  if(url) {
    url.fullHost = url.host;
    if(url.port) {
      if(url.port !== 80 && url.scheme === 'http') {
        url.fullHost += ':' + url.port;
      } else if(url.port !== 443 && url.scheme === 'https') {
        url.fullHost += ':' + url.port;
      }
    } else if(url.scheme === 'http') {
      url.port = 80;
    } else if(url.scheme === 'https') {
      url.port = 443;
    }
    url.full = url.scheme + '://' + url.fullHost;
  }
  return url;
};

/* Storage for query variables */
var _queryVariables = null;

/**
 * Returns the window location query variables. Query is parsed on the first
 * call and the same object is returned on subsequent calls. The mapping
 * is from keys to an array of values. Parameters without values will have
 * an object key set but no value added to the value array. Values are
 * unescaped.
 *
 * ...?k1=v1&k2=v2:
 * {
 *   "k1": ["v1"],
 *   "k2": ["v2"]
 * }
 *
 * ...?k1=v1&k1=v2:
 * {
 *   "k1": ["v1", "v2"]
 * }
 *
 * ...?k1=v1&k2:
 * {
 *   "k1": ["v1"],
 *   "k2": []
 * }
 *
 * ...?k1=v1&k1:
 * {
 *   "k1": ["v1"]
 * }
 *
 * ...?k1&k1:
 * {
 *   "k1": []
 * }
 *
 * @param query the query string to parse (optional, default to cached
 *          results from parsing window location search query).
 *
 * @return object mapping keys to variables.
 */
util.getQueryVariables = function(query) {
  var parse = function(q) {
    var rval = {};
    var kvpairs = q.split('&');
    for(var i = 0; i < kvpairs.length; i++) {
      var pos = kvpairs[i].indexOf('=');
      var key;
      var val;
      if(pos > 0) {
        key = kvpairs[i].substring(0, pos);
        val = kvpairs[i].substring(pos + 1);
      } else {
        key = kvpairs[i];
        val = null;
      }
      if(!(key in rval)) {
        rval[key] = [];
      }
      // disallow overriding object prototype keys
      if(!(key in Object.prototype) && val !== null) {
        rval[key].push(unescape(val));
      }
    }
    return rval;
  };

   var rval;
   if(typeof(query) === 'undefined') {
     // set cached variables if needed
     if(_queryVariables === null) {
       if(typeof(window) !== 'undefined' && window.location && window.location.search) {
          // parse window search query
          _queryVariables = parse(window.location.search.substring(1));
       } else {
          // no query variables available
          _queryVariables = {};
       }
     }
     rval = _queryVariables;
   } else {
     // parse given query
     rval = parse(query);
   }
   return rval;
};

/**
 * Parses a fragment into a path and query. This method will take a URI
 * fragment and break it up as if it were the main URI. For example:
 *    /bar/baz?a=1&b=2
 * results in:
 *    {
 *       path: ["bar", "baz"],
 *       query: {"k1": ["v1"], "k2": ["v2"]}
 *    }
 *
 * @return object with a path array and query object.
 */
util.parseFragment = function(fragment) {
  // default to whole fragment
  var fp = fragment;
  var fq = '';
  // split into path and query if possible at the first '?'
  var pos = fragment.indexOf('?');
  if(pos > 0) {
    fp = fragment.substring(0, pos);
    fq = fragment.substring(pos + 1);
  }
  // split path based on '/' and ignore first element if empty
  var path = fp.split('/');
  if(path.length > 0 && path[0] === '') {
    path.shift();
  }
  // convert query into object
  var query = (fq === '') ? {} : util.getQueryVariables(fq);

  return {
    pathString: fp,
    queryString: fq,
    path: path,
    query: query
  };
};

/**
 * Makes a request out of a URI-like request string. This is intended to
 * be used where a fragment id (after a URI '#') is parsed as a URI with
 * path and query parts. The string should have a path beginning and
 * delimited by '/' and optional query parameters following a '?'. The
 * query should be a standard URL set of key value pairs delimited by
 * '&'. For backwards compatibility the initial '/' on the path is not
 * required. The request object has the following API, (fully described
 * in the method code):
 *    {
 *       path: <the path string part>.
 *       query: <the query string part>,
 *       getPath(i): get part or all of the split path array,
 *       getQuery(k, i): get part or all of a query key array,
 *       getQueryLast(k, _default): get last element of a query key array.
 *    }
 *
 * @return object with request parameters.
 */
util.makeRequest = function(reqString) {
  var frag = util.parseFragment(reqString);
  var req = {
    // full path string
    path: frag.pathString,
    // full query string
    query: frag.queryString,
    /**
     * Get path or element in path.
     *
     * @param i optional path index.
     *
     * @return path or part of path if i provided.
     */
    getPath: function(i) {
      return (typeof(i) === 'undefined') ? frag.path : frag.path[i];
    },
    /**
     * Get query, values for a key, or value for a key index.
     *
     * @param k optional query key.
     * @param i optional query key index.
     *
     * @return query, values for a key, or value for a key index.
     */
    getQuery: function(k, i) {
      var rval;
      if(typeof(k) === 'undefined') {
        rval = frag.query;
      } else {
        rval = frag.query[k];
        if(rval && typeof(i) !== 'undefined') {
           rval = rval[i];
        }
      }
      return rval;
    },
    getQueryLast: function(k, _default) {
      var rval;
      var vals = req.getQuery(k);
      if(vals) {
        rval = vals[vals.length - 1];
      } else {
        rval = _default;
      }
      return rval;
    }
  };
  return req;
};

/**
 * Makes a URI out of a path, an object with query parameters, and a
 * fragment. Uses jQuery.param() internally for query string creation.
 * If the path is an array, it will be joined with '/'.
 *
 * @param path string path or array of strings.
 * @param query object with query parameters. (optional)
 * @param fragment fragment string. (optional)
 *
 * @return string object with request parameters.
 */
util.makeLink = function(path, query, fragment) {
  // join path parts if needed
  path = jQuery.isArray(path) ? path.join('/') : path;

  var qstr = jQuery.param(query || {});
  fragment = fragment || '';
  return path +
    ((qstr.length > 0) ? ('?' + qstr) : '') +
    ((fragment.length > 0) ? ('#' + fragment) : '');
};

/**
 * Follows a path of keys deep into an object hierarchy and set a value.
 * If a key does not exist or it's value is not an object, create an
 * object in it's place. This can be destructive to a object tree if
 * leaf nodes are given as non-final path keys.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param value the value to set.
 */
util.setPath = function(object, keys, value) {
  // need to start at an object
  if(typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;
    while(i < len) {
      var next = keys[i++];
      if(i == len) {
        // last
        object[next] = value;
      } else {
        // more
        var hasNext = (next in object);
        if(!hasNext ||
          (hasNext && typeof(object[next]) !== 'object') ||
          (hasNext && object[next] === null)) {
          object[next] = {};
        }
        object = object[next];
      }
    }
  }
};

/**
 * Follows a path of keys deep into an object hierarchy and return a value.
 * If a key does not exist, create an object in it's place.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 * @param _default value to return if path not found.
 *
 * @return the value at the path if found, else default if given, else
 *         undefined.
 */
util.getPath = function(object, keys, _default) {
  var i = 0;
  var len = keys.length;
  var hasNext = true;
  while(hasNext && i < len &&
    typeof(object) === 'object' && object !== null) {
    var next = keys[i++];
    hasNext = next in object;
    if(hasNext) {
      object = object[next];
    }
  }
  return (hasNext ? object : _default);
};

/**
 * Follow a path of keys deep into an object hierarchy and delete the
 * last one. If a key does not exist, do nothing.
 * Used to avoid exceptions from missing parts of the path.
 *
 * @param object the starting object.
 * @param keys an array of string keys.
 */
util.deletePath = function(object, keys) {
  // need to start at an object
  if(typeof(object) === 'object' && object !== null) {
    var i = 0;
    var len = keys.length;
    while(i < len) {
      var next = keys[i++];
      if(i == len) {
        // last
        delete object[next];
      } else {
        // more
        if(!(next in object) ||
          (typeof(object[next]) !== 'object') ||
          (object[next] === null)) {
           break;
        }
        object = object[next];
      }
    }
  }
};

/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */
util.isEmpty = function(obj) {
  for(var prop in obj) {
    if(obj.hasOwnProperty(prop)) {
      return false;
    }
  }
  return true;
};

/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */
util.format = function(format) {
  var re = /%./g;
  // current match
  var match;
  // current part
  var part;
  // current arg index
  var argi = 0;
  // collected parts to recombine later
  var parts = [];
  // last index found
  var last = 0;
  // loop while matches remain
  while((match = re.exec(format))) {
    part = format.substring(last, re.lastIndex - 2);
    // don't add empty strings (ie, parts between %s%s)
    if(part.length > 0) {
      parts.push(part);
    }
    last = re.lastIndex;
    // switch on % code
    var code = match[0][1];
    switch(code) {
    case 's':
    case 'o':
      // check if enough arguments were given
      if(argi < arguments.length) {
        parts.push(arguments[argi++ + 1]);
      } else {
        parts.push('<?>');
      }
      break;
    // FIXME: do proper formating for numbers, etc
    //case 'f':
    //case 'd':
    case '%':
      parts.push('%');
      break;
    default:
      parts.push('<%' + code + '?>');
    }
  }
  // add trailing part of format string
  parts.push(format.substring(last));
  return parts.join('');
};

/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */
util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
  // http://kevin.vanzonneveld.net
  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
  // +     bugfix by: Michael White (http://crestidg.com)
  // +     bugfix by: Benjamin Lupton
  // +     bugfix by: Allan Jensen (http://www.winternet.no)
  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
  // *     example 1: number_format(1234.5678, 2, '.', '');
  // *     returns 1: 1234.57

  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
  var d = dec_point === undefined ? ',' : dec_point;
  var t = thousands_sep === undefined ?
   '.' : thousands_sep, s = n < 0 ? '-' : '';
  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
  var j = (i.length > 3) ? i.length % 3 : 0;
  return s + (j ? i.substr(0, j) + t : '') +
    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
};

/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */
util.formatSize = function(size) {
  if(size >= 1073741824) {
    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
  } else if(size >= 1048576) {
    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
  } else if(size >= 1024) {
    size = util.formatNumber(size / 1024, 0) + ' KiB';
  } else {
    size = util.formatNumber(size, 0) + ' bytes';
  }
  return size;
};

/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */
util.bytesFromIP = function(ip) {
  if(ip.indexOf('.') !== -1) {
    return util.bytesFromIPv4(ip);
  }
  if(ip.indexOf(':') !== -1) {
    return util.bytesFromIPv6(ip);
  }
  return null;
};

/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv4 = function(ip) {
  ip = ip.split('.');
  if(ip.length !== 4) {
    return null;
  }
  var b = util.createBuffer();
  for(var i = 0; i < ip.length; ++i) {
    var num = parseInt(ip[i], 10);
    if(isNaN(num)) {
      return null;
    }
    b.putByte(num);
  }
  return b.getBytes();
};

/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */
util.bytesFromIPv6 = function(ip) {
  var blanks = 0;
  ip = ip.split(':').filter(function(e) {
    if(e.length === 0) ++blanks;
    return true;
  });
  var zeros = (8 - ip.length + blanks) * 2;
  var b = util.createBuffer();
  for(var i = 0; i < 8; ++i) {
    if(!ip[i] || ip[i].length === 0) {
      b.fillWithByte(0, zeros);
      zeros = 0;
      continue;
    }
    var bytes = util.hexToBytes(ip[i]);
    if(bytes.length < 2) {
      b.putByte(0);
    }
    b.putBytes(bytes);
  }
  return b.getBytes();
};

/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */
util.bytesToIP = function(bytes) {
  if(bytes.length === 4) {
    return util.bytesToIPv4(bytes);
  }
  if(bytes.length === 16) {
    return util.bytesToIPv6(bytes);
  }
  return null;
};

/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv4 = function(bytes) {
  if(bytes.length !== 4) {
    return null;
  }
  var ip = [];
  for(var i = 0; i < bytes.length; ++i) {
    ip.push(bytes.charCodeAt(i));
  }
  return ip.join('.');
};

/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */
util.bytesToIPv6 = function(bytes) {
  if(bytes.length !== 16) {
    return null;
  }
  var ip = [];
  var zeroGroups = [];
  var zeroMaxGroup = 0;
  for(var i = 0; i < bytes.length; i += 2) {
    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);
    // canonicalize zero representation
    while(hex[0] === '0' && hex !== '0') {
      hex = hex.substr(1);
    }
    if(hex === '0') {
      var last = zeroGroups[zeroGroups.length - 1];
      var idx = ip.length;
      if(!last || idx !== last.end + 1) {
        zeroGroups.push({start: idx, end: idx});
      } else {
        last.end = idx;
        if((last.end - last.start) >
          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
          zeroMaxGroup = zeroGroups.length - 1;
        }
      }
    }
    ip.push(hex);
  }
  if(zeroGroups.length > 0) {
    var group = zeroGroups[zeroMaxGroup];
    // only shorten group of length > 0
    if(group.end - group.start > 0) {
      ip.splice(group.start, group.end - group.start + 1, '');
      if(group.start === 0) {
        ip.unshift('');
      }
      if(group.end === 7) {
        ip.push('');
      }
    }
  }
  return ip.join(':');
};

/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */
util.estimateCores = function(options, callback) {
  if(typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  if('cores' in util && !options.update) {
    return callback(null, util.cores);
  }
  if(typeof navigator !== 'undefined' &&
    'hardwareConcurrency' in navigator &&
    navigator.hardwareConcurrency > 0) {
    util.cores = navigator.hardwareConcurrency;
    return callback(null, util.cores);
  }
  if(typeof Worker === 'undefined') {
    // workers not available
    util.cores = 1;
    return callback(null, util.cores);
  }
  if(typeof Blob === 'undefined') {
    // can't estimate, default to 2
    util.cores = 2;
    return callback(null, util.cores);
  }

  // create worker concurrency estimation code as blob
  var blobUrl = URL.createObjectURL(new Blob(['(',
    function() {
      self.addEventListener('message', function(e) {
        // run worker for 4 ms
        var st = Date.now();
        var et = st + 4;
        while(Date.now() < et);
        self.postMessage({st: st, et: et});
      });
    }.toString(),
  ')()'], {type: 'application/javascript'}));

  // take 5 samples using 16 workers
  sample([], 5, 16);

  function sample(max, samples, numWorkers) {
    if(samples === 0) {
      // get overlap average
      var avg = Math.floor(max.reduce(function(avg, x) {
        return avg + x;
      }, 0) / max.length);
      util.cores = Math.max(1, avg);
      URL.revokeObjectURL(blobUrl);
      return callback(null, util.cores);
    }
    map(numWorkers, function(err, results) {
      max.push(reduce(numWorkers, results));
      sample(max, samples - 1, numWorkers);
    });
  }

  function map(numWorkers, callback) {
    var workers = [];
    var results = [];
    for(var i = 0; i < numWorkers; ++i) {
      var worker = new Worker(blobUrl);
      worker.addEventListener('message', function(e) {
        results.push(e.data);
        if(results.length === numWorkers) {
          for(var i = 0; i < numWorkers; ++i) {
            workers[i].terminate();
          }
          callback(null, results);
        }
      });
      workers.push(worker);
    }
    for(var i = 0; i < numWorkers; ++i) {
      workers[i].postMessage(i);
    }
  }

  function reduce(numWorkers, results) {
    // find overlapping time windows
    var overlaps = [];
    for(var n = 0; n < numWorkers; ++n) {
      var r1 = results[n];
      var overlap = overlaps[n] = [];
      for(var i = 0; i < numWorkers; ++i) {
        if(n === i) {
          continue;
        }
        var r2 = results[i];
        if((r1.st > r2.st && r1.st < r2.et) ||
          (r2.st > r1.st && r2.st < r1.et)) {
          overlap.push(i);
        }
      }
    }
    // get maximum overlaps ... don't include overlapping worker itself
    // as the main JS process was also being scheduled during the work and
    // would have to be subtracted from the estimate anyway
    return overlaps.reduce(function(max, overlap) {
      return Math.max(max, overlap.length);
    }, 0);
  }
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../../webui/node_modules/timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../../webui/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../webui/node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "../node_modules/queue-microtask/index.js":
/*!************************************************!*\
  !*** ../node_modules/queue-microtask/index.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/AsyncAlgorithm.js":
/*!**********************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/AsyncAlgorithm.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

module.exports = class AsyncAlgorithm {
  constructor({
    maxCallStackDepth = 500,
    maxTotalCallStackDepth = 0xFFFFFFFF,
    // milliseconds
    timeSlice = 10
  } = {}) {
    this.schedule = {};
    this.schedule.MAX_DEPTH = maxCallStackDepth;
    this.schedule.MAX_TOTAL_DEPTH = maxTotalCallStackDepth;
    this.schedule.depth = 0;
    this.schedule.totalDepth = 0;
    this.schedule.timeSlice = timeSlice;
  }

  // do some work in a time slice, but in serial
  doWork(fn, callback) {
    const schedule = this.schedule;

    if(schedule.totalDepth >= schedule.MAX_TOTAL_DEPTH) {
      return callback(new Error(
        'Maximum total call stack depth exceeded; canonicalization aborting.'));
    }

    (function work() {
      if(schedule.depth === schedule.MAX_DEPTH) {
        // stack too deep, run on next tick
        schedule.depth = 0;
        schedule.running = false;
        return util.nextTick(work);
      }

      // if not yet running, force run
      const now = Date.now();
      if(!schedule.running) {
        schedule.start = Date.now();
        schedule.deadline = schedule.start + schedule.timeSlice;
      }

      // TODO: should also include an estimate of expectedWorkTime
      if(now < schedule.deadline) {
        schedule.running = true;
        schedule.depth++;
        schedule.totalDepth++;
        return fn((err, result) => {
          schedule.depth--;
          schedule.totalDepth--;
          callback(err, result);
        });
      }

      // not enough time left in this slice, run after letting browser
      // do some other things
      schedule.depth = 0;
      schedule.running = false;
      util.setImmediate(work);
    })();
  }

  // asynchronously loop
  forEach(iterable, fn, callback) {
    const self = this;
    let iterator;
    let idx = 0;
    let length;
    if(Array.isArray(iterable)) {
      length = iterable.length;
      iterator = () => {
        if(idx === length) {
          return false;
        }
        iterator.value = iterable[idx++];
        iterator.key = idx;
        return true;
      };
    } else {
      const keys = Object.keys(iterable);
      length = keys.length;
      iterator = () => {
        if(idx === length) {
          return false;
        }
        iterator.key = keys[idx++];
        iterator.value = iterable[iterator.key];
        return true;
      };
    }

    (function iterate(err) {
      if(err) {
        return callback(err);
      }
      if(iterator()) {
        return self.doWork(() => fn(iterator.value, iterator.key, iterate));
      }
      callback();
    })();
  }

  // asynchronous waterfall
  waterfall(fns, callback) {
    const self = this;
    self.forEach(
      fns, (fn, idx, callback) => self.doWork(fn, callback), callback);
  }

  // asynchronous while
  whilst(condition, fn, callback) {
    const self = this;
    (function loop(err) {
      if(err) {
        return callback(err);
      }
      if(!condition()) {
        return callback();
      }
      self.doWork(fn, loop);
    })();
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/IdentifierIssuer.js":
/*!************************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/IdentifierIssuer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

module.exports = class IdentifierIssuer {
  /**
   * Creates a new IdentifierIssuer. A IdentifierIssuer issues unique
   * identifiers, keeping track of any previously issued identifiers.
   *
   * @param prefix the prefix to use ('<prefix><counter>').
   */
  constructor(prefix) {
    this.prefix = prefix;
    this.counter = 0;
    this.existing = {};
  }

  /**
   * Copies this IdentifierIssuer.
   *
   * @return a copy of this IdentifierIssuer.
   */
  clone() {
    const copy = new IdentifierIssuer(this.prefix);
    copy.counter = this.counter;
    copy.existing = util.clone(this.existing);
    return copy;
  }

  /**
   * Gets the new identifier for the given old identifier, where if no old
   * identifier is given a new identifier will be generated.
   *
   * @param [old] the old identifier to get the new identifier for.
   *
   * @return the new identifier.
   */
  getId(old) {
    // return existing old identifier
    if(old && old in this.existing) {
      return this.existing[old];
    }

    // get next identifier
    const identifier = this.prefix + this.counter;
    this.counter += 1;

    // save mapping
    if(old) {
      this.existing[old] = identifier;
    }

    return identifier;
  }

  /**
   * Returns true if the given old identifer has already been assigned a new
   * identifier.
   *
   * @param old the old identifier to check.
   *
   * @return true if the old identifier has been assigned a new identifier,
   *   false if not.
   */
  hasId(old) {
    return (old in this.existing);
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/MessageDigest-browser.js":
/*!*****************************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/MessageDigest-browser.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const forge = __webpack_require__(/*! node-forge/lib/forge */ "../node_modules/node-forge/lib/forge.js");
__webpack_require__(/*! node-forge/lib/md */ "../node_modules/node-forge/lib/md.js");
__webpack_require__(/*! node-forge/lib/sha1 */ "../node_modules/node-forge/lib/sha1.js");
__webpack_require__(/*! node-forge/lib/sha256 */ "../node_modules/node-forge/lib/sha256.js");

module.exports = class MessageDigest {
  /**
   * Creates a new MessageDigest.
   *
   * @param algorithm the algorithm to use.
   */
  constructor(algorithm) {
    this.md = forge.md[algorithm].create();
  }

  update(msg) {
    this.md.update(msg, 'utf8');
  }

  digest() {
    return this.md.digest().toHex();
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/NQuads.js":
/*!**************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/NQuads.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const TERMS = ['subject', 'predicate', 'object', 'graph'];
const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
const RDF_LANGSTRING = RDF + 'langString';
const XSD_STRING = 'http://www.w3.org/2001/XMLSchema#string';

// build regexes
const REGEX = {};
(() => {
  const iri = '(?:<([^:]+:[^>]*)>)';
  // https://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL
  const PN_CHARS_BASE =
    'A-Z' + 'a-z' +
    '\u00C0-\u00D6' +
    '\u00D8-\u00F6' +
    '\u00F8-\u02FF' +
    '\u0370-\u037D' +
    '\u037F-\u1FFF' +
    '\u200C-\u200D' +
    '\u2070-\u218F' +
    '\u2C00-\u2FEF' +
    '\u3001-\uD7FF' +
    '\uF900-\uFDCF' +
    '\uFDF0-\uFFFD';
    // TODO:
    //'\u10000-\uEFFFF';
  const PN_CHARS_U =
    PN_CHARS_BASE +
    '_';
  const PN_CHARS =
    PN_CHARS_U +
    '0-9' +
    '-' +
    '\u00B7' +
    '\u0300-\u036F' +
    '\u203F-\u2040';
  const BLANK_NODE_LABEL =
    '(_:' +
      '(?:[' + PN_CHARS_U + '0-9])' +
      '(?:(?:[' + PN_CHARS + '.])*(?:[' + PN_CHARS + ']))?' +
    ')';
  const bnode = BLANK_NODE_LABEL;
  const plain = '"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"';
  const datatype = '(?:\\^\\^' + iri + ')';
  const language = '(?:@([a-zA-Z]+(?:-[a-zA-Z0-9]+)*))';
  const literal = '(?:' + plain + '(?:' + datatype + '|' + language + ')?)';
  const ws = '[ \\t]+';
  const wso = '[ \\t]*';

  // define quad part regexes
  const subject = '(?:' + iri + '|' + bnode + ')' + ws;
  const property = iri + ws;
  const object = '(?:' + iri + '|' + bnode + '|' + literal + ')' + wso;
  const graphName = '(?:\\.|(?:(?:' + iri + '|' + bnode + ')' + wso + '\\.))';

  // end of line and empty regexes
  REGEX.eoln = /(?:\r\n)|(?:\n)|(?:\r)/g;
  REGEX.empty = new RegExp('^' + wso + '$');

  // full quad regex
  REGEX.quad = new RegExp(
    '^' + wso + subject + property + object + graphName + wso + '$');
})();

module.exports = class NQuads {
  /**
   * Parses RDF in the form of N-Quads.
   *
   * @param input the N-Quads input to parse.
   *
   * @return an RDF dataset (an array of quads per http://rdf.js.org/).
   */
  static parse(input) {
    // build RDF dataset
    const dataset = [];

    const graphs = {};

    // split N-Quad input into lines
    const lines = input.split(REGEX.eoln);
    let lineNumber = 0;
    for(const line of lines) {
      lineNumber++;

      // skip empty lines
      if(REGEX.empty.test(line)) {
        continue;
      }

      // parse quad
      const match = line.match(REGEX.quad);
      if(match === null) {
        throw new Error('N-Quads parse error on line ' + lineNumber + '.');
      }

      // create RDF quad
      const quad = {};

      // get subject
      if(match[1] !== undefined) {
        quad.subject = {termType: 'NamedNode', value: match[1]};
      } else {
        quad.subject = {termType: 'BlankNode', value: match[2]};
      }

      // get predicate
      quad.predicate = {termType: 'NamedNode', value: match[3]};

      // get object
      if(match[4] !== undefined) {
        quad.object = {termType: 'NamedNode', value: match[4]};
      } else if(match[5] !== undefined) {
        quad.object = {termType: 'BlankNode', value: match[5]};
      } else {
        quad.object = {
          termType: 'Literal',
          value: undefined,
          datatype: {
            termType: 'NamedNode'
          }
        };
        if(match[7] !== undefined) {
          quad.object.datatype.value = match[7];
        } else if(match[8] !== undefined) {
          quad.object.datatype.value = RDF_LANGSTRING;
          quad.object.language = match[8];
        } else {
          quad.object.datatype.value = XSD_STRING;
        }
        quad.object.value = _unescape(match[6]);
      }

      // get graph
      if(match[9] !== undefined) {
        quad.graph = {
          termType: 'NamedNode',
          value: match[9]
        };
      } else if(match[10] !== undefined) {
        quad.graph = {
          termType: 'BlankNode',
          value: match[10]
        };
      } else {
        quad.graph = {
          termType: 'DefaultGraph',
          value: ''
        };
      }

      // only add quad if it is unique in its graph
      if(!(quad.graph.value in graphs)) {
        graphs[quad.graph.value] = [quad];
        dataset.push(quad);
      } else {
        let unique = true;
        const quads = graphs[quad.graph.value];
        for(const q of quads) {
          if(_compareTriples(q, quad)) {
            unique = false;
            break;
          }
        }
        if(unique) {
          quads.push(quad);
          dataset.push(quad);
        }
      }
    }

    return dataset;
  }

  /**
   * Converts an RDF dataset to N-Quads.
   *
   * @param dataset (array of quads) the RDF dataset to convert.
   *
   * @return the N-Quads string.
   */
  static serialize(dataset) {
    if(!Array.isArray(dataset)) {
      dataset = NQuads.legacyDatasetToQuads(dataset);
    }
    const quads = [];
    for(const quad of dataset) {
      quads.push(NQuads.serializeQuad(quad));
    }
    return quads.sort().join('');
  }

  /**
   * Converts an RDF quad to an N-Quad string (a single quad).
   *
   * @param quad the RDF quad convert.
   *
   * @return the N-Quad string.
   */
  static serializeQuad(quad) {
    const s = quad.subject;
    const p = quad.predicate;
    const o = quad.object;
    const g = quad.graph;

    let nquad = '';

    // subject and predicate can only be NamedNode or BlankNode
    [s, p].forEach(term => {
      if(term.termType === 'NamedNode') {
        nquad += '<' + term.value + '>';
      } else {
        nquad += term.value;
      }
      nquad += ' ';
    });

    // object is NamedNode, BlankNode, or Literal
    if(o.termType === 'NamedNode') {
      nquad += '<' + o.value + '>';
    } else if(o.termType === 'BlankNode') {
      nquad += o.value;
    } else {
      nquad += '"' + _escape(o.value) + '"';
      if(o.datatype.value === RDF_LANGSTRING) {
        if(o.language) {
          nquad += '@' + o.language;
        }
      } else if(o.datatype.value !== XSD_STRING) {
        nquad += '^^<' + o.datatype.value + '>';
      }
    }

    // graph can only be NamedNode or BlankNode (or DefaultGraph, but that
    // does not add to `nquad`)
    if(g.termType === 'NamedNode') {
      nquad += ' <' + g.value + '>';
    } else if(g.termType === 'BlankNode') {
      nquad += ' ' + g.value;
    }

    nquad += ' .\n';
    return nquad;
  }

  /**
   * Converts a legacy-formatted dataset to an array of quads dataset per
   * http://rdf.js.org/.
   *
   * @param dataset the legacy dataset to convert.
   *
   * @return the array of quads dataset.
   */
  static legacyDatasetToQuads(dataset) {
    const quads = [];

    const termTypeMap = {
      'blank node': 'BlankNode',
      'IRI': 'NamedNode',
      'literal': 'Literal'
    };

    for(const graphName in dataset) {
      const triples = dataset[graphName];
      triples.forEach(triple => {
        const quad = {};
        for(const componentName in triple) {
          const oldComponent = triple[componentName];
          const newComponent = {
            termType: termTypeMap[oldComponent.type],
            value: oldComponent.value
          };
          if(newComponent.termType === 'Literal') {
            newComponent.datatype = {
              termType: 'NamedNode'
            };
            if('datatype' in oldComponent) {
              newComponent.datatype.value = oldComponent.datatype;
            }
            if('language' in oldComponent) {
              if(!('datatype' in oldComponent)) {
                newComponent.datatype.value = RDF_LANGSTRING;
              }
              newComponent.language = oldComponent.language;
            } else if(!('datatype' in oldComponent)) {
              newComponent.datatype.value = XSD_STRING;
            }
          }
          quad[componentName] = newComponent;
        }
        if(graphName === '@default') {
          quad.graph = {
            termType: 'DefaultGraph',
            value: ''
          };
        } else {
          quad.graph = {
            termType: graphName.startsWith('_:') ? 'BlankNode' : 'NamedNode',
            value: graphName
          };
        }
        quads.push(quad);
      });
    }

    return quads;
  }
};

/**
 * Compares two RDF triples for equality.
 *
 * @param t1 the first triple.
 * @param t2 the second triple.
 *
 * @return true if the triples are the same, false if not.
 */
function _compareTriples(t1, t2) {
  for(const k in t1) {
    if(t1[k].termType !== t2[k].termType || t1[k].value !== t2[k].value) {
      return false;
    }
  }
  if(t1.object.termType !== 'Literal') {
    return true;
  }
  return (
    (t1.object.datatype.termType === t2.object.datatype.termType) &&
    (t1.object.datatype.value === t2.object.datatype.value) &&
    (t1.object.language === t2.object.language)
  );
}

const _escapeRegex = /["\\\n\r]/g;
/**
 * Escape string to N-Quads literal
 */
function _escape(s) {
  return s.replace(_escapeRegex, function(match) {
    switch(match) {
      case '"': return '\\"';
      case '\\': return '\\\\';
      case '\n': return '\\n';
      case '\r': return '\\r';
    }
  });
}

const _unescapeRegex =
  /(?:\\([tbnrf"'\\]))|(?:\\u([0-9A-Fa-f]{4}))|(?:\\U([0-9A-Fa-f]{8}))/g;
/**
 * Unescape N-Quads literal to string
 */
function _unescape(s) {
  return s.replace(_unescapeRegex, function(match, code, u, U) {
    if(code) {
      switch(code) {
        case 't': return '\t';
        case 'b': return '\b';
        case 'n': return '\n';
        case 'r': return '\r';
        case 'f': return '\f';
        case '"': return '"';
        case '\'': return '\'';
        case '\\': return '\\';
      }
    }
    if(u) {
      return String.fromCharCode(parseInt(u, 16));
    }
    if(U) {
      // FIXME: support larger values
      throw new Error('Unsupported U escape');
    }
  });
}


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/Permutator.js":
/*!******************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/Permutator.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


// TODO: convert to ES6 iterable

module.exports = class Permutator {
  /**
   * A Permutator iterates over all possible permutations of the given array
   * of elements.
   *
   * @param list the array of elements to iterate over.
   */
  constructor(list) {
    // original array
    this.list = list.sort();
    // indicates whether there are more permutations
    this.done = false;
    // directional info for permutation algorithm
    this.left = {};
    for(let i = 0; i < list.length; ++i) {
      this.left[list[i]] = true;
    }
  }

  /**
   * Returns true if there is another permutation.
   *
   * @return true if there is another permutation, false if not.
   */
  hasNext() {
    return !this.done;
  }

  /**
   * Gets the next permutation. Call hasNext() to ensure there is another one
   * first.
   *
   * @return the next permutation.
   */
  next() {
    // copy current permutation
    const rval = this.list.slice();

    /* Calculate the next permutation using the Steinhaus-Johnson-Trotter
     permutation algorithm. */

    // get largest mobile element k
    // (mobile: element is greater than the one it is looking at)
    let k = null;
    let pos = 0;
    const length = this.list.length;
    for(let i = 0; i < length; ++i) {
      const element = this.list[i];
      const left = this.left[element];
      if((k === null || element > k) &&
        ((left && i > 0 && element > this.list[i - 1]) ||
        (!left && i < (length - 1) && element > this.list[i + 1]))) {
        k = element;
        pos = i;
      }
    }

    // no more permutations
    if(k === null) {
      this.done = true;
    } else {
      // swap k and the element it is looking at
      const swap = this.left[k] ? pos - 1 : pos + 1;
      this.list[pos] = this.list[swap];
      this.list[swap] = k;

      // reverse the direction of all elements larger than k
      for(let i = 0; i < length; ++i) {
        if(this.list[i] > k) {
          this.left[this.list[i]] = !this.left[this.list[i]];
        }
      }
    }

    return rval;
  }
};



/***/ }),

/***/ "../node_modules/rdf-canonize/lib/URDNA2015.js":
/*!*****************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/URDNA2015.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const AsyncAlgorithm = __webpack_require__(/*! ./AsyncAlgorithm */ "../node_modules/rdf-canonize/lib/AsyncAlgorithm.js");
const IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ "../node_modules/rdf-canonize/lib/IdentifierIssuer.js");
const MessageDigest = __webpack_require__(/*! ./MessageDigest */ "../node_modules/rdf-canonize/lib/MessageDigest-browser.js");
const Permutator = __webpack_require__(/*! ./Permutator */ "../node_modules/rdf-canonize/lib/Permutator.js");
const NQuads = __webpack_require__(/*! ./NQuads */ "../node_modules/rdf-canonize/lib/NQuads.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

const POSITIONS = {subject: 's', object: 'o', graph: 'g'};

module.exports = class URDNA2015 extends AsyncAlgorithm {
  constructor(options) {
    options = options || {};
    super(options);
    this.name = 'URDNA2015';
    this.options = Object.assign({}, options);
    this.blankNodeInfo = {};
    this.hashToBlankNodes = {};
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads;
  }

  // 4.4) Normalization Algorithm
  main(dataset, callback) {
    const self = this;
    self.schedule.start = Date.now();
    let result;
    self.quads = dataset;

    // 1) Create the normalization state.

    // Note: Optimize by generating non-normalized blank node map concurrently.
    const nonNormalized = {};

    self.waterfall([
      callback => {
        // 2) For every quad in input dataset:
        self.forEach(dataset, (quad, idx, callback) => {
          // 2.1) For each blank node that occurs in the quad, add a reference
          // to the quad using the blank node identifier in the blank node to
          // quads map, creating a new entry if necessary.
          self.forEachComponent(quad, component => {
            if(component.termType !== 'BlankNode') {
              return;
            }
            const id = component.value;
            if(id in self.blankNodeInfo) {
              self.blankNodeInfo[id].quads.push(quad);
            } else {
              nonNormalized[id] = true;
              self.blankNodeInfo[id] = {quads: [quad]};
            }
          });

          callback();
        }, callback);
      },
      callback => {
        // 3) Create a list of non-normalized blank node identifiers
        // non-normalized identifiers and populate it using the keys from the
        // blank node to quads map.
        // Note: We use a map here and it was generated during step 2.

        // 4) Initialize simple, a boolean flag, to true.
        let simple = true;

        // 5) While simple is true, issue canonical identifiers for blank nodes:
        self.whilst(() => simple, callback => {
          // 5.1) Set simple to false.
          simple = false;

          // 5.2) Clear hash to blank nodes map.
          self.hashToBlankNodes = {};

          self.waterfall([
            callback => {
              // 5.3) For each blank node identifier identifier in
              // non-normalized identifiers:
              self.forEach(nonNormalized, (value, id, callback) => {
                // 5.3.1) Create a hash, hash, according to the Hash First
                // Degree Quads algorithm.
                self.hashFirstDegreeQuads(id, (err, hash) => {
                  if(err) {
                    return callback(err);
                  }
                  // 5.3.2) Add hash and identifier to hash to blank nodes map,
                  // creating a new entry if necessary.
                  if(hash in self.hashToBlankNodes) {
                    self.hashToBlankNodes[hash].push(id);
                  } else {
                    self.hashToBlankNodes[hash] = [id];
                  }
                  callback();
                });
              }, callback);
            },
            callback => {
              // 5.4) For each hash to identifier list mapping in hash to blank
              // nodes map, lexicographically-sorted by hash:
              const hashes = Object.keys(self.hashToBlankNodes).sort();
              self.forEach(hashes, (hash, i, callback) => {
                // 5.4.1) If the length of identifier list is greater than 1,
                // continue to the next mapping.
                const idList = self.hashToBlankNodes[hash];
                if(idList.length > 1) {
                  return callback();
                }

                // 5.4.2) Use the Issue Identifier algorithm, passing canonical
                // issuer and the single blank node identifier in identifier
                // list, identifier, to issue a canonical replacement identifier
                // for identifier.
                // TODO: consider changing `getId` to `issue`
                const id = idList[0];
                self.canonicalIssuer.getId(id);

                // 5.4.3) Remove identifier from non-normalized identifiers.
                delete nonNormalized[id];

                // 5.4.4) Remove hash from the hash to blank nodes map.
                delete self.hashToBlankNodes[hash];

                // 5.4.5) Set simple to true.
                simple = true;
                callback();
              }, callback);
            }
          ], callback);
        }, callback);
      },
      callback => {
        // 6) For each hash to identifier list mapping in hash to blank nodes
        // map, lexicographically-sorted by hash:
        const hashes = Object.keys(self.hashToBlankNodes).sort();
        self.forEach(hashes, (hash, idx, callback) => {
          // 6.1) Create hash path list where each item will be a result of
          // running the Hash N-Degree Quads algorithm.
          const hashPathList = [];

          // 6.2) For each blank node identifier identifier in identifier list:
          const idList = self.hashToBlankNodes[hash];
          self.waterfall([
            callback => {
              self.forEach(idList, (id, idx, callback) => {
                // 6.2.1) If a canonical identifier has already been issued for
                // identifier, continue to the next identifier.
                if(self.canonicalIssuer.hasId(id)) {
                  return callback();
                }

                // 6.2.2) Create temporary issuer, an identifier issuer
                // initialized with the prefix _:b.
                const issuer = new IdentifierIssuer('_:b');

                // 6.2.3) Use the Issue Identifier algorithm, passing temporary
                // issuer and identifier, to issue a new temporary blank node
                // identifier for identifier.
                issuer.getId(id);

                // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
                // temporary issuer, and append the result to the hash path
                // list.
                self.hashNDegreeQuads(id, issuer, (err, result) => {
                  if(err) {
                    return callback(err);
                  }
                  hashPathList.push(result);
                  callback();
                });
              }, callback);
            },
            callback => {
              // 6.3) For each result in the hash path list,
              // lexicographically-sorted by the hash in result:
              // TODO: use `String.localeCompare`?
              hashPathList.sort((a, b) =>
                (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));
              self.forEach(hashPathList, (result, idx, callback) => {
                // 6.3.1) For each blank node identifier, existing identifier,
                // that was issued a temporary identifier by identifier issuer
                // in result, issue a canonical identifier, in the same order,
                // using the Issue Identifier algorithm, passing canonical
                // issuer and existing identifier.
                for(const existing in result.issuer.existing) {
                  self.canonicalIssuer.getId(existing);
                }
                callback();
              }, callback);
            }
          ], callback);
        }, callback);
      }, callback => {
        /* Note: At this point all blank nodes in the set of RDF quads have been
        assigned canonical identifiers, which have been stored in the canonical
        issuer. Here each quad is updated by assigning each of its blank nodes
        its new identifier. */

        // 7) For each quad, quad, in input dataset:
        const normalized = [];
        self.waterfall([
          callback => {
            self.forEach(self.quads, (quad, idx, callback) => {
              // 7.1) Create a copy, quad copy, of quad and replace any existing
              // blank node identifiers using the canonical identifiers
              // previously issued by canonical issuer.
              // Note: We optimize away the copy here.
              self.forEachComponent(quad, component => {
                if(component.termType === 'BlankNode' &&
                  !component.value.startsWith(self.canonicalIssuer.prefix)) {
                  component.value = self.canonicalIssuer.getId(component.value);
                }
              });
              // 7.2) Add quad copy to the normalized dataset.
              normalized.push(NQuads.serializeQuad(quad));
              callback();
            }, callback);
          },
          callback => {
            // sort normalized output
            normalized.sort();

            // 8) Return the normalized dataset.
            result = normalized.join('');
            return callback();
          }
        ], callback);
      }
    ], err => callback(err, result));
  }

  // 4.6) Hash First Degree Quads
  hashFirstDegreeQuads(id, callback) {
    const self = this;

    // return cached hash
    const info = self.blankNodeInfo[id];
    if('hash' in info) {
      return callback(null, info.hash);
    }

    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = [];

    // 2) Get the list of quads quads associated with the reference blank node
    // identifier in the blank node to quads map.
    const quads = info.quads;

    // 3) For each quad quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:

      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {predicate: quad.predicate};
      self.forEachComponent(quad, (component, key) => {
        // 3.1.2) If the blank node's existing blank node identifier matches the
        // reference blank node identifier then use the blank node identifier
        // _:a, otherwise, use the blank node identifier _:z.
        copy[key] = self.modifyFirstDegreeComponent(id, component, key);
      });
      nquads.push(NQuads.serializeQuad(copy));
      callback();
    }, err => {
      if(err) {
        return callback(err);
      }
      // 4) Sort nquads in lexicographical order.
      nquads.sort();

      // 5) Return the hash that results from passing the sorted, joined nquads
      // through the hash algorithm.
      const md = new MessageDigest(self.hashAlgorithm);
      for(let i = 0; i < nquads.length; ++i) {
        md.update(nquads[i]);
      }
      // TODO: represent as byte buffer instead to cut memory usage in half
      info.hash = md.digest();
      callback(null, info.hash);
    });
  }

  // 4.7) Hash Related Blank Node
  hashRelatedBlankNode(related, quad, issuer, position, callback) {
    const self = this;

    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;
    self.waterfall([
      callback => {
        if(self.canonicalIssuer.hasId(related)) {
          id = self.canonicalIssuer.getId(related);
          return callback();
        }
        if(issuer.hasId(related)) {
          id = issuer.getId(related);
          return callback();
        }
        self.hashFirstDegreeQuads(related, (err, hash) => {
          if(err) {
            return callback(err);
          }
          id = hash;
          callback();
        });
      }
    ], err => {
      if(err) {
        return callback(err);
      }

      // 2) Initialize a string input to the value of position.
      // Note: We use a hash object instead.
      const md = new MessageDigest(self.hashAlgorithm);
      md.update(position);

      // 3) If position is not g, append <, the value of the predicate in quad,
      // and > to input.
      if(position !== 'g') {
        md.update(self.getRelatedPredicate(quad));
      }

      // 4) Append identifier to input.
      md.update(id);

      // 5) Return the hash that results from passing input through the hash
      // algorithm.
      // TODO: represent as byte buffer instead to cut memory usage in half
      return callback(null, md.digest());
    });
  }

  // 4.8) Hash N-Degree Quads
  hashNDegreeQuads(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    let hashToRelated;
    const md = new MessageDigest(self.hashAlgorithm);
    self.waterfall([
      callback => self.createHashToRelated(id, issuer, (err, result) => {
        if(err) {
          return callback(err);
        }
        hashToRelated = result;
        callback();
      }),
      callback => {
        // 4) Create an empty string, data to hash.
        // Note: We created a hash object `md` above instead.

        // 5) For each related hash to blank node list mapping in hash to
        // related blank nodes map, sorted lexicographically by related hash:
        const hashes = Object.keys(hashToRelated).sort();
        self.forEach(hashes, (hash, idx, callback) => {
          // 5.1) Append the related hash to the data to hash.
          md.update(hash);

          // 5.2) Create a string chosen path.
          let chosenPath = '';

          // 5.3) Create an unset chosen issuer variable.
          let chosenIssuer;

          // 5.4) For each permutation of blank node list:
          const permutator = new Permutator(hashToRelated[hash]);
          self.whilst(() => permutator.hasNext(), nextPermutation => {
            const permutation = permutator.next();

            // 5.4.1) Create a copy of issuer, issuer copy.
            let issuerCopy = issuer.clone();

            // 5.4.2) Create a string path.
            let path = '';

            // 5.4.3) Create a recursion list, to store blank node identifiers
            // that must be recursively processed by this algorithm.
            const recursionList = [];

            self.waterfall([
              callback => {
                // 5.4.4) For each related in permutation:
                self.forEach(permutation, (related, idx, callback) => {
                  // 5.4.4.1) If a canonical identifier has been issued for
                  // related, append it to path.
                  if(self.canonicalIssuer.hasId(related)) {
                    path += self.canonicalIssuer.getId(related);
                  } else {
                    // 5.4.4.2) Otherwise:
                    // 5.4.4.2.1) If issuer copy has not issued an identifier
                    // for related, append related to recursion list.
                    if(!issuerCopy.hasId(related)) {
                      recursionList.push(related);
                    }
                    // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
                    // issuer copy and related and append the result to path.
                    path += issuerCopy.getId(related);
                  }

                  // 5.4.4.3) If chosen path is not empty and the length of path
                  // is greater than or equal to the length of chosen path and
                  // path is lexicographically greater than chosen path, then
                  // skip to the next permutation.
                  // Note: Comparing path length to chosen path length can be
                  // optimized away; only compare lexicographically.
                  if(chosenPath.length !== 0 && path > chosenPath) {
                    // FIXME: may cause inaccurate total depth calculation
                    return nextPermutation();
                  }
                  callback();
                }, callback);
              },
              callback => {
                // 5.4.5) For each related in recursion list:
                self.forEach(recursionList, (related, idx, callback) => {
                  // 5.4.5.1) Set result to the result of recursively executing
                  // the Hash N-Degree Quads algorithm, passing related for
                  // identifier and issuer copy for path identifier issuer.
                  self.hashNDegreeQuads(related, issuerCopy, (err, result) => {
                    if(err) {
                      return callback(err);
                    }

                    // 5.4.5.2) Use the Issue Identifier algorithm, passing
                    // issuer copy and related and append the result to path.
                    path += issuerCopy.getId(related);

                    // 5.4.5.3) Append <, the hash in result, and > to path.
                    path += '<' + result.hash + '>';

                    // 5.4.5.4) Set issuer copy to the identifier issuer in
                    // result.
                    issuerCopy = result.issuer;

                    // 5.4.5.5) If chosen path is not empty and the length of
                    // path is greater than or equal to the length of chosen
                    // path and path is lexicographically greater than chosen
                    // path, then skip to the next permutation.
                    // Note: Comparing path length to chosen path length can be
                    // optimized away; only compare lexicographically.
                    if(chosenPath.length !== 0 && path > chosenPath) {
                      // FIXME: may cause inaccurate total depth calculation
                      return nextPermutation();
                    }
                    callback();
                  });
                }, callback);
              },
              callback => {
                // 5.4.6) If chosen path is empty or path is lexicographically
                // less than chosen path, set chosen path to path and chosen
                // issuer to issuer copy.
                if(chosenPath.length === 0 || path < chosenPath) {
                  chosenPath = path;
                  chosenIssuer = issuerCopy;
                }
                callback();
              }
            ], nextPermutation);
          }, err => {
            if(err) {
              return callback(err);
            }

            // 5.5) Append chosen path to data to hash.
            md.update(chosenPath);

            // 5.6) Replace issuer, by reference, with chosen issuer.
            issuer = chosenIssuer;
            callback();
          });
        }, callback);
      }
    ], err => {
      // 6) Return issuer and the hash that results from passing data to hash
      // through the hash algorithm.
      callback(err, {hash: md.digest(), issuer});
    });
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    component.value = (component.value === id ? '_:a' : '_:z');
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return '<' + quad.predicate.value + '>';
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) For each component in quad, if component is the subject, object,
      // and graph name and it is a blank node that is not identified by
      // identifier:
      self.forEach(quad, (component, key, callback) => {
        if(key === 'predicate' ||
          !(component.termType === 'BlankNode' && component.value !== id)) {
          return callback();
        }
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const position = POSITIONS[key];
        self.hashRelatedBlankNode(
          related, quad, issuer, position, (err, hash) => {
          if(err) {
            return callback(err);
          }
          // 3.1.2) Add a mapping of hash to the blank node identifier for
          // component to hash to related blank nodes map, adding an entry as
          // necessary.
          if(hash in hashToRelated) {
            hashToRelated[hash].push(related);
          } else {
            hashToRelated[hash] = [related];
          }
          callback();
        });
      }, callback);
    }, err => callback(err, hashToRelated));
  }

  // helper that iterates over quad components (skips predicate)
  forEachComponent(quad, op) {
    for(const key in quad) {
      // skip `predicate`
      if(key === 'predicate') {
        continue;
      }
      op(quad[key], key, quad);
    }
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/URDNA2015Sync.js":
/*!*********************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/URDNA2015Sync.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.
 */


const IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ "../node_modules/rdf-canonize/lib/IdentifierIssuer.js");
const MessageDigest = __webpack_require__(/*! ./MessageDigest */ "../node_modules/rdf-canonize/lib/MessageDigest-browser.js");
const Permutator = __webpack_require__(/*! ./Permutator */ "../node_modules/rdf-canonize/lib/Permutator.js");
const NQuads = __webpack_require__(/*! ./NQuads */ "../node_modules/rdf-canonize/lib/NQuads.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

const POSITIONS = {subject: 's', object: 'o', graph: 'g'};

module.exports = class URDNA2015Sync {
  constructor() {
    this.name = 'URDNA2015';
    this.blankNodeInfo = {};
    this.hashToBlankNodes = {};
    this.canonicalIssuer = new IdentifierIssuer('_:c14n');
    this.hashAlgorithm = 'sha256';
    this.quads;
  }

  // 4.4) Normalization Algorithm
  main(dataset) {
    const self = this;
    self.quads = dataset;

    // 1) Create the normalization state.

    // Note: Optimize by generating non-normalized blank node map concurrently.
    const nonNormalized = {};

    // 2) For every quad in input dataset:
    for(const quad of dataset) {
      // 2.1) For each blank node that occurs in the quad, add a reference
      // to the quad using the blank node identifier in the blank node to
      // quads map, creating a new entry if necessary.
      self.forEachComponent(quad, component => {
        if(component.termType !== 'BlankNode') {
          return;
        }
        const id = component.value;
        if(id in self.blankNodeInfo) {
          self.blankNodeInfo[id].quads.push(quad);
        } else {
          nonNormalized[id] = true;
          self.blankNodeInfo[id] = {quads: [quad]};
        }
      });
    }

    // 3) Create a list of non-normalized blank node identifiers
    // non-normalized identifiers and populate it using the keys from the
    // blank node to quads map.
    // Note: We use a map here and it was generated during step 2.

    // 4) Initialize simple, a boolean flag, to true.
    let simple = true;

    // 5) While simple is true, issue canonical identifiers for blank nodes:
    while(simple) {
      // 5.1) Set simple to false.
      simple = false;

      // 5.2) Clear hash to blank nodes map.
      self.hashToBlankNodes = {};

      // 5.3) For each blank node identifier identifier in non-normalized
      // identifiers:
      for(const id in nonNormalized) {
        // 5.3.1) Create a hash, hash, according to the Hash First Degree
        // Quads algorithm.
        const hash = self.hashFirstDegreeQuads(id);

        // 5.3.2) Add hash and identifier to hash to blank nodes map,
        // creating a new entry if necessary.
        if(hash in self.hashToBlankNodes) {
          self.hashToBlankNodes[hash].push(id);
        } else {
          self.hashToBlankNodes[hash] = [id];
        }
      }

      // 5.4) For each hash to identifier list mapping in hash to blank
      // nodes map, lexicographically-sorted by hash:
      const hashes = Object.keys(self.hashToBlankNodes).sort();
      for(let i = 0; i < hashes.length; ++i) {
        // 5.4.1) If the length of identifier list is greater than 1,
        // continue to the next mapping.
        const hash = hashes[i];
        const idList = self.hashToBlankNodes[hash];
        if(idList.length > 1) {
          continue;
        }

        // 5.4.2) Use the Issue Identifier algorithm, passing canonical
        // issuer and the single blank node identifier in identifier
        // list, identifier, to issue a canonical replacement identifier
        // for identifier.
        // TODO: consider changing `getId` to `issue`
        const id = idList[0];
        self.canonicalIssuer.getId(id);

        // 5.4.3) Remove identifier from non-normalized identifiers.
        delete nonNormalized[id];

        // 5.4.4) Remove hash from the hash to blank nodes map.
        delete self.hashToBlankNodes[hash];

        // 5.4.5) Set simple to true.
        simple = true;
      }
    }

    // 6) For each hash to identifier list mapping in hash to blank nodes map,
    // lexicographically-sorted by hash:
    const hashes = Object.keys(self.hashToBlankNodes).sort();
    for(let i = 0; i < hashes.length; ++i) {
      // 6.1) Create hash path list where each item will be a result of
      // running the Hash N-Degree Quads algorithm.
      const hashPathList = [];

      // 6.2) For each blank node identifier identifier in identifier list:
      const hash = hashes[i];
      const idList = self.hashToBlankNodes[hash];
      for(let j = 0; j < idList.length; ++j) {
        // 6.2.1) If a canonical identifier has already been issued for
        // identifier, continue to the next identifier.
        const id = idList[j];
        if(self.canonicalIssuer.hasId(id)) {
          continue;
        }

        // 6.2.2) Create temporary issuer, an identifier issuer
        // initialized with the prefix _:b.
        const issuer = new IdentifierIssuer('_:b');

        // 6.2.3) Use the Issue Identifier algorithm, passing temporary
        // issuer and identifier, to issue a new temporary blank node
        // identifier for identifier.
        issuer.getId(id);

        // 6.2.4) Run the Hash N-Degree Quads algorithm, passing
        // temporary issuer, and append the result to the hash path list.
        const result = self.hashNDegreeQuads(id, issuer);
        hashPathList.push(result);
      }

      // 6.3) For each result in the hash path list,
      // lexicographically-sorted by the hash in result:
      // TODO: use `String.localeCompare`?
      hashPathList.sort((a, b) =>
        (a.hash < b.hash) ? -1 : ((a.hash > b.hash) ? 1 : 0));
      for(let j = 0; j < hashPathList.length; ++j) {
        // 6.3.1) For each blank node identifier, existing identifier,
        // that was issued a temporary identifier by identifier issuer
        // in result, issue a canonical identifier, in the same order,
        // using the Issue Identifier algorithm, passing canonical
        // issuer and existing identifier.
        const result = hashPathList[j];
        for(const existing in result.issuer.existing) {
          self.canonicalIssuer.getId(existing);
        }
      }
    }

    /* Note: At this point all blank nodes in the set of RDF quads have been
    assigned canonical identifiers, which have been stored in the canonical
    issuer. Here each quad is updated by assigning each of its blank nodes
    its new identifier. */

    // 7) For each quad, quad, in input dataset:
    const normalized = [];
    for(let i = 0; i < self.quads.length; ++i) {
      // 7.1) Create a copy, quad copy, of quad and replace any existing
      // blank node identifiers using the canonical identifiers
      // previously issued by canonical issuer.
      // Note: We optimize away the copy here.
      const quad = self.quads[i];
      self.forEachComponent(quad, component => {
        if(component.termType === 'BlankNode' &&
          !component.value.startsWith(self.canonicalIssuer.prefix)) {
          component.value = self.canonicalIssuer.getId(component.value);
        }
      });
      // 7.2) Add quad copy to the normalized dataset.
      normalized.push(NQuads.serializeQuad(quad));
    }

    // sort normalized output
    normalized.sort();

    // 8) Return the normalized dataset.
    return normalized.join('');
  }

  // 4.6) Hash First Degree Quads
  hashFirstDegreeQuads(id) {
    const self = this;

    // return cached hash
    const info = self.blankNodeInfo[id];
    if('hash' in info) {
      return info.hash;
    }

    // 1) Initialize nquads to an empty list. It will be used to store quads in
    // N-Quads format.
    const nquads = [];

    // 2) Get the list of quads `quads` associated with the reference blank node
    // identifier in the blank node to quads map.
    const quads = info.quads;

    // 3) For each quad `quad` in `quads`:
    for(let i = 0; i < quads.length; ++i) {
      const quad = quads[i];

      // 3.1) Serialize the quad in N-Quads format with the following special
      // rule:

      // 3.1.1) If any component in quad is an blank node, then serialize it
      // using a special identifier as follows:
      const copy = {predicate: quad.predicate};
      self.forEachComponent(quad, (component, key) => {
        // 3.1.2) If the blank node's existing blank node identifier matches
        // the reference blank node identifier then use the blank node
        // identifier _:a, otherwise, use the blank node identifier _:z.
        copy[key] = self.modifyFirstDegreeComponent(id, component, key);
      });
      nquads.push(NQuads.serializeQuad(copy));
    }

    // 4) Sort nquads in lexicographical order.
    nquads.sort();

    // 5) Return the hash that results from passing the sorted, joined nquads
    // through the hash algorithm.
    const md = new MessageDigest(self.hashAlgorithm);
    for(let i = 0; i < nquads.length; ++i) {
      md.update(nquads[i]);
    }
    // TODO: represent as byte buffer instead to cut memory usage in half
    info.hash = md.digest();
    return info.hash;
  }

  // 4.7) Hash Related Blank Node
  hashRelatedBlankNode(related, quad, issuer, position) {
    const self = this;

    // 1) Set the identifier to use for related, preferring first the canonical
    // identifier for related if issued, second the identifier issued by issuer
    // if issued, and last, if necessary, the result of the Hash First Degree
    // Quads algorithm, passing related.
    let id;
    if(self.canonicalIssuer.hasId(related)) {
      id = self.canonicalIssuer.getId(related);
    } else if(issuer.hasId(related)) {
      id = issuer.getId(related);
    } else {
      id = self.hashFirstDegreeQuads(related);
    }

    // 2) Initialize a string input to the value of position.
    // Note: We use a hash object instead.
    const md = new MessageDigest(self.hashAlgorithm);
    md.update(position);

    // 3) If position is not g, append <, the value of the predicate in quad,
    // and > to input.
    if(position !== 'g') {
      md.update(self.getRelatedPredicate(quad));
    }

    // 4) Append identifier to input.
    md.update(id);

    // 5) Return the hash that results from passing input through the hash
    // algorithm.
    // TODO: represent as byte buffer instead to cut memory usage in half
    return md.digest();
  }

  // 4.8) Hash N-Degree Quads
  hashNDegreeQuads(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    // Note: 2) and 3) handled within `createHashToRelated`
    const md = new MessageDigest(self.hashAlgorithm);
    const hashToRelated = self.createHashToRelated(id, issuer);

    // 4) Create an empty string, data to hash.
    // Note: We created a hash object `md` above instead.

    // 5) For each related hash to blank node list mapping in hash to related
    // blank nodes map, sorted lexicographically by related hash:
    const hashes = Object.keys(hashToRelated).sort();
    for(let i = 0; i < hashes.length; ++i) {
      // 5.1) Append the related hash to the data to hash.
      const hash = hashes[i];
      md.update(hash);

      // 5.2) Create a string chosen path.
      let chosenPath = '';

      // 5.3) Create an unset chosen issuer variable.
      let chosenIssuer;

      // 5.4) For each permutation of blank node list:
      const permutator = new Permutator(hashToRelated[hash]);
      while(permutator.hasNext()) {
        const permutation = permutator.next();

        // 5.4.1) Create a copy of issuer, issuer copy.
        let issuerCopy = issuer.clone();

        // 5.4.2) Create a string path.
        let path = '';

        // 5.4.3) Create a recursion list, to store blank node identifiers
        // that must be recursively processed by this algorithm.
        const recursionList = [];

        // 5.4.4) For each related in permutation:
        let nextPermutation = false;
        for(let j = 0; j < permutation.length; ++j) {
          // 5.4.4.1) If a canonical identifier has been issued for
          // related, append it to path.
          const related = permutation[j];
          if(self.canonicalIssuer.hasId(related)) {
            path += self.canonicalIssuer.getId(related);
          } else {
            // 5.4.4.2) Otherwise:
            // 5.4.4.2.1) If issuer copy has not issued an identifier for
            // related, append related to recursion list.
            if(!issuerCopy.hasId(related)) {
              recursionList.push(related);
            }
            // 5.4.4.2.2) Use the Issue Identifier algorithm, passing
            // issuer copy and related and append the result to path.
            path += issuerCopy.getId(related);
          }

          // 5.4.4.3) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.
          if(chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if(nextPermutation) {
          continue;
        }

        // 5.4.5) For each related in recursion list:
        for(let j = 0; j < recursionList.length; ++j) {
          // 5.4.5.1) Set result to the result of recursively executing
          // the Hash N-Degree Quads algorithm, passing related for
          // identifier and issuer copy for path identifier issuer.
          const related = recursionList[j];
          const result = self.hashNDegreeQuads(related, issuerCopy);

          // 5.4.5.2) Use the Issue Identifier algorithm, passing issuer
          // copy and related and append the result to path.
          path += issuerCopy.getId(related);

          // 5.4.5.3) Append <, the hash in result, and > to path.
          path += '<' + result.hash + '>';

          // 5.4.5.4) Set issuer copy to the identifier issuer in
          // result.
          issuerCopy = result.issuer;

          // 5.4.5.5) If chosen path is not empty and the length of path
          // is greater than or equal to the length of chosen path and
          // path is lexicographically greater than chosen path, then
          // skip to the next permutation.
          // Note: Comparing path length to chosen path length can be optimized
          // away; only compare lexicographically.
          if(chosenPath.length !== 0 && path > chosenPath) {
            nextPermutation = true;
            break;
          }
        }

        if(nextPermutation) {
          continue;
        }

        // 5.4.6) If chosen path is empty or path is lexicographically
        // less than chosen path, set chosen path to path and chosen
        // issuer to issuer copy.
        if(chosenPath.length === 0 || path < chosenPath) {
          chosenPath = path;
          chosenIssuer = issuerCopy;
        }
      }

      // 5.5) Append chosen path to data to hash.
      md.update(chosenPath);

      // 5.6) Replace issuer, by reference, with chosen issuer.
      issuer = chosenIssuer;
    }

    // 6) Return issuer and the hash that results from passing data to hash
    // through the hash algorithm.
    return {hash: md.digest(), issuer};
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    component.value = (component.value === id ? '_:a' : '_:z');
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return '<' + quad.predicate.value + '>';
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    for(let i = 0; i < quads.length; ++i) {
      // 3.1) For each component in quad, if component is the subject, object,
      // and graph name and it is a blank node that is not identified by
      // identifier:
      const quad = quads[i];
      for(const key in quad) {
        const component = quad[key];
        if(key === 'predicate' ||
          !(component.termType === 'BlankNode' && component.value !== id)) {
          continue;
        }
        // 3.1.1) Set hash to the result of the Hash Related Blank Node
        // algorithm, passing the blank node identifier for component as
        // related, quad, path identifier issuer as issuer, and position as
        // either s, o, or g based on whether component is a subject, object,
        // graph name, respectively.
        const related = component.value;
        const position = POSITIONS[key];
        const hash = self.hashRelatedBlankNode(related, quad, issuer, position);

        // 3.1.2) Add a mapping of hash to the blank node identifier for
        // component to hash to related blank nodes map, adding an entry as
        // necessary.
        if(hash in hashToRelated) {
          hashToRelated[hash].push(related);
        } else {
          hashToRelated[hash] = [related];
        }
      }
    }

    return hashToRelated;
  }

  // helper that iterates over quad components (skips predicate)
  forEachComponent(quad, op) {
    for(const key in quad) {
      // skip `predicate`
      if(key === 'predicate') {
        continue;
      }
      op(quad[key], key, quad);
    }
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/URGNA2012.js":
/*!*****************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/URGNA2012.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const URDNA2015 = __webpack_require__(/*! ./URDNA2015 */ "../node_modules/rdf-canonize/lib/URDNA2015.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

module.exports = class URDNA2012 extends URDNA2015 {
  constructor(options) {
    super(options);
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component, key) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    if(key === 'name') {
      component.value = '_:g';
    } else {
      component.value = (component.value === id ? '_:a' : '_:z');
    }
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return quad.predicate.value;
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer, callback) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    self.forEach(quads, (quad, idx, callback) => {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      let position;
      let related;
      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if(
        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        return callback();
      }
      // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.
      self.hashRelatedBlankNode(
        related, quad, issuer, position, (err, hash) => {
        if(err) {
          return callback(err);
        }
        if(hash in hashToRelated) {
          hashToRelated[hash].push(related);
        } else {
          hashToRelated[hash] = [related];
        }
        callback();
      });
    }, err => callback(err, hashToRelated));
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/URGNA2012Sync.js":
/*!*********************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/URGNA2012Sync.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
 * Copyright (c) 2016 Digital Bazaar, Inc. All rights reserved.
 */


const URDNA2015Sync = __webpack_require__(/*! ./URDNA2015Sync */ "../node_modules/rdf-canonize/lib/URDNA2015Sync.js");
const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");

module.exports = class URDNA2012Sync extends URDNA2015Sync {
  constructor() {
    super();
    this.name = 'URGNA2012';
    this.hashAlgorithm = 'sha1';
  }

  // helper for modifying component during Hash First Degree Quads
  modifyFirstDegreeComponent(id, component, key) {
    if(component.termType !== 'BlankNode') {
      return component;
    }
    component = util.clone(component);
    if(key === 'name') {
      component.value = '_:g';
    } else {
      component.value = (component.value === id ? '_:a' : '_:z');
    }
    return component;
  }

  // helper for getting a related predicate
  getRelatedPredicate(quad) {
    return quad.predicate.value;
  }

  // helper for creating hash to related blank nodes map
  createHashToRelated(id, issuer) {
    const self = this;

    // 1) Create a hash to related blank nodes map for storing hashes that
    // identify related blank nodes.
    const hashToRelated = {};

    // 2) Get a reference, quads, to the list of quads in the blank node to
    // quads map for the key identifier.
    const quads = self.blankNodeInfo[id].quads;

    // 3) For each quad in quads:
    for(let i = 0; i < quads.length; ++i) {
      // 3.1) If the quad's subject is a blank node that does not match
      // identifier, set hash to the result of the Hash Related Blank Node
      // algorithm, passing the blank node identifier for subject as related,
      // quad, path identifier issuer as issuer, and p as position.
      const quad = quads[i];
      let position;
      let related;
      if(quad.subject.termType === 'BlankNode' && quad.subject.value !== id) {
        related = quad.subject.value;
        position = 'p';
      } else if(
        quad.object.termType === 'BlankNode' && quad.object.value !== id) {
        // 3.2) Otherwise, if quad's object is a blank node that does not match
        // identifier, to the result of the Hash Related Blank Node algorithm,
        // passing the blank node identifier for object as related, quad, path
        // identifier issuer as issuer, and r as position.
        related = quad.object.value;
        position = 'r';
      } else {
        // 3.3) Otherwise, continue to the next quad.
        continue;
      }
      // 3.4) Add a mapping of hash to the blank node identifier for the
      // component that matched (subject or object) to hash to related blank
      // nodes map, adding an entry as necessary.
      const hash = self.hashRelatedBlankNode(related, quad, issuer, position);
      if(hash in hashToRelated) {
        hashToRelated[hash].push(related);
      } else {
        hashToRelated[hash] = [related];
      }
    }

    return hashToRelated;
  }
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/index.js":
/*!*************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * An implementation of the RDF Dataset Normalization specification.
 * This library works in the browser and node.js.
 *
 * BSD 3-Clause License
 * Copyright (c) 2016-2017 Digital Bazaar, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of the Digital Bazaar, Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
 * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


const util = __webpack_require__(/*! ./util */ "../node_modules/rdf-canonize/lib/util.js");
const URDNA2015 = __webpack_require__(/*! ./URDNA2015 */ "../node_modules/rdf-canonize/lib/URDNA2015.js");
const URGNA2012 = __webpack_require__(/*! ./URGNA2012 */ "../node_modules/rdf-canonize/lib/URGNA2012.js");
const URDNA2015Sync = __webpack_require__(/*! ./URDNA2015Sync */ "../node_modules/rdf-canonize/lib/URDNA2015Sync.js");
const URGNA2012Sync = __webpack_require__(/*! ./URGNA2012Sync */ "../node_modules/rdf-canonize/lib/URGNA2012Sync.js");

// optional native support
let rdfCanonizeNative;
try {
  rdfCanonizeNative = __webpack_require__(/*! rdf-canonize-native */ 8);
} catch(e) {}

const api = {};
module.exports = api;

// expose helpers
api.NQuads = __webpack_require__(/*! ./NQuads */ "../node_modules/rdf-canonize/lib/NQuads.js");
api.IdentifierIssuer = __webpack_require__(/*! ./IdentifierIssuer */ "../node_modules/rdf-canonize/lib/IdentifierIssuer.js");

/**
 * Get or set native API.
 *
 * @param api the native API.
 *
 * @return the currently set native API.
 */
api._rdfCanonizeNative = function(api) {
  if(api) {
    rdfCanonizeNative = api;
  }
  return rdfCanonizeNative;
};

/**
 * Asynchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 * @param [callback(err, canonical)] called once the operation completes.
 *
 * @return a Promise that resolves to the canonicalized RDF Dataset.
 */
api.canonize = util.callbackify(async function(dataset, options) {
  let callback;
  const promise = new Promise((resolve, reject) => {
    callback = (err, canonical) => {
      if(err) {
        return reject(err);
      }

      /*if(options.format === 'application/n-quads') {
        canonical = canonical.join('');
      }
      canonical = _parseNQuads(canonical.join(''));*/

      resolve(canonical);
    };
  });

  // back-compat with legacy dataset
  if(!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  // TODO: convert algorithms to Promise-based async
  if(options.useNative) {
    if(rdfCanonizeNative) {
      rdfCanonizeNative.canonize(dataset, options, callback);
    } else {
      throw new Error('rdf-canonize-native not available');
    }
  } else {
    if(options.algorithm === 'URDNA2015') {
      new URDNA2015(options).main(dataset, callback);
    } else if(options.algorithm === 'URGNA2012') {
      new URGNA2012(options).main(dataset, callback);
    } else if(!('algorithm' in options)) {
      throw new Error('No RDF Dataset Canonicalization algorithm specified.');
    } else {
      throw new Error(
        'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
    }
  }

  return promise;
});

/**
 * Synchronously canonizes an RDF dataset.
 *
 * @param dataset the dataset to canonize.
 * @param options the options to use:
 *          algorithm the canonicalization algorithm to use, `URDNA2015` or
 *            `URGNA2012`.
 *          [useNative] use native implementation (default: false).
 *
 * @return the RDF dataset in canonical form.
 */
api.canonizeSync = function(dataset, options) {
  // back-compat with legacy dataset
  if(!Array.isArray(dataset)) {
    dataset = api.NQuads.legacyDatasetToQuads(dataset);
  }

  if(options.useNative) {
    if(rdfCanonizeNative) {
      return rdfCanonizeNative.canonizeSync(dataset, options);
    }
    throw new Error('rdf-canonize-native not available');
  }
  if(options.algorithm === 'URDNA2015') {
    return new URDNA2015Sync(options).main(dataset);
  } else if(options.algorithm === 'URGNA2012') {
    return new URGNA2012Sync(options).main(dataset);
  }
  if(!('algorithm' in options)) {
    throw new Error('No RDF Dataset Canonicalization algorithm specified.');
  }
  throw new Error(
    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);
};


/***/ }),

/***/ "../node_modules/rdf-canonize/lib/util.js":
/*!************************************************!*\
  !*** ../node_modules/rdf-canonize/lib/util.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(setImmediate, process) {/*
 * Copyright (c) 2016-2017 Digital Bazaar, Inc. All rights reserved.
 */


const api = {};
module.exports = api;

// define setImmediate and nextTick
//// nextTick implementation with browser-compatible fallback ////
// from https://github.com/caolan/async/blob/master/lib/async.js

// capture the global reference to guard against fakeTimer mocks
const _setImmediate = typeof setImmediate === 'function' && setImmediate;

const _delay = _setImmediate ?
  // not a direct alias (for IE10 compatibility)
  fn => _setImmediate(fn) :
  fn => setTimeout(fn, 0);

if(typeof process === 'object' && typeof process.nextTick === 'function') {
  api.nextTick = process.nextTick;
} else {
  api.nextTick = _delay;
}
api.setImmediate = _setImmediate ? _delay : api.nextTick;

/**
 * Clones an object, array, or string/number. If a typed JavaScript object
 * is given, such as a Date, it will be converted to a string.
 *
 * @param value the value to clone.
 *
 * @return the cloned value.
 */
api.clone = function(value) {
  if(value && typeof value === 'object') {
    let rval;
    if(Array.isArray(value)) {
      rval = [];
      for(let i = 0; i < value.length; ++i) {
        rval[i] = api.clone(value[i]);
      }
    } else if(api.isObject(value)) {
      rval = {};
      for(const key in value) {
        rval[key] = api.clone(value[key]);
      }
    } else {
      rval = value.toString();
    }
    return rval;
  }
  return value;
};

/**
 * Returns true if the given value is an Object.
 *
 * @param v the value to check.
 *
 * @return true if the value is an Object, false if not.
 */
api.isObject = v => Object.prototype.toString.call(v) === '[object Object]';

/**
 * Returns true if the given value is undefined.
 *
 * @param v the value to check.
 *
 * @return true if the value is undefined, false if not.
 */
api.isUndefined = v => typeof v === 'undefined';

api.callbackify = fn => {
  return async function(...args) {
    const callback = args[args.length - 1];
    if(typeof callback === 'function') {
      args.pop();
    }

    let result;
    try {
      result = await fn.apply(null, args);
    } catch(e) {
      if(typeof callback === 'function') {
        return _invokeCallback(callback, e);
      }
      throw e;
    }

    if(typeof callback === 'function') {
      return _invokeCallback(callback, null, result);
    }

    return result;
  };
};

function _invokeCallback(callback, err, result) {
  try {
    return callback(err, result);
  } catch(unhandledError) {
    // throw unhandled errors to prevent "unhandled rejected promise"
    // and simulate what would have happened in a promiseless API
    process.nextTick(() => {
      throw unhandledError;
    });
  }
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/errors-browser.js":
/*!*********************************************************!*\
  !*** ../node_modules/readable-stream/errors-browser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;


/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_duplex.js":
/*!*************************************************************!*\
  !*** ../node_modules/readable-stream/lib/_stream_duplex.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;

var Readable = __webpack_require__(/*! ./_stream_readable */ "../node_modules/readable-stream/lib/_stream_readable.js");

var Writable = __webpack_require__(/*! ./_stream_writable */ "../node_modules/readable-stream/lib/_stream_writable.js");

__webpack_require__(/*! inherits */ "../node_modules/inherits/inherits_browser.js")(Duplex, Readable);

{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;

  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;

    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
}); // the no-half-open enforcer

function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  process.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_passthrough.js":
/*!******************************************************************!*\
  !*** ../node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "../node_modules/readable-stream/lib/_stream_transform.js");

__webpack_require__(/*! inherits */ "../node_modules/inherits/inherits_browser.js")(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_readable.js":
/*!***************************************************************!*\
  !*** ../node_modules/readable-stream/lib/_stream_readable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


module.exports = Readable;
/*<replacement>*/

var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/


var debugUtil = __webpack_require__(/*! util */ 2);

var debug;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(/*! ./internal/streams/buffer_list */ "../node_modules/readable-stream/lib/internal/streams/buffer_list.js");

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


var StringDecoder;
var createReadableStreamAsyncIterator;
var from;

__webpack_require__(/*! inherits */ "../node_modules/inherits/inherits_browser.js")(Readable, Stream);

var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../node_modules/readable-stream/lib/_stream_duplex.js");
  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  } // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.


  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }

  return er;
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  var p = this._readableState.buffer.head;
  var content = '';

  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }

  this._readableState.buffer.clear();

  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
}; // Don't raise the hwm > 1GB


var MAX_HWM = 0x40000000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true;

  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;

    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}

function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);

  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  } // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.


  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);

    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, {
        hasUnpiped: false
      });
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;

  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);

      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);

  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }

  return res;
};

function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;

  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume'); // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()

    state.flowing = !state.readableListening;
    resume(this, state);
  }

  state.paused = false;
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  debug('resume', state.reading);

  if (!state.reading) {
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  this._readableState.paused = true;
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {
    ;
  }
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = __webpack_require__(/*! ./internal/streams/async_iterator */ "../node_modules/readable-stream/lib/internal/streams/async_iterator.js");
    }

    return createReadableStreamAsyncIterator(this);
  };
}

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');

    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;

      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}

if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = __webpack_require__(/*! ./internal/streams/from */ "../node_modules/readable-stream/lib/internal/streams/from-browser.js");
    }

    return from(Readable, iterable, opts);
  };
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_transform.js":
/*!****************************************************************!*\
  !*** ../node_modules/readable-stream/lib/_stream_transform.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var _require$codes = __webpack_require__(/*! ../errors */ "../node_modules/readable-stream/errors-browser.js").codes,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "../node_modules/readable-stream/lib/_stream_duplex.js");

__webpack_require__(/*! inherits */ "../node_modules/inherits/inherits_browser.js")(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}

/***/ }),

/***/ "../node_modules/readable-stream/lib/_stream_writable.js":
/*!***************************************************************!*\
  !*** ../node_modules/readable-stream/lib/_stream_writable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "../node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(/*! ./internal/streams/stream */ "../node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/


var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "../node_modules/readable-stream/lib/internal/streams/destroy.js");

var _require = __webpack_require__(/*! ./internal/streams/state */ "../node_modules/readable-stream/lib/internal/streams/state.js"),
    getHighWaterMark = _require.getHighWaterMark;

var _require$codes = __webpack_require__(/*! ../errors */ "../node_modules/readable-stream/errors-browser.js").codes,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

var errorOrDestroy = destroyImpl.errorOrDestroy;

__webpack_require__(/*! inherits */ "../node_modules/inherits/inherits_browser.js")(Writable, Stream);

function nop() {}

function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "../node_modules/readable-stream/lib/_stream_duplex.js"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.
  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5

  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};

function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var er;

  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }

  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }

  return true;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  this._writableState.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending) endWritable(this, state, cb);
  return this;
};

Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      errorOrDestroy(stream, err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');

      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;

        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  } // reuse the free corkReq.


  state.corkedRequestsFree.next = corkReq;
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/async_iterator.js":
/*!******************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/async_iterator.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _Object$setPrototypeO;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var finished = __webpack_require__(/*! ./end-of-stream */ "../node_modules/readable-stream/lib/internal/streams/end-of-stream.js");

var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');

function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}

function readAndResolve(iter) {
  var resolve = iter[kLastResolve];

  if (resolve !== null) {
    var data = iter[kStream].read(); // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'

    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}

function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}

function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }

      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}

var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },

  next: function next() {
    var _this = this;

    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];

    if (error !== null) {
      return Promise.reject(error);
    }

    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }

    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    } // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time


    var lastPromise = this[kLastPromise];
    var promise;

    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();

      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }

      promise = new Promise(this[kHandlePromise]);
    }

    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;

  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }

      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);

var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;

  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();

      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
      // returned by next() and store the error

      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }

      iterator[kError] = err;
      return;
    }

    var resolve = iterator[kLastResolve];

    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }

    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};

module.exports = createReadableStreamAsyncIterator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!***************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js"),
    Buffer = _require.Buffer;

var _require2 = __webpack_require__(/*! util */ 3),
    inspect = _require2.inspect;

var custom = inspect && inspect.custom || 'inspect';

function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}

module.exports =
/*#__PURE__*/
function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;

      while (p = p.next) {
        ret += s + p.data;
      }

      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;

      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }

      return ret;
    } // Consumes a specified amount of bytes or characters from the buffered data.

  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;

      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }

      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    } // Consumes a specified amount of characters from the buffered data.

  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;

      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;

        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Consumes a specified amount of bytes from the buffered data.

  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;

      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;

        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }

          break;
        }

        ++c;
      }

      this.length -= c;
      return ret;
    } // Make sure the linked list only shows the minimal necessary information.

  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread({}, options, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);

  return BufferList;
}();

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!***********************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) { // undocumented cb() API, needed for core, not for public API

function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });

  return this;
}

function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}

function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.
  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!*****************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).


var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(/*! ../../../errors */ "../node_modules/readable-stream/errors-browser.js").codes.ERR_STREAM_PREMATURE_CLOSE;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    callback.apply(this, args);
  };
}

function noop() {}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var writableEnded = stream._writableState && stream._writableState.finished;

  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };

  var readableEnded = stream._readableState && stream._readableState.endEmitted;

  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    var err;

    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }

    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}

module.exports = eos;

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/from-browser.js":
/*!****************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/from-browser.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};


/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/pipeline.js":
/*!************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/pipeline.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).


var eos;

function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}

var _require$codes = __webpack_require__(/*! ../../../errors */ "../node_modules/readable-stream/errors-browser.js").codes,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}

function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}

function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = __webpack_require__(/*! ./end-of-stream */ "../node_modules/readable-stream/lib/internal/streams/end-of-stream.js");
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true; // request.destroy just do .end - .abort is what we want

    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}

function call(fn) {
  fn();
}

function pipe(from, to) {
  return from.pipe(to);
}

function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}

function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }

  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];

  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }

  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}

module.exports = pipeline;

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/state.js":
/*!*********************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/state.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ERR_INVALID_OPT_VALUE = __webpack_require__(/*! ../../../errors */ "../node_modules/readable-stream/errors-browser.js").codes.ERR_INVALID_OPT_VALUE;

function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}

function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }

    return Math.floor(hwm);
  } // Default value


  return state.objectMode ? 16 : 16 * 1024;
}

module.exports = {
  getHighWaterMark: getHighWaterMark
};

/***/ }),

/***/ "../node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!******************************************************************************!*\
  !*** ../node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;


/***/ }),

/***/ "../node_modules/readable-stream/readable-browser.js":
/*!***********************************************************!*\
  !*** ../node_modules/readable-stream/readable-browser.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "../node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "../node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "../node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "../node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "../node_modules/readable-stream/lib/_stream_passthrough.js");
exports.finished = __webpack_require__(/*! ./lib/internal/streams/end-of-stream.js */ "../node_modules/readable-stream/lib/internal/streams/end-of-stream.js");
exports.pipeline = __webpack_require__(/*! ./lib/internal/streams/pipeline.js */ "../node_modules/readable-stream/lib/internal/streams/pipeline.js");


/***/ }),

/***/ "../node_modules/util-deprecate/browser.js":
/*!*************************************************!*\
  !*** ../node_modules/util-deprecate/browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webui/node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/yallist/iterator.js":
/*!*******************************************!*\
  !*** ../node_modules/yallist/iterator.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}


/***/ }),

/***/ "../node_modules/yallist/yallist.js":
/*!******************************************!*\
  !*** ../node_modules/yallist/yallist.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 2; i < arguments.length; i++) {
    walker = insert(this, walker, arguments[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(/*! ./iterator.js */ "../node_modules/yallist/iterator.js")(Yallist)
} catch (er) {}


/***/ }),

/***/ "../shex.js/node_modules/hierarchy-closure/hierarchy-closure.js":
/*!**********************************************************************!*\
  !*** ../shex.js/node_modules/hierarchy-closure/hierarchy-closure.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var HierarchyClosure = (function () {
  /** create a hierarchy object
   * This object keeps track of direct children and parents as well as transitive children and parents.
   */
  function makeHierarchy () {
    let roots = {}
    let parents = {}
    let children = {}
    let holders = {}
    return {
      add: function (parent, child) {
        if (// test if this is a novel entry.
          (parent in children && children[parent].indexOf(child) !== -1)) {
          return
        }
        let target = parent in holders
          ? getNode(parent)
          : (roots[parent] = getNode(parent)) // add new parents to roots.
        let value = getNode(child)

        target[child] = value
        delete roots[child]

        // // maintain hierarchy (direct and confusing)
        // children[parent] = children[parent].concat(child, children[child])
        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))
        // parents[child] = parents[child].concat(parent, parents[parent])
        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))

        // maintain hierarchy (generic and confusing)
        updateClosure(children, parents, child, parent)
        updateClosure(parents, children, parent, child)
        function updateClosure (container, members, near, far) {
          container[far] = container[far].filter(
            e => /* e !== near && */ container[near].indexOf(e) === -1
          ).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near])
          container[near].forEach(
            n => (members[n] = members[n].filter(
              e => e !== far && members[far].indexOf(e) === -1
            ).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]))
          )
        }

        function getNode (node) {
          if (!(node in holders)) {
            parents[node] = []
            children[node] = []
            holders[node] = {}
          }
          return holders[node]
        }
      },
      roots: roots,
      parents: parents,
      children: children
    }
  }

  function depthFirst (n, f, p) {
    return Object.keys(n).reduce((ret, k) => {
      return ret.concat(
        depthFirst(n[k], f, k),
        p ? f(k, p) : []) // outer invocation can have null parent
    }, [])
  }

  return { create: makeHierarchy, depthFirst }
})()

/* istanbul ignore next */
if (true) {
  module.exports = HierarchyClosure
}


/***/ }),

/***/ "../shex.js/node_modules/path-browserify/index.js":
/*!********************************************************!*\
  !*** ../shex.js/node_modules/path-browserify/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/RdfTerm.js":
/*!****************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/RdfTerm.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 *
 * isIRI, isBlank, getLiteralType, getLiteralValue
 */
var RdfTerm = function () {
  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
      schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
      dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;
  var RdfLangString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
  var XsdString = "http://www.w3.org/2001/XMLSchema#string"; // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.

  function resolveRelativeIRI(base, iri) {
    if (absoluteIRI.test(iri)) return iri;

    switch (iri[0]) {
      // An empty relative IRI indicates the base IRI
      case undefined:
        return base;
      // Resolve relative fragment IRIs against the base IRI

      case '#':
        return base + iri;
      // Resolve relative query string IRIs by replacing the query string

      case '?':
        return base.replace(/(?:\?.*)?$/, iri);
      // Resolve root-relative IRIs at the root of the base IRI

      case '/':
        var m = base.match(schemeAuthority); // Resolve scheme-relative IRIs to the scheme

        return (iri[1] === '/' ? m[1] : m[0]) + _removeDotSegments(iri);
      // Resolve all other IRIs at the base IRI's path

      default:
        {
          return _removeDotSegments(base.replace(/[^\/?]*(?:\?.*)?$/, '') + iri);
        }
    }
  } // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.


  function _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

    var result = '',
        length = iri.length,
        i = -1,
        pathStart = -1,
        segmentStart = 0,
        next = '/';

    while (i < length) {
      switch (next) {
        // The path starts with the first slash after the authority
        case ':':
          if (pathStart < 0) {
            // Skip two slashes before the authority
            if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
              while ((pathStart = i + 1) < length && iri[pathStart] !== '/') {
                i = pathStart;
              }
          }

          break;
        // Don't modify a query string or fragment

        case '?':
        case '#':
          i = length;
          break;
        // Handle '/.' or '/..' path segments

        case '/':
          if (iri[i + 1] === '.') {
            next = iri[++i + 1];

            switch (next) {
              // Remove a '/.' segment
              case '/':
                result += iri.substring(segmentStart, i - 1);
                segmentStart = i + 1;
                break;
              // Remove a trailing '/.' segment

              case undefined:
              case '?':
              case '#':
                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
              // Remove a '/..' segment

              case '.':
                next = iri[++i + 1];

                if (next === undefined || next === '/' || next === '?' || next === '#') {
                  result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                  if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                  if (next !== '/') return result + '/' + iri.substr(i + 1);
                  segmentStart = i + 1;
                }

            }
          }

      }

      next = iri[++i];
    }

    return result + iri.substring(segmentStart);
  }

  function internalTerm(node) {
    // !!rdfjsTermToInternal
    switch (node.termType) {
      case "NamedNode":
        return node.value;

      case "BlankNode":
        return "_:" + node.value;

      case "Literal":
        return "\"" + node.value + "\"" + (node.datatypeString === RdfLangString ? "@" + node.language : node.datatypeString === XsdString ? "" : "^^" + node.datatypeString);

      default:
        throw Error("unknown RDFJS node type: " + JSON.stringify(node));
    }
  }

  function internalTriple(triple) {
    // !!rdfjsTripleToInternal
    return {
      subject: internalTerm(triple.subject),
      predicate: internalTerm(triple.predicate),
      object: internalTerm(triple.object)
    };
  }

  function externalTerm(node, factory) {
    // !!intermalTermToRdfjs
    if (isIRI(node)) {
      return factory.namedNode(node);
    } else if (isBlank(node)) {
      return factory.blankNode(node.substr(2));
    } else if (isLiteral(node)) {
      var dtOrLang = getLiteralLanguage(node) || (getLiteralType(node) === XsdString ? null // seems to screw up N3.js
      : factory.namedNode(getLiteralType(node)));
      return factory.literal(getLiteralValue(node), dtOrLang);
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  function externalTriple(triple, factory) {
    // !!rename internalTripleToRdjs
    return factory.quad(externalTerm(triple.subject, factory), externalTerm(triple.predicate, factory), externalTerm(triple.object, factory));
  }

  function intermalTermToTurtle(node, base, prefixes) {
    if (isIRI(node)) {
      // if (node === RDF_TYPE) // only valid in Turtle predicates
      //   return "a";
      // Escape special characters
      if (escape.test(node)) node = node.replace(escapeAll, characterReplacer);
      var pref = Object.keys(prefixes).find(function (pref) {
        return node.startsWith(prefixes[pref]);
      });

      if (pref) {
        var rest = node.substr(prefixes[pref].length);
        if (rest.indexOf("\\") === -1) // could also say no more than n of these: [...]
          return pref + ":" + rest.replace(/([~!$&'()*+,;=/?#@%])/g, '\\' + "$1");
      }

      if (node.startsWith(base)) {
        return "<" + node.substr(base.length) + ">";
      } else {
        return "<" + node + ">";
      }
    } else if (isBlank(node)) {
      return node;
    } else if (isLiteral(node)) {
      var value = getLiteralValue(node);
      var type = getLiteralType(node);
      var language = getLiteralLanguage(node); // Escape special characters

      if (escape.test(value)) value = value.replace(escapeAll, characterReplacer); // Write the literal, possibly with type or language

      if (language) return '"' + value + '"@' + language;else if (type) return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);else return '"' + value + '"';
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  } // Tests whether the given entity (triple object) represents an IRI in the N3 library


  function isIRI(entity) {
    if (typeof entity !== 'string') return false;else if (entity.length === 0) return true;else {
      var firstChar = entity[0];
      return firstChar !== '"' && firstChar !== '_';
    }
  } // Tests whether the given entity (triple object) represents a literal in the N3 library


  function isLiteral(entity) {
    return typeof entity === 'string' && entity[0] === '"';
  } // Tests whether the given entity (triple object) represents a blank node in the N3 library


  function isBlank(entity) {
    return typeof entity === 'string' && entity.substr(0, 2) === '_:';
  } // Tests whether the given entity represents the default graph


  function isDefaultGraph(entity) {
    return !entity;
  } // Tests whether the given triple is in the default graph


  function inDefaultGraph(triple) {
    return !triple.graph;
  } // Gets the string value of a literal in the N3 library


  function getLiteralValue(literal) {
    var match = /^"([^]*)"/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1];
  } // Gets the type of a literal in the N3 library


  function getLiteralType(literal) {
    var match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  } // Gets the language of a literal in the N3 library


  function getLiteralLanguage(literal) {
    var match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match) throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  } // rdf:type predicate (for 'a' abbreviation)


  var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE = RDF_PREFIX + 'type'; // Characters in literals that require escaping

  var escape = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
      escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
      escapeReplacements = {
    '\\': '\\\\',
    '"': '\\"',
    '\t': '\\t',
    '\n': '\\n',
    '\r': '\\r',
    '\b': '\\b',
    '\f': '\\f'
  }; // Replaces a character by its escaped version

  function characterReplacer(character) {
    // Replace a single character by its escaped version
    var result = escapeReplacements[character];

    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = "\\u0000".substr(0, 6 - result.length) + result;
      } // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
          result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
    }

    return result;
  }

  return {
    RdfLangString: RdfLangString,
    XsdString: XsdString,
    resolveRelativeIRI: resolveRelativeIRI,
    isIRI: isIRI,
    isLiteral: isLiteral,
    isBlank: isBlank,
    isDefaultGraph: isDefaultGraph,
    inDefaultGraph: inDefaultGraph,
    getLiteralValue: getLiteralValue,
    getLiteralType: getLiteralType,
    getLiteralLanguage: getLiteralLanguage,
    internalTerm: internalTerm,
    internalTriple: internalTriple,
    externalTerm: externalTerm,
    externalTriple: externalTriple,
    intermalTermToTurtle: intermalTermToTurtle
  };
}();

if (true) module.exports = RdfTerm; // node environment

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/ShExUtil.js":
/*!*****************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/ShExUtil.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// **ShExUtil** provides ShEx utility functions
var ShExUtil = function () {
  var _ShExUtil2;

  var RdfTerm = __webpack_require__(/*! ./RdfTerm */ "../shex.js/packages/shex-core/lib/RdfTerm.js"); // var util = require('util');


  var Hierarchy = __webpack_require__(/*! hierarchy-closure */ "../shex.js/node_modules/hierarchy-closure/hierarchy-closure.js");

  var SX = {};
  SX._namespace = "http://www.w3.org/ns/shex#";
  ["Schema", "@context", "imports", "startActs", "start", "shapes", "ShapeOr", "ShapeAnd", "shapeExprs", "nodeKind", "NodeConstraint", "iri", "bnode", "nonliteral", "literal", "datatype", "length", "minlength", "maxlength", "pattern", "flags", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values", "ShapeNot", "shapeExpr", "Shape", "virtual", "closed", "extra", "expression", "inherit", "semActs", "ShapeRef", "reference", "ShapeExternal", "EachOf", "OneOf", "expressions", "min", "max", "annotation", "TripleConstraint", "inverse", "negated", "predicate", "valueExpr", "Inclusion", "include", "Language", "languageTag", "IriStem", "LiteralStem", "LanguageStem", "stem", "IriStemRange", "LiteralStemRange", "LanguageStemRange", "exclusion", "Wildcard", "SemAct", "name", "code", "Annotation", "object"].forEach(function (p) {
    SX[p] = SX._namespace + p;
  });
  var RDF = {};
  RDF._namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
  ["type", "first", "rest", "nil"].forEach(function (p) {
    RDF[p] = RDF._namespace + p;
  });
  var XSD = {};
  XSD._namespace = "http://www.w3.org/2001/XMLSchema#";
  ["anyURI"].forEach(function (p) {
    XSD[p] = XSD._namespace + p;
  });
  var OWL = {};
  OWL._namespace = "http://www.w3.org/2002/07/owl#";
  ["Thing"].forEach(function (p) {
    OWL[p] = OWL._namespace + p;
  });
  var Missed = {}; // singleton

  var UNBOUNDED = -1;

  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  }

  function isTerm(t) {
    return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
      return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
    }, true);
  }

  function isShapeRef(expr) {
    return typeof expr === "string"; // test for JSON-LD @ID
  }

  var isInclusion = isShapeRef;
  var ShExUtil = (_ShExUtil2 = {
    SX: SX,
    RDF: RDF,
    version: function version() {
      return "0.5.0";
    },
    Visitor: function Visitor() {
      // function expect (l, r) { var ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }
      var _ShExUtil = this;

      function visitMap(map, val) {
        var ret = {};
        Object.keys(map).forEach(function (item) {
          ret[item] = val(map[item]);
        });
        return ret;
      }

      var r = {
        runtimeError: function runtimeError(e) {
          throw e;
        },
        visitSchema: function visitSchema(schema) {
          var ret = {
            type: "Schema"
          };

          _ShExUtil._expect(schema, "type", "Schema");

          this._maybeSet(schema, ret, "Schema", ["@context", "prefixes", "base", "imports", "startActs", "start", "shapes"], ["_base", "_prefixes", "_index", "_sourceMap"]);

          return ret;
        },
        visitPrefixes: function visitPrefixes(prefixes) {
          return prefixes === undefined ? undefined : visitMap(prefixes, function (val) {
            return val;
          });
        },
        visitIRI: function visitIRI(i) {
          return i;
        },
        visitImports: function visitImports(imports) {
          var _Visitor = this;

          return imports.map(function (imp) {
            return _Visitor.visitIRI(imp);
          });
        },
        visitStartActs: function visitStartActs(startActs) {
          var _Visitor = this;

          return startActs === undefined ? undefined : startActs.map(function (act) {
            return _Visitor.visitSemAct(act);
          });
        },
        visitSemActs: function visitSemActs(semActs) {
          var _Visitor = this;

          if (semActs === undefined) return undefined;
          var ret = [];
          Object.keys(semActs).forEach(function (label) {
            ret.push(_Visitor.visitSemAct(semActs[label], label));
          });
          return ret;
        },
        visitSemAct: function visitSemAct(semAct, label) {
          var ret = {
            type: "SemAct"
          };

          _ShExUtil._expect(semAct, "type", "SemAct");

          this._maybeSet(semAct, ret, "SemAct", ["name", "code"]);

          return ret;
        },
        visitShapes: function visitShapes(shapes) {
          var _Visitor = this;

          if (shapes === undefined) return undefined;
          return shapes.map(function (shapeExpr) {
            return _Visitor.visitShapeExpr(shapeExpr);
          });
        },
        visitProductions999: function visitProductions999(productions) {
          // !! DELETE
          var _Visitor = this;

          if (productions === undefined) return undefined;
          var ret = {};
          Object.keys(productions).forEach(function (label) {
            ret[label] = _Visitor.visitExpression(productions[label], label);
          });
          return ret;
        },
        visitShapeExpr: function visitShapeExpr(expr, label) {
          if (isShapeRef(expr)) return this.visitShapeRef(expr);
          var r = expr.type === "Shape" ? this.visitShape(expr, label) : expr.type === "NodeConstraint" ? this.visitNodeConstraint(expr, label) : expr.type === "ShapeAnd" ? this.visitShapeAnd(expr, label) : expr.type === "ShapeOr" ? this.visitShapeOr(expr, label) : expr.type === "ShapeNot" ? this.visitShapeNot(expr, label) : expr.type === "ShapeExternal" ? this.visitShapeExternal(expr) : null; // if (expr.type === "ShapeRef") r = 0; // console.warn("visitShapeExpr:", r);

          if (r === null) throw Error("unexpected shapeExpr type: " + expr.type);else return r;
        },
        // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)
        _visitShapeGroup: function _visitShapeGroup(expr, label) {
          this._testUnknownAttributes(expr, ["id", "shapeExprs"], expr.type, this.visitShapeNot);

          var _Visitor = this;

          var r = {
            type: expr.type
          };
          if ("id" in expr) r.id = expr.id;
          r.shapeExprs = expr.shapeExprs.map(function (nested) {
            return _Visitor.visitShapeExpr(nested, label);
          });
          return r;
        },
        // _visitShapeNot: visit negated shape
        visitShapeNot: function visitShapeNot(expr, label) {
          this._testUnknownAttributes(expr, ["id", "shapeExpr"], "ShapeNot", this.visitShapeNot);

          var r = {
            type: expr.type
          };
          if ("id" in expr) r.id = expr.id;
          r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, label);
          return r;
        },
        // ### `visitNodeConstraint` deep-copies the structure of a shape
        visitShape: function visitShape(shape, label) {
          var ret = {
            type: "Shape"
          };

          _ShExUtil._expect(shape, "type", "Shape");

          this._maybeSet(shape, ret, "Shape", ["id", // "virtual", "inherit", -- futureWork
          "closed", "expression", "extra", "semActs", "annotations"]);

          return ret;
        },
        // ### `visitNodeConstraint` deep-copies the structure of a shape
        visitNodeConstraint: function visitNodeConstraint(shape, label) {
          var ret = {
            type: "NodeConstraint"
          };

          _ShExUtil._expect(shape, "type", "NodeConstraint");

          this._maybeSet(shape, ret, "NodeConstraint", ["id", // "virtual", "inherit", -- futureWork
          "nodeKind", "datatype", "pattern", "flags", "length", "reference", "minlength", "maxlength", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values", "annotations", "semActs"]);

          return ret;
        },
        visitShapeRef: function visitShapeRef(reference) {
          if (typeof reference !== "string") {
            var ex = Exception("visitShapeRef expected a string, not " + JSON.stringify(reference));
            console.warn(ex);
            throw ex;
          }

          return reference;
        },
        visitShapeExternal: function visitShapeExternal(expr) {
          this._testUnknownAttributes(expr, ["id"], "ShapeExternal", this.visitShapeNot);

          return extend("id" in expr ? {
            id: expr.id
          } : {}, {
            type: "ShapeExternal"
          });
        },
        // _visitGroup: visit a grouping expression (someOf or eachOf)
        _visitGroup: function _visitGroup(expr, type) {
          var _Visitor = this;

          var r = Object.assign( // pre-declare an id so it sorts to the top
          "id" in expr ? {
            id: null
          } : {}, {
            type: expr.type
          });
          r.expressions = expr.expressions.map(function (nested) {
            return _Visitor.visitExpression(nested);
          });
          return this._maybeSet(expr, r, "expr", ["id", "min", "max", "annotations", "semActs"], ["expressions"]);
        },
        visitTripleConstraint: function visitTripleConstraint(expr) {
          return this._maybeSet(expr, Object.assign( // pre-declare an id so it sorts to the top
          "id" in expr ? {
            id: null
          } : {}, {
            type: "TripleConstraint"
          }), "TripleConstraint", ["id", "inverse", "predicate", "valueExpr", "min", "max", "annotations", "semActs"]);
        },
        visitExpression: function visitExpression(expr) {
          if (typeof expr === "string") return this.visitInclusion(expr);
          var r = expr.type === "TripleConstraint" ? this.visitTripleConstraint(expr) : expr.type === "OneOf" ? this.visitOneOf(expr) : expr.type === "EachOf" ? this.visitEachOf(expr) : null;
          if (r === null) throw Error("unexpected expression type: " + expr.type);else return r;
        },
        visitValues: function visitValues(values) {
          var _Visitor = this;

          return values.map(function (t) {
            return isTerm(t) || t.type === "Language" ? t : _Visitor.visitStemRange(t);
          });
        },
        visitStemRange: function visitStemRange(t) {
          var _Visitor = this; // console.log(Error(t.type).stack);
          // _ShExUtil._expect(t, "type", "IriStemRange");


          if (!("type" in t)) _Visitor.runtimeError(Error("expected " + JSON.stringify(t) + " to have a 'type' attribute."));
          var stemRangeTypes = ["IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
          if (stemRangeTypes.indexOf(t.type) === -1) _Visitor.runtimeError(Error("expected type attribute '" + t.type + "' to be in '" + stemRangeTypes + "'."));
          var stem;

          if (isTerm(t)) {
            _ShExUtil._expect(t.stem, "type", "Wildcard");

            stem = {
              type: t.type,
              stem: {
                type: "Wildcard"
              }
            };
          } else {
            stem = {
              type: t.type,
              stem: t.stem
            };
          }

          if (t.exclusions) {
            stem.exclusions = t.exclusions.map(function (c) {
              return _Visitor.visitExclusion(c);
            });
          }

          return stem;
        },
        visitExclusion: function visitExclusion(c) {
          if (!isTerm(c)) {
            // _ShExUtil._expect(c, "type", "IriStem");
            if (!("type" in c)) _Visitor.runtimeError(Error("expected " + JSON.stringify(c) + " to have a 'type' attribute."));
            var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
            if (stemTypes.indexOf(c.type) === -1) _Visitor.runtimeError(Error("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'."));
            return {
              type: c.type,
              stem: c.stem
            };
          } else {
            return c;
          }
        },
        visitInclusion: function visitInclusion(inclusion) {
          if (typeof inclusion !== "string") {
            var ex = Exception("visitInclusion expected a string, not " + JSON.stringify(inclusion));
            console.warn(ex);
            throw ex;
          }

          return inclusion;
        },
        _maybeSet: function _maybeSet(obj, ret, context, members, ignore) {
          var _Visitor = this;

          this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet);

          members.forEach(function (member) {
            var methodName = "visit" + member.charAt(0).toUpperCase() + member.slice(1);

            if (member in obj) {
              var f = _Visitor[methodName];

              if (typeof f !== "function") {
                throw Error(methodName + " not found in Visitor");
              }

              var t = f.call(_Visitor, obj[member]);

              if (t !== undefined) {
                ret[member] = t;
              }
            }
          });
          return ret;
        },
        _visitValue: function _visitValue(v) {
          return v;
        },
        _visitList: function _visitList(l) {
          return l.slice();
        },
        _testUnknownAttributes: function _testUnknownAttributes(obj, expected, context, captureFrame) {
          var unknownMembers = Object.keys(obj).reduce(function (ret, k) {
            return k !== "type" && expected.indexOf(k) === -1 ? ret.concat(k) : ret;
          }, []);

          if (unknownMembers.length > 0) {
            var e = Error("unknown propert" + (unknownMembers.length > 1 ? "ies" : "y") + ": " + unknownMembers.map(function (p) {
              return "\"" + p + "\"";
            }).join(",") + " in " + context + ": " + JSON.stringify(obj));
            Error.captureStackTrace(e, captureFrame);
            throw e;
          }
        }
      };
      r.visitBase = r.visitStart = r.visitVirtual = r.visitClosed = r["visit@context"] = r._visitValue;
      r.visitInherit = r.visitExtra = r.visitAnnotations = r._visitList;
      r.visitInverse = r.visitPredicate = r._visitValue;
      r.visitName = r.visitId = r.visitCode = r.visitMin = r.visitMax = r._visitValue;
      r.visitType = r.visitNodeKind = r.visitDatatype = r.visitPattern = r.visitFlags = r.visitLength = r.visitMinlength = r.visitMaxlength = r.visitMininclusive = r.visitMinexclusive = r.visitMaxinclusive = r.visitMaxexclusive = r.visitTotaldigits = r.visitFractiondigits = r._visitValue;
      r.visitOneOf = r.visitEachOf = r._visitGroup;
      r.visitShapeAnd = r.visitShapeOr = r._visitShapeGroup;
      r.visitInclude = r._visitValue;
      r.visitValueExpr = r.visitShapeExpr;
      return r;
    },
    // tests
    // console.warn("HERE:", ShExJtoAS({"type":"Schema","shapes":[{"id":"http://all.example/S1","type":"Shape","expression":
    //  { "id":"http://all.example/S1e", "type":"EachOf","expressions":[ ] },
    // // { "id":"http://all.example/S1e","type":"TripleConstraint","predicate":"http://all.example/p1"},
    // "extra":["http://all.example/p3","http://all.example/p1","http://all.example/p2"]
    // }]}).shapes['http://all.example/S1']);
    ShExJtoAS: function ShExJtoAS(schema) {
      var _ShExUtil = this;

      schema._prefixes = schema.prefixes || {};
      schema._index = this.index(schema);
      return schema;
    },
    AStoShExJ: function AStoShExJ(schema, abbreviate) {
      schema["@context"] = schema["@context"] || "http://www.w3.org/ns/shex.jsonld";
      return schema;
    },
    ShExRVisitor: function ShExRVisitor(knownShapeExprs) {
      var v = ShExUtil.Visitor();
      var knownExpressions = {};
      var oldVisitShapeExpr = v.visitShapeExpr,
          oldVisitValueExpr = v.visitValueExpr,
          oldVisitExpression = v.visitExpression;
      v.keepShapeExpr = oldVisitShapeExpr;

      v.visitShapeExpr = v.visitValueExpr = function (expr, label) {
        if (typeof expr === "string") return expr;

        if ("id" in expr) {
          if (knownShapeExprs.indexOf(expr.id) !== -1 || Object.keys(expr).length === 1) return expr.id;
          delete expr.id;
        }

        return oldVisitShapeExpr.call(this, expr, label);
      };

      v.visitExpression = function (expr) {
        if (typeof expr === "string") // shortcut for recursive references e.g. 1Include1 and ../doc/TODO.md
          return expr;

        if ("id" in expr) {
          if (expr.id in knownExpressions) {
            knownExpressions[expr.id].refCount++;
            return expr.id;
          }
        }

        var ret = oldVisitExpression.call(this, expr); // Everything from RDF has an ID, usually a BNode.

        knownExpressions[expr.id] = {
          refCount: 1,
          expr: ret
        };
        return ret;
      };

      v.cleanIds = function () {
        for (var k in knownExpressions) {
          var known = knownExpressions[k];
          if (known.refCount === 1 && RdfTerm.isBlank(known.expr.id)) delete known.expr.id;
        }

        ;
      };

      return v;
    },
    // tests
    // var shexr = ShExUtil.ShExRtoShExJ({ "type": "Schema", "shapes": [
    //   { "id": "http://a.example/S1", "type": "Shape",
    //     "expression": {
    //       "type": "TripleConstraint", "predicate": "http://a.example/p1",
    //       "valueExpr": {
    //         "type": "ShapeAnd", "shapeExprs": [
    //           { "type": "NodeConstraint", "nodeKind": "bnode" },
    //           { "id": "http://a.example/S2", "type": "Shape",
    //             "expression": {
    //               "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
    //           //            "http://a.example/S2"
    //         ] } } },
    //   { "id": "http://a.example/S2", "type": "Shape",
    //     "expression": {
    //       "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
    // ] });
    // console.warn("HERE:", shexr.shapes[0].expression.valueExpr);
    // ShExUtil.ShExJtoAS(shexr);
    // console.warn("THERE:", shexr.shapes["http://a.example/S1"].expression.valueExpr);
    ShExRtoShExJ: function ShExRtoShExJ(schema) {
      // compile a list of known shapeExprs
      var knownShapeExprs = [];
      if ("shapes" in schema) knownShapeExprs = knownShapeExprs.concat(schema.shapes.map(function (sh) {
        return sh.id;
      })); // normalize references to those shapeExprs

      var v = this.ShExRVisitor(knownShapeExprs);
      if ("start" in schema) schema.start = v.visitShapeExpr(schema.start);
      if ("shapes" in schema) schema.shapes = schema.shapes.map(function (sh) {
        return v.keepShapeExpr(sh);
      }); // remove extraneous BNode IDs

      v.cleanIds();
      return schema;
    },
    valGrep: function valGrep(obj, type, f) {
      var _ShExUtil = this;

      var ret = [];

      for (var i in obj) {
        var o = obj[i];

        if (_typeof(o) === "object") {
          if ("type" in o && o.type === type) ret.push(f(o));
          ret.push.apply(ret, _ShExUtil.valGrep(o, type, f));
        }
      }

      return ret;
    },
    n3jsToTurtle: function n3jsToTurtle(res) {
      function termToLex(node) {
        return _typeof(node) === "object" ? "\"" + node.value + "\"" + ("type" in node ? "^^<" + node.type + ">" : "language" in node ? "@" + node.language : "") : RdfTerm.isIRI(node) ? "<" + node + ">" : RdfTerm.isBlank(node) ? node : "???";
      }

      return this.valGrep(res, "TestedTriple", function (t) {
        return ["subject", "predicate", "object"].map(function (k) {
          return termToLex(t[k]);
        }).join(" ") + " .";
      });
    },
    valToN3js: function valToN3js(res) {
      return this.valGrep(res, "TestedTriple", function (t) {
        var ret = JSON.parse(JSON.stringify(t));
        if (_typeof(t.object) === "object") ret.object = "\"" + t.object.value + "\"" + ("type" in t.object ? "^^" + t.object.type : "language" in t.object ? "@" + t.object.language : "");
        return ret;
      });
    }
  }, _defineProperty(_ShExUtil2, "n3jsToTurtle", function n3jsToTurtle(n3js) {
    function termToLex(node) {
      if (RdfTerm.isIRI(node)) return "<" + node + ">";
      if (RdfTerm.isBlank(node)) return node;
      var t = RdfTerm.getLiteralType(node);
      if (t && t !== "http://www.w3.org/2001/XMLSchema#string") return "\"" + RdfTerm.getLiteralValue(node) + "\"" + "^^<" + t + ">";
      return node;
    }

    return n3js.map(function (t) {
      return ["subject", "predicate", "object"].map(function (k) {
        return termToLex(t[k]);
      }).join(" ") + " .";
    });
  }), _defineProperty(_ShExUtil2, "index", function index(schema) {
    var index = {
      shapeExprs: {},
      tripleExprs: {}
    };
    var v = ShExUtil.Visitor();
    var oldVisitExpression = v.visitExpression;

    v.visitExpression = function (expression) {
      if (_typeof(expression) === "object" && "id" in expression) index.tripleExprs[expression.id] = expression;
      return oldVisitExpression.call(v, expression);
    };

    var oldVisitShapeExpr = v.visitShapeExpr;

    v.visitShapeExpr = v.visitValueExpr = function (shapeExpr, label) {
      if (_typeof(shapeExpr) === "object" && "id" in shapeExpr) index.shapeExprs[shapeExpr.id] = shapeExpr;
      return oldVisitShapeExpr.call(v, shapeExpr, label);
    };

    v.visitSchema(schema);
    return index;
  }), _defineProperty(_ShExUtil2, "canonicalize", function canonicalize(schema, trimIRI) {
    var ret = JSON.parse(JSON.stringify(schema));
    ret["@context"] = ret["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete ret._prefixes;
    delete ret._base;
    var index = ret._index || this.index(schema);
    delete ret._index;
    var sourceMap = ret._sourceMap;
    delete ret._sourceMap; // Don't delete ret.productions as it's part of the AS.

    var v = ShExUtil.Visitor();
    var knownExpressions = [];
    var oldVisitInclusion = v.visitInclusion,
        oldVisitExpression = v.visitExpression;

    v.visitInclusion = function (inclusion) {
      if (knownExpressions.indexOf(inclusion) === -1 && inclusion in index.tripleExprs) {
        knownExpressions.push(inclusion);
        return oldVisitExpression.call(v, index.tripleExprs[inclusion]);
      }

      return oldVisitInclusion.call(v, inclusion);
    };

    v.visitExpression = function (expression) {
      if (_typeof(expression) === "object" && "id" in expression) {
        if (knownExpressions.indexOf(expression.id) === -1) {
          knownExpressions.push(expression.id);
          return oldVisitExpression.call(v, index.tripleExprs[expression.id]);
        }

        return expression.id; // Inclusion
      }

      return oldVisitExpression.call(v, expression);
    };

    if (trimIRI) {
      v.visitIRI = function (i) {
        return i.replace(trimIRI, "");
      };

      if ("imports" in ret) ret.imports = v.visitImports(ret.imports);
    }

    if ("shapes" in ret) {
      ret.shapes = Object.keys(index.shapeExprs).sort().map(function (k) {
        if ("extra" in index.shapeExprs[k]) index.shapeExprs[k].extra.sort();
        return v.visitShapeExpr(index.shapeExprs[k]);
      });
    }

    return ret;
  }), _defineProperty(_ShExUtil2, "BiDiClosure", function BiDiClosure() {
    return {
      needs: {},
      neededBy: {},
      inCycle: [],
      test: function test() {
        function expect(l, r) {
          var ls = JSON.stringify(l),
              rs = JSON.stringify(r);
          if (ls !== rs) throw Error(ls + " !== " + rs);
        } // this.add(1, 2); expect(this.needs, { 1:[2]                     }); expect(this.neededBy, { 2:[1]                     });
        // this.add(3, 4); expect(this.needs, { 1:[2], 3:[4]              }); expect(this.neededBy, { 2:[1], 4:[3]              });
        // this.add(2, 3); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1] });


        this.add(2, 3);
        expect(this.needs, {
          2: [3]
        });
        expect(this.neededBy, {
          3: [2]
        });
        this.add(1, 2);
        expect(this.needs, {
          1: [2, 3],
          2: [3]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1]
        });
        this.add(1, 3);
        expect(this.needs, {
          1: [2, 3],
          2: [3]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1]
        });
        this.add(3, 4);
        expect(this.needs, {
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(6, 7);
        expect(this.needs, {
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(5, 6);
        expect(this.needs, {
          5: [6, 7],
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(5, 7);
        expect(this.needs, {
          5: [6, 7],
          6: [7],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(7, 8);
        expect(this.needs, {
          5: [6, 7, 8],
          6: [7, 8],
          7: [8],
          1: [2, 3, 4],
          2: [3, 4],
          3: [4]
        });
        expect(this.neededBy, {
          7: [6, 5],
          6: [5],
          8: [7, 6, 5],
          3: [2, 1],
          2: [1],
          4: [3, 2, 1]
        });
        this.add(4, 5);
        expect(this.needs, {
          1: [2, 3, 4, 5, 6, 7, 8],
          2: [3, 4, 5, 6, 7, 8],
          3: [4, 5, 6, 7, 8],
          4: [5, 6, 7, 8],
          5: [6, 7, 8],
          6: [7, 8],
          7: [8]
        });
        expect(this.neededBy, {
          2: [1],
          3: [2, 1],
          4: [3, 2, 1],
          5: [4, 3, 2, 1],
          6: [5, 4, 3, 2, 1],
          7: [6, 5, 4, 3, 2, 1],
          8: [7, 6, 5, 4, 3, 2, 1]
        });
      },
      add: function add(needer, needie, negated) {
        var r = this;
        if (!(needer in r.needs)) r.needs[needer] = [];
        if (!(needie in r.neededBy)) r.neededBy[needie] = []; // // [].concat.apply(r.needs[needer], [needie], r.needs[needie]). emitted only last element

        r.needs[needer] = r.needs[needer].concat([needie], r.needs[needie]).filter(function (el, ord, l) {
          return el !== undefined && l.indexOf(el) === ord;
        }); // // [].concat.apply(r.neededBy[needie], [needer], r.neededBy[needer]). emitted only last element

        r.neededBy[needie] = r.neededBy[needie].concat([needer], r.neededBy[needer]).filter(function (el, ord, l) {
          return el !== undefined && l.indexOf(el) === ord;
        });
        if (needer in this.neededBy) this.neededBy[needer].forEach(function (e) {
          r.needs[e] = r.needs[e].concat([needie], r.needs[needie]).filter(function (el, ord, l) {
            return el !== undefined && l.indexOf(el) === ord;
          });
        });
        if (needie in this.needs) this.needs[needie].forEach(function (e) {
          r.neededBy[e] = r.neededBy[e].concat([needer], r.neededBy[needer]).filter(function (el, ord, l) {
            return el !== undefined && l.indexOf(el) === ord;
          });
        }); // this.neededBy[needie].push(needer);

        if (r.needs[needer].indexOf(needer) !== -1) r.inCycle = r.inCycle.concat(r.needs[needer]);
      },
      trim: function trim() {
        function _trim(a) {
          // filter(function (el, ord, l) { return l.indexOf(el) === ord; })
          for (var i = a.length - 1; i > -1; --i) {
            if (a.indexOf(a[i]) < i) a.splice(i, i + 1);
          }
        }

        for (k in this.needs) {
          _trim(this.needs[k]);
        }

        for (k in this.neededBy) {
          _trim(this.neededBy[k]);
        }
      },
      foundIn: {},
      addIn: function addIn(tripleExpr, shapeExpr) {
        this.foundIn[tripleExpr] = shapeExpr;
      }
    };
  }), _defineProperty(_ShExUtil2, "nestShapes", function nestShapes(schema) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ShExUtil = this;

    var index = schema._index || this.index(schema);

    if (!('no' in options)) {
      options.no = false;
    }

    var shapeLabels = Object.keys(index.shapeExprs || []);
    var shapeReferences = {};
    shapeLabels.forEach(function (label) {
      var shape = index.shapeExprs[label];
      noteReference(label, null); // just note the shape so we have a complete list at the end

      shape = _ShExUtil.skipDecl(shape);

      if (shape.type === 'Shape') {
        if ('extends' in shape) {
          shape["extends"].forEach(function (parent) {
            return noteReference(parent, shape);
          });
        }

        if ('expression' in shape) {
          (_ShExUtil.simpleTripleConstraints(shape) || []).forEach(function (tc) {
            var target = _ShExUtil.getValueType(tc.valueExpr, true);

            noteReference(target, {
              type: 'tc',
              shapeLabel: label,
              tc: tc
            });
          });
        }
      } else if (shape.type === 'NodeConstraint') {// can't have any refs to other shapes
      } else {
        throw Error('nestShapes currently only supports Shapes and NodeConstraints');
      }
    });
    var nestables = Object.keys(shapeReferences).filter(function (label) {
      return shapeReferences[label].length === 1 && shapeReferences[label][0].type === 'tc' // no inheritance support yet
      && _ShExUtil.skipDecl(index.shapeExprs[label]).type === 'Shape';
    } // Don't nest e.g. valuesets for now
    ).reduce(function (acc, label) {
      acc[label] = {
        referrer: shapeReferences[label][0].shapeLabel,
        predicate: shapeReferences[label][0].tc.predicate
      };
      return acc;
    }, {});

    if (!options.no) {
      var oldToNew = {};

      if (options.rename) {
        if (!('transform' in options)) {
          options.transform = function () {
            var map = shapeLabels.reduce(function (acc, k, idx) {
              acc[k] = '_:transformed' + idx;
              return acc;
            }, {});
            return function (id, shapeExpr) {
              return map[id];
            };
          }();
        }

        Object.keys(nestables).forEach(function (oldName) {
          var shapeExpr = index.shapeExprs[oldName];
          var newName = options.transform(oldName, shapeExpr);
          oldToNew[oldName] = newName;
          shapeLabels[shapeLabels.indexOf(oldName)] = newName;
          nestables[newName] = nestables[oldName];
          nestables[newName].was = oldName;
          delete nestables[oldName];
          index.shapeExprs[newName] = index.shapeExprs[oldName];
          delete index.shapeExprs[oldName];

          if (shapeReferences[oldName].length !== 1) {
            throw Error('assertion: ' + oldName + ' doesn\'t have one reference: [' + shapeReferences[oldName] + ']');
          }

          var ref = shapeReferences[oldName][0];

          if (ref.type === 'tc') {
            if (ref.tc.valueExpr.type === 'ShapeRef') {
              ref.tc.valueExpr.reference = newName;
            } else {
              throw Error('assertion: rename not implemented for TripleConstraint expr: ' + ref.tc.valueExpr); // _ShExUtil.setValueType(ref, newName)
            }
          } else if (ref.type === 'Shape') {
            throw Error('assertion: rename not implemented for Shape: ' + ref);
          } else {
            throw Error('assertion: ' + ref.type + ' not TripleConstraint or Shape');
          }
        });
        Object.keys(nestables).forEach(function (k) {
          var n = nestables[k];

          if (n.referrer in oldToNew) {
            n.newReferrer = oldToNew[n.referrer];
          }
        }); // Restore old order for more concise diffs.

        var shapesCopy = {};
        shapeLabels.forEach(function (label) {
          return shapesCopy[label] = index.shapeExprs[label];
        });
        index.shapeExprs = shapesCopy;
      } else {
        Object.keys(nestables).forEach(function (oldName) {
          shapeReferences[oldName][0].tc.valueExpr = index.shapeExprs[oldName].shapeExpr;
          delete index.shapeExprs[oldName];
        });
      }
    } // console.dir(nestables)
    // console.dir(shapeReferences)


    return nestables;

    function noteReference(id, reference) {
      if (!(id in shapeReferences)) {
        shapeReferences[id] = [];
      }

      if (reference) {
        shapeReferences[id].push(reference);
      }
    }
  }), _defineProperty(_ShExUtil2, "getPredicateUsage", function getPredicateUsage(schema) {
    var untyped = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _ShExUtil = this; // populate shapeHierarchy


    var shapeHierarchy = Hierarchy.create();
    Object.keys(schema.shapes).forEach(function (label) {
      var shapeExpr = _ShExUtil.skipDecl(schema.shapes[label]);

      if (shapeExpr.type === 'Shape') {
        (shapeExpr["extends"] || []).forEach(function (superShape) {
          return shapeHierarchy.add(superShape, label);
        });
      }
    });
    Object.keys(schema.shapes).forEach(function (label) {
      if (!(label in shapeHierarchy.parents)) shapeHierarchy.parents[label] = [];
    });
    var predicates = {}; // IRI->{ uses: [shapeLabel], commonType: shapeExpr }

    Object.keys(schema.shapes).forEach(function (shapeLabel) {
      var shapeExpr = _ShExUtil.skipDecl(schema.shapes[shapeLabel]);

      if (shapeExpr.type === 'Shape') {
        var tcs = _ShExUtil.simpleTripleConstraints(shapeExpr) || [];
        tcs.forEach(function (tc) {
          var newType = _ShExUtil.getValueType(tc.valueExpr);

          if (!(tc.predicate in predicates)) {
            predicates[tc.predicate] = {
              uses: [shapeLabel],
              commonType: newType,
              polymorphic: false
            };

            if (_typeof(newType) === 'object') {
              untyped[tc.predicate] = {
                shapeLabel: shapeLabel,
                predicate: tc.predicate,
                newType: newType,
                references: []
              };
            }
          } else {
            predicates[tc.predicate].uses.push(shapeLabel);
            var curType = predicates[tc.predicate].commonType;

            if (_typeof(curType) === 'object' || curType === null) {
              // another use of a predicate with no commonType
              // console.warn(`${shapeLabel} ${tc.predicate}:${newType} uses untypable predicate`)
              untyped[tc.predicate].references.push({
                shapeLabel: shapeLabel,
                newType: newType
              });
            } else if (_typeof(newType) === 'object') {
              // first use of a predicate with no detectable commonType
              predicates[tc.predicate].commonType = null;
              untyped[tc.predicate] = {
                shapeLabel: shapeLabel,
                predicate: tc.predicate,
                curType: curType,
                newType: newType,
                references: []
              };
            } else if (curType === newType) {
              ; // same type again
            } else if (shapeHierarchy.parents[curType].indexOf(newType) !== -1) {
              predicates[tc.predicate].polymorphic = true; // already covered by current commonType
            } else {
              var idx = shapeHierarchy.parents[newType].indexOf(curType);

              if (idx === -1) {
                var intersection = shapeHierarchy.parents[curType].filter(function (lab) {
                  return -1 !== shapeHierarchy.parents[newType].indexOf(lab);
                });

                if (intersection.length === 0) {
                  untyped[tc.predicate] = {
                    shapeLabel: shapeLabel,
                    predicate: tc.predicate,
                    curType: curType,
                    newType: newType,
                    references: []
                  }; // console.warn(`${shapeLabel} ${tc.predicate} : ${newType} isn\'t related to ${curType}`)

                  predicates[tc.predicate].commonType = null;
                } else {
                  predicates[tc.predicate].commonType = intersection[0];
                  predicates[tc.predicate].polymorphic = true;
                }
              } else {
                predicates[tc.predicate].commonType = shapeHierarchy.parents[newType][idx];
                predicates[tc.predicate].polymorphic = true;
              }
            }
          }
        });
      }
    });
    return predicates;
  }), _defineProperty(_ShExUtil2, "simpleTripleConstraints", function simpleTripleConstraints(shape) {
    if (!('expression' in shape)) {
      return [];
    }

    if (shape.expression.type === 'TripleConstraint') {
      return [shape.expression];
    }

    if (shape.expression.type === 'EachOf' && !shape.expression.expressions.find(function (expr) {
      return expr.type !== 'TripleConstraint';
    })) {
      return shape.expression.expressions;
    }

    throw Error('can\'t (yet) express ' + JSON.stringify(shape));
  }), _defineProperty(_ShExUtil2, "skipDecl", function skipDecl(shapeExpr) {
    return shapeExpr.type === 'ShapeDecl' ? shapeExpr.shapeExpr : shapeExpr;
  }), _defineProperty(_ShExUtil2, "getValueType", function getValueType(valueExpr) {
    if (typeof valueExpr === 'string') {
      return valueExpr;
    }

    if (valueExpr.reference) {
      return valueExpr.reference;
    }

    if (valueExpr.nodeKind === 'iri') {
      return OWL.Thing;
    } // !! push this test to callers


    if (valueExpr.datatype) {
      return valueExpr.datatype;
    } // if (valueExpr.extends && valueExpr.extends.length === 1) { return valueExpr.extends[0] }


    return valueExpr; // throw Error('no value type for ' + JSON.stringify(valueExpr))
  }), _defineProperty(_ShExUtil2, "getDependencies", function getDependencies(schema, ret) {
    ret = ret || this.BiDiClosure();
    (schema.shapes || []).forEach(function (shape) {
      function _walkShapeExpression(shapeExpr, negated) {
        if (typeof shapeExpr === "string") {
          // ShapeRef
          ret.add(shape.id, shapeExpr);
        } else if (shapeExpr.type === "ShapeOr" || shapeExpr.type === "ShapeAnd") {
          shapeExpr.shapeExprs.forEach(function (expr) {
            _walkShapeExpression(expr, negated);
          });
        } else if (shapeExpr.type === "ShapeNot") {
          _walkShapeExpression(shapeExpr.shapeExpr, negated ^ 1); // !!! test negation

        } else if (shapeExpr.type === "Shape") {
          _walkShape(shapeExpr, negated);
        } else if (shapeExpr.type === "NodeConstraint") {// no impact on dependencies
        } else if (shapeExpr.type === "ShapeExternal") {} else throw Error("expected Shape{And,Or,Ref,External} or NodeConstraint in " + JSON.stringify(shapeExpr));
      }

      function _walkShape(shape, negated) {
        function _walkTripleExpression(tripleExpr, negated) {
          function _exprGroup(exprs, negated) {
            exprs.forEach(function (nested) {
              _walkTripleExpression(nested, negated); // ?? negation allowed?

            });
          }

          function _walkTripleConstraint(tc, negated) {
            if (tc.valueExpr) _walkShapeExpression(tc.valueExpr, negated);
            if (negated && ret.inCycle.indexOf(shape.id) !== -1) // illDefined/negatedRefCycle.err
              throw Error("Structural error: " + shape.id + " appears in negated cycle");
          }

          if (typeof tripleExpr === "string") {
            // Inclusion
            ret.add(shape.id, tripleExpr);
          } else {
            if ("id" in tripleExpr) ret.addIn(tripleExpr.id, shape.id);

            if (tripleExpr.type === "TripleConstraint") {
              _walkTripleConstraint(tripleExpr, negated);
            } else if (tripleExpr.type === "OneOf" || tripleExpr.type === "EachOf") {
              _exprGroup(tripleExpr.expressions);
            } else {
              throw Error("expected {TripleConstraint,OneOf,EachOf,Inclusion} in " + tripleExpr);
            }
          }
        }

        if (shape.inherit && shape.inherit.length > 0) shape.inherit.forEach(function (i) {
          ret.add(shape.id, i);
        });
        if (shape.expression) _walkTripleExpression(shape.expression, negated);
      }

      _walkShapeExpression(shape, 0); // 0 means false for bitwise XOR

    });
    return ret;
  }), _defineProperty(_ShExUtil2, "partition", function partition(schema, includes, deps, cantFind) {
    var inputIndex = schema._index || this.index(schema);
    var outputIndex = {
      shapeExprs: new Map(),
      tripleExprs: new Map()
    };
    includes = includes instanceof Array ? includes : [includes]; // build dependency tree if not passed one

    deps = deps || this.getDependencies(schema);

    cantFind = cantFind || function (what, why) {
      throw new Error("Error: can't find shape " + (why ? why + " dependency " + what : what));
    };

    var partition = {};

    for (var k in schema) {
      partition[k] = k === "shapes" ? [] : schema[k];
    }

    includes.forEach(function (i) {
      if (i in outputIndex.shapeExprs) {// already got it.
      } else if (i in inputIndex.shapeExprs) {
        var adding = inputIndex.shapeExprs[i];
        partition.shapes.push(adding);
        outputIndex.shapeExprs[adding.id] = adding;
        if (i in deps.needs) deps.needs[i].forEach(function (n) {
          // Turn any needed TE into an SE.
          if (n in deps.foundIn) n = deps.foundIn[n];

          if (n in outputIndex.shapeExprs) {} else if (n in inputIndex.shapeExprs) {
            var needed = inputIndex.shapeExprs[n];
            partition.shapes.push(needed);
            outputIndex.shapeExprs[needed.id] = needed;
          } else cantFind(n, i);
        });
      } else {
        cantFind(i, "supplied");
      }
    });
    return partition;
  }), _defineProperty(_ShExUtil2, "flatten", function flatten(schema, deps, cantFind) {
    var v = this.Visitor();
    return v.visitSchema(schema);
  }), _defineProperty(_ShExUtil2, "emptySchema", function emptySchema() {
    return {
      type: "Schema"
    };
  }), _defineProperty(_ShExUtil2, "merge", function merge(left, right, overwrite, inPlace) {
    var ret = inPlace ? left : this.emptySchema();

    function mergeArray(attr) {
      Object.keys(left[attr] || {}).forEach(function (key) {
        if (!(attr in ret)) ret[attr] = {};
        ret[attr][key] = left[attr][key];
      });
      Object.keys(right[attr] || {}).forEach(function (key) {
        if (!(attr in left) || !(key in left[attr]) || overwrite) {
          if (!(attr in ret)) ret[attr] = {};
          ret[attr][key] = right[attr][key];
        }
      });
    }

    function mergeMap(attr) {
      (left[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in ret)) ret[attr] = new Map();
        ret[attr].set(key, left[attr].get(key));
      });
      (right[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in left) || !left[attr].has(key) || overwrite) {
          if (!(attr in ret)) ret[attr] = new Map();
          ret[attr].set(key, right[attr].get(key));
        }
      });
    } // base


    if ("_base" in left) ret._base = left._base;
    if ("_base" in right) if (!("_base" in left) || overwrite) ret._base = right._base;
    mergeArray("_prefixes");
    mergeMap("_sourceMap");
    if ("imports" in right) if (!("imports" in left) || overwrite) ret.imports = right.imports; // startActs

    if ("startActs" in left) ret.startActs = left.startActs;
    if ("startActs" in right) if (!("startActs" in left) || overwrite) ret.startActs = right.startActs; // start

    if ("start" in left) ret.start = left.start;
    if ("start" in right) if (!("start" in left) || overwrite) ret.start = right.start;
    var lindex = left._index || this.index(left); // shapes

    if (!inPlace) (left.shapes || []).forEach(function (lshape) {
      if (!("shapes" in ret)) ret.shapes = [];
      ret.shapes.push(lshape);
    });
    (right.shapes || []).forEach(function (rshape) {
      if (!("shapes" in left) || !(rshape.id in lindex.shapeExprs) || overwrite) {
        if (!("shapes" in ret)) ret.shapes = [];
        ret.shapes.push(rshape);
      }
    });
    if (left._index || right._index) ret._index = this.index(ret); // inefficient; could build above

    return ret;
  }), _defineProperty(_ShExUtil2, "absolutizeResults", function absolutizeResults(parsed, base) {
    // !! duplicate of Validation-test.js:84: var referenceResult = parseJSONFile(resultsFile...)
    function mapFunction(k, obj) {
      // resolve relative URLs in results file
      if (["shape", "reference", "node", "subject", "predicate", "object"].indexOf(k) !== -1 && RdfTerm.isIRI(obj[k])) {
        obj[k] = RdfTerm.resolveRelativeIRI(base, obj[k]);
      }
    }

    function resolveRelativeURLs(obj) {
      Object.keys(obj).forEach(function (k) {
        if (_typeof(obj[k]) === "object") {
          resolveRelativeURLs(obj[k]);
        }

        if (mapFunction) {
          mapFunction(k, obj);
        }
      });
    }

    resolveRelativeURLs(parsed);
    return parsed;
  }), _defineProperty(_ShExUtil2, "getProofGraph", function getProofGraph(res, db, dataFactory) {
    function _dive1(solns) {
      if (solns.type === "NodeTest" || solns.type === "NodeConstraintTest") {} else if (solns.type === "SolutionList" || solns.type === "ShapeAndResults") {
        solns.solutions.forEach(function (s) {
          if (s.solution) // no .solution for <S> {}
            _dive1(s.solution);
        });
      } else if (solns.type === "ShapeOrResults") {
        _dive1(solns.solution);
      } else if (solns.type === "ShapeTest") {
        if ("solution" in solns) _dive1(solns.solution);
      } else if (solns.type === "OneOfSolutions" || solns.type === "EachOfSolutions") {
        solns.solutions.forEach(function (s) {
          _dive1(s);
        });
      } else if (solns.type === "OneOfSolution" || solns.type === "EachOfSolution") {
        solns.expressions.forEach(function (s) {
          _dive1(s);
        });
      } else if (solns.type === "TripleConstraintSolutions") {
        solns.solutions.map(function (s) {
          if (s.type !== "TestedTriple") throw Error("unexpected result type: " + s.type);
          var s2 = s;
          if (_typeof(s2.object) === "object") s2.object = "\"" + s2.object.value.replace(/"/g, "\\\"") + "\"" + (s2.object.language ? "@" + s2.object.language : s2.object.type ? "^^" + s2.object.type : "");
          db.addQuad(RdfTerm.externalTriple(s2, dataFactory));

          if ("referenced" in s) {
            _dive1(s.referenced);
          }
        });
      } else {
        throw Error("unexpected expr type " + solns.type + " in " + JSON.stringify(solns));
      }
    }

    _dive1(res);

    return db;
  }), _defineProperty(_ShExUtil2, "validateSchema", function validateSchema(schema) {
    // obselete, but may need other validations in the future.
    var _ShExUtil = this;

    var visitor = this.Visitor();
    var currentLabel = currentExtra = null;
    var currentNegated = false;
    var dependsOn = {};
    var inTE = false;
    var oldVisitShape = visitor.visitShape;
    var negativeDeps = Hierarchy.create();
    var positiveDeps = Hierarchy.create();
    var index = schema.index || this.index(schema);

    visitor.visitShape = function (shape, label) {
      var lastExtra = currentExtra;
      currentExtra = shape.extra;
      var ret = oldVisitShape.call(visitor, shape, label);
      currentExtra = lastExtra;
      return ret;
    };

    var oldVisitShapeNot = visitor.visitShapeNot;

    visitor.visitShapeNot = function (shapeNot, label) {
      var lastNegated = currentNegated;
      currentNegated ^= true;
      var ret = oldVisitShapeNot.call(visitor, shapeNot, label);
      currentNegated = lastNegated;
      return ret;
    };

    var oldVisitTripleConstraint = visitor.visitTripleConstraint;

    visitor.visitTripleConstraint = function (expr) {
      var lastNegated = currentNegated;
      if (currentExtra && currentExtra.indexOf(expr.predicate) !== -1) currentNegated ^= true;
      inTE = true;
      var ret = oldVisitTripleConstraint.call(visitor, expr);
      inTE = false;
      currentNegated = lastNegated;
      return ret;
    };

    var oldVisitShapeRef = visitor.visitShapeRef;

    visitor.visitShapeRef = function (shapeRef) {
      if (!(shapeRef in index.shapeExprs)) throw firstError(Error("Structural error: reference to " + JSON.stringify(shapeRef) + " not found in schema shape expressions:\n" + dumpKeys(index.shapeExprs) + "."), shapeRef);
      if (!inTE && shapeRef === currentLabel) throw firstError(Error("Structural error: circular reference to " + currentLabel + "."), shapeRef);
      (currentNegated ? negativeDeps : positiveDeps).add(currentLabel, shapeRef);
      return oldVisitShapeRef.call(visitor, shapeRef);
    };

    var oldVisitInclusion = visitor.visitInclusion;

    visitor.visitInclusion = function (inclusion) {
      var refd;
      if (!(refd = index.tripleExprs[inclusion])) throw firstError(Error("Structural error: included shape " + inclusion + " not found in schema triple expressions:\n" + dumpKeys(index.tripleExprs) + "."), inclusion); // if (refd.type !== "Shape")
      //   throw Error("Structural error: " + inclusion + " is not a simple shape.");

      return oldVisitInclusion.call(visitor, inclusion);
    };

    (schema.shapes || []).forEach(function (shape) {
      currentLabel = shape.id;
      visitor.visitShapeExpr(shape, shape.id);
    });
    var circs = Object.keys(negativeDeps.children).filter(function (k) {
      return negativeDeps.children[k].filter(function (k2) {
        return k2 in negativeDeps.children && negativeDeps.children[k2].indexOf(k) !== -1 || k2 in positiveDeps.children && positiveDeps.children[k2].indexOf(k) !== -1;
      }).length > 0;
    });
    if (circs.length) throw firstError(Error("Structural error: circular negative dependencies on " + circs.join(',') + "."), circs[0]);

    function dumpKeys(obj) {
      return obj ? Object.keys(obj).map(function (u) {
        return u.substr(0, 2) === '_:' ? u : '<' + u + '>';
      }).join("\n        ") : '- none defined -';
    }

    function firstError(e, obj) {
      if ("_sourceMap" in schema) e.location = (schema._sourceMap.get(obj) || [undefined])[0];
      return e;
    }
  }), _defineProperty(_ShExUtil2, "isWellDefined", function isWellDefined(schema) {
    this.validateSchema(schema); // var deps = this.getDependencies(schema);

    return schema;
  }), _defineProperty(_ShExUtil2, "walkVal", function walkVal(val, cb) {
    var _ShExUtil = this;

    if (val.type === "NodeTest") {
      return null;
    } else if (val.type === "ShapeTest") {
      return "solution" in val ? _ShExUtil.walkVal(val.solution, cb) : null;
    } else if (val.type === "ShapeOrResults") {
      return _ShExUtil.walkVal(val.solution || val.solutions, cb);
    } else if (val.type === "ShapeAndResults") {
      return val.solutions.reduce(function (ret, exp) {
        var n = _ShExUtil.walkVal(exp, cb);

        if (n) Object.keys(n).forEach(function (k) {
          if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
        });
        return ret;
      }, {});
    } else if (val.type === "EachOfSolutions" || val.type === "OneOfSolutions") {
      return val.solutions.reduce(function (ret, sln) {
        sln.expressions.forEach(function (exp) {
          var n = _ShExUtil.walkVal(exp, cb);

          if (n) Object.keys(n).forEach(function (k) {
            if (k in ret) ret[k] = ret[k].concat(n[k]);else ret[k] = n[k];
          });
        });
        return ret;
      }, {});
    } else if (val.type === "OneOfSolutions") {
      return val.solutions.reduce(function (ret, sln) {
        Object.assign(ret, _ShExUtil.walkVal(sln, cb));
        return ret;
      }, {});
    } else if (val.type === "TripleConstraintSolutions") {
      if ("solutions" in val) {
        var ret = {};
        var vals = [];
        ret[val.predicate] = vals;
        val.solutions.forEach(function (sln) {
          var toAdd = [];

          if (chaseList(sln.referenced, toAdd)) {
            vals = vals.concat(toAdd);
          } else {
            var newElt = cb(sln);

            if ("referenced" in sln) {
              var t = _ShExUtil.walkVal(sln.referenced, cb);

              if (t) newElt.nested = t;
            }

            vals.push(newElt);
          }

          function chaseList(li) {
            if (!li) return false;
            if (li.node === RDF.nil) return true;

            if ("solution" in li && "solutions" in li.solution && li.solution.solutions.length === 1 && "expressions" in li.solution.solutions[0] && li.solution.solutions[0].expressions.length === 2 && "predicate" in li.solution.solutions[0].expressions[0] && li.solution.solutions[0].expressions[0].predicate === RDF.first && li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
              var expressions = li.solution.solutions[0].expressions;
              var ent = expressions[0];
              var rest = expressions[1].solutions[0];
              var member = ent.solutions[0];
              var newElt = cb(member);

              if ("referenced" in member) {
                var t = _ShExUtil.walkVal(member.referenced, cb);

                if (t) newElt.nested = t;
              }

              vals.push(newElt);
              return rest.object === RDF.nil ? true : chaseList(rest.referenced);
            }
          }
        });
        return vals.length ? ret : null;
      } else {
        return null;
      }
    } else if (val.type === "Recursion") {
      return null;
    } else {
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }

    return val;
  }), _defineProperty(_ShExUtil2, "valToValues", function valToValues(val) {
    return this.walkVal(val, function (sln) {
      return {
        ldterm: sln.object
      };
    });
  }), _defineProperty(_ShExUtil2, "valToExtension", function valToExtension(val, lookfor) {
    var map = this.walkVal(val, function (sln) {
      return {
        extensions: sln.extensions
      };
    });

    function extensions(obj) {
      var list = [];
      var crushed = {};

      function crush(elt) {
        if (crushed === null) return elt;

        if (elt.constructor === Array) {
          crushed = null;
          return elt;
        }

        for (k in elt) {
          if (k in crushed) {
            crushed = null;
            return elt;
          }

          crushed[k] = elt[k];
        }

        return elt;
      }

      for (var k in obj) {
        if (k === "extensions") {
          if (obj[k]) list.push(crush(obj[k][lookfor]));
        } else if (k === "nested") {
          var nested = extensions(obj[k]);
          if (nested.constructor === Array) nested.forEach(crush);else crush(nested);
          list = list.concat(nested);
        } else {
          list.push(crush(extensions(obj[k])));
        }
      }

      return list.length === 1 ? list[0] : crushed ? crushed : list;
    }

    return extensions(map);
  }), _defineProperty(_ShExUtil2, "valuesToSchema", function valuesToSchema(values) {
    // console.log(JSON.stringify(values, null, "  "));
    var v = values;
    var t = values[RDF.type][0].ldterm;

    if (t === SX.Schema) {
      /* Schema { "@context":"http://www.w3.org/ns/shex.jsonld"
       *           startActs:[SemAct+]? start:(shapeExpr|labeledShapeExpr)?
       *           shapes:[labeledShapeExpr+]? }
       */
      var ret = {
        "@context": "http://www.w3.org/ns/shex.jsonld",
        type: "Schema"
      };
      if (SX.startActs in v) ret.startActs = v[SX.startActs].map(function (e) {
        var ret = {
          type: "SemAct",
          name: e.nested[SX.name][0].ldterm
        };
        if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
        return ret;
      });
      if (SX.imports in v) ret.imports = v[SX.imports].map(function (e) {
        return e.ldterm;
      });
      if (values[SX.start]) ret.start = extend({
        id: values[SX.start][0].ldterm
      }, shapeExpr(values[SX.start][0].nested));
      var shapes = values[SX.shapes];

      if (shapes) {
        ret.shapes = shapes.map(function (v) {
          return extend({
            id: v.ldterm
          }, shapeExpr(v.nested));
        });
      } // console.log(ret);


      return ret;
    } else {
      throw Error("unknown schema type in " + JSON.stringify(values));
    }

    function findType(v, elts, f) {
      var t = v[RDF.type][0].ldterm.substr(SX._namespace.length);
      var elt = elts[t];
      if (!elt) return Missed;

      if (elt.nary) {
        var ret = {
          type: t
        };
        ret[elt.prop] = v[SX[elt.prop]].map(function (e) {
          return valueOf(e);
        });
        return ret;
      } else {
        var ret = {
          type: t
        };

        if (elt.prop) {
          ret[elt.prop] = valueOf(v[SX[elt.prop]][0]);
        }

        return ret;
      }

      function valueOf(x) {
        return elt.expr && "nested" in x ? extend({
          id: x.ldterm
        }, f(x.nested)) : x.ldterm;
      }
    }

    function shapeExpr(v) {
      // shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
      var elts = {
        "ShapeAnd": {
          nary: true,
          expr: true,
          prop: "shapeExprs"
        },
        "ShapeOr": {
          nary: true,
          expr: true,
          prop: "shapeExprs"
        },
        "ShapeNot": {
          nary: false,
          expr: true,
          prop: "shapeExpr"
        },
        "ShapeRef": {
          nary: false,
          expr: false,
          prop: "reference"
        },
        "ShapeExternal": {
          nary: false,
          expr: false,
          prop: null
        }
      };
      var ret = findType(v, elts, shapeExpr);
      if (ret !== Missed) return ret;
      var t = v[RDF.type][0].ldterm;

      if (t === SX.Shape) {
        var ret = {
          type: "Shape"
        };
        ["closed"].forEach(function (a) {
          if (SX[a] in v) ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.extra in v) ret.extra = v[SX.extra].map(function (e) {
          return e.ldterm;
        });

        if (SX.expression in v) {
          ret.expression = "nested" in v[SX.expression][0] ? extend({
            id: v[SX.expression][0].ldterm
          }, tripleExpr(v[SX.expression][0].nested)) : v[SX.expression][0].ldterm;
        }

        if (SX.annotation in v) ret.annotations = v[SX.annotation].map(function (e) {
          return {
            type: "Annotation",
            predicate: e.nested[SX.predicate][0].ldterm,
            object: e.nested[SX.object][0].ldterm
          };
        });
        if (SX.semActs in v) ret.semActs = v[SX.semActs].map(function (e) {
          var ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
        return ret;
      } else if (t === SX.NodeConstraint) {
        var ret = {
          type: "NodeConstraint"
        };
        if (SX.values in v) ret.values = v[SX.values].map(function (v1) {
          return objectValue(v1);
        });
        if (SX.nodeKind in v) ret.nodeKind = v[SX.nodeKind][0].ldterm.substr(SX._namespace.length);
        ["length", "minlength", "maxlength", "mininclusive", "maxinclusive", "minexclusive", "maxexclusive", "totaldigits", "fractiondigits"].forEach(function (a) {
          if (SX[a] in v) ret[a] = parseFloat(v[SX[a]][0].ldterm.value);
        });
        if (SX.pattern in v) ret.pattern = v[SX.pattern][0].ldterm.value;
        if (SX.flags in v) ret.flags = v[SX.flags][0].ldterm.value;
        if (SX.datatype in v) ret.datatype = v[SX.datatype][0].ldterm;
        return ret;
      } else {
        throw Error("unknown shapeExpr type in " + JSON.stringify(v));
      }
    }

    function objectValue(v, expectString) {
      if ("nested" in v) {
        var t = v.nested[RDF.type][0].ldterm;

        if ([SX.IriStem, SX.LiteralStem, SX.LanguageStem].indexOf(t) !== -1) {
          var ldterm = v.nested[SX.stem][0].ldterm.value;
          return {
            type: t.substr(SX._namespace.length),
            stem: ldterm
          };
        } else if ([SX.Language].indexOf(t) !== -1) {
          return {
            type: "Language",
            languageTag: v.nested[SX.languageTag][0].ldterm.value
          };
        } else if ([SX.IriStemRange, SX.LiteralStemRange, SX.LanguageStemRange].indexOf(t) !== -1) {
          var st = v.nested[SX.stem][0];
          var stem = st;

          if (_typeof(st) === "object") {
            if (_typeof(st.ldterm) === "object") {
              stem = st.ldterm;
            } else if (st.ldterm.startsWith("_:")) {
              stem = {
                type: "Wildcard"
              };
            }
          }

          var ret = {
            type: t.substr(SX._namespace.length),
            stem: stem.type !== "Wildcard" ? stem.value : stem
          };

          if (SX.exclusion in v.nested) {
            // IriStemRange:
            // * [{"ldterm":"http://a.example/v1"},{"ldterm":"http://a.example/v3"}] <-- no value
            // * [{"ldterm":"_:b836","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v1"}}]}},
            //    {"ldterm":"_:b838","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v3"}}]}}]
            // LiteralStemRange:
            // * [{"ldterm":{"value":"v1"}},{"ldterm":{"value":"v3"}}]
            // * [{"ldterm":"_:b866","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v1"}}]}},
            //    {"ldterm":"_:b868","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v3"}}]}}]
            // LanguageStemRange:
            // * [{"ldterm":{"value":"fr-be"}},{"ldterm":{"value":"fr-ch"}}]
            // * [{"ldterm":"_:b851","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-be"}}]}},
            //    {"ldterm":"_:b853","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-ch"}}]}}]
            ret.exclusions = v.nested[SX.exclusion].map(function (v1) {
              return objectValue(v1, t !== SX.IriStemRange);
            });
          }

          return ret;
        } else {
          throw Error("unknown objectValue type in " + JSON.stringify(v));
        }
      } else {
        return expectString ? v.ldterm.value : v.ldterm;
      }
    }

    function tripleExpr(v) {
      // tripleExpr = EachOf | OneOf | TripleConstraint | Inclusion ;
      var elts = {
        "EachOf": {
          nary: true,
          expr: true,
          prop: "expressions"
        },
        "OneOf": {
          nary: true,
          expr: true,
          prop: "expressions"
        },
        "Inclusion": {
          nary: false,
          expr: false,
          prop: "include"
        }
      };
      var ret = findType(v, elts, tripleExpr);

      if (ret !== Missed) {
        minMaxAnnotSemActs(v, ret);
        return ret;
      }

      var t = v[RDF.type][0].ldterm;

      if (t === SX.TripleConstraint) {
        var ret = {
          type: "TripleConstraint",
          predicate: v[SX.predicate][0].ldterm
        };
        ["inverse"].forEach(function (a) {
          if (SX[a] in v) ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.valueExpr in v) ret.valueExpr = extend({
          id: v[SX.valueExpr][0].ldterm
        }, "nested" in v[SX.valueExpr][0] ? shapeExpr(v[SX.valueExpr][0].nested) : {});
        minMaxAnnotSemActs(v, ret);
        return ret;
      } else {
        throw Error("unknown tripleExpr type in " + JSON.stringify(v));
      }
    }

    function minMaxAnnotSemActs(v, ret) {
      if (SX.min in v) ret.min = parseInt(v[SX.min][0].ldterm.value);

      if (SX.max in v) {
        ret.max = parseInt(v[SX.max][0].ldterm.value);
        if (isNaN(ret.max)) ret.max = UNBOUNDED;
      }

      if (SX.annotation in v) ret.annotations = v[SX.annotation].map(function (e) {
        return {
          type: "Annotation",
          predicate: e.nested[SX.predicate][0].ldterm,
          object: e.nested[SX.object][0].ldterm
        };
      });
      if (SX.semActs in v) ret.semActs = v[SX.semActs].map(function (e) {
        var ret = {
          type: "SemAct",
          name: e.nested[SX.name][0].ldterm
        };
        if (SX.code in e.nested) ret.code = e.nested[SX.code][0].ldterm.value;
        return ret;
      });
      return ret;
    }
  }), _defineProperty(_ShExUtil2, "valToSimple", function valToSimple(val) {
    var _ShExUtil = this;

    function _join(list) {
      return list.reduce(function (ret, elt) {
        Object.keys(elt).forEach(function (k) {
          if (k in ret) {
            ret[k] = Array.from(new Set(ret[k].concat(elt[k])));
          } else {
            ret[k] = elt[k];
          }
        });
        return ret;
      }, {});
    }

    if (val.type === "TripleConstraintSolutions") {
      if ("solutions" in val) {
        return val.solutions.reduce(function (ret, sln) {
          if (!("referenced" in sln)) return {};
          var toAdd = {};

          if (chaseList(sln.referenced, toAdd)) {
            return _join(ret, toAdd);
          } else {
            return _join(ret, _ShExUtil.valToSimple(sln.referenced));
          }

          function chaseList(li) {
            if (!li) return false;
            if (li.node === RDF.nil) return true;

            if ("solution" in li && "solutions" in li.solution && li.solution.solutions.length === 1 && "expressions" in li.solution.solutions[0] && li.solution.solutions[0].expressions.length === 2 && "predicate" in li.solution.solutions[0].expressions[0] && li.solution.solutions[0].expressions[0].predicate === RDF.first && li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
              var expressions = li.solution.solutions[0].expressions;
              var ent = expressions[0];
              var rest = expressions[1].solutions[0];
              var member = ent.solutions[0];
              var newElt = {
                ldterm: member.object
              };

              if ("referenced" in member) {
                var t = _ShExUtil.valToSimple(member.referenced);

                if (t) newElt.nested = t;
              }

              toAdd = _join(toAdd, newElt);
              return rest.object === RDF.nil ? true : chaseList(rest.referenced);
            }
          }
        }, []);
      } else {
        return [];
      }
    } else if (["TripleConstraintSolutions"].indexOf(val.type) !== -1) {
      return {};
    } else if (val.type === "NodeTest") {
      var thisNode = {};
      thisNode[n3ify(val.node)] = [val.shape];
      return thisNode;
    } else if (val.type === "ShapeTest") {
      var thisNode = {};
      thisNode[n3ify(val.node)] = [val.shape];
      return "solution" in val ? _join([thisNode].concat(_ShExUtil.valToSimple(val.solution))) : thisNode;
    } else if (val.type === "Recursion") {
      return {};
    } else if ("solutions" in val) {
      // ["SolutionList", "EachOfSolutions", "OneOfSolutions", "ShapeAndResults", "ShapeOrResults"].indexOf(val.type) !== -1
      return _join(val.solutions.map(function (sln) {
        return _ShExUtil.valToSimple(sln);
      }));
    } else if ("expressions" in val) {
      return _join(val.expressions.map(function (sln) {
        return _ShExUtil.valToSimple(sln);
      }));
    } else {
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }

    return val;
  }), _defineProperty(_ShExUtil2, "simpleToShapeMap", function simpleToShapeMap(x) {
    return Object.keys(x).reduce(function (ret, k) {
      x[k].forEach(function (s) {
        ret.push({
          node: k,
          shape: s
        });
      });
      return ret;
    }, []);
  }), _defineProperty(_ShExUtil2, "absolutizeShapeMap", function absolutizeShapeMap(parsed, base) {
    return parsed.map(function (elt) {
      return Object.assign(elt, {
        node: RdfTerm.resolveRelativeIRI(base, elt.node),
        shape: RdfTerm.resolveRelativeIRI(base, elt.shape)
      });
    });
  }), _defineProperty(_ShExUtil2, "errsToSimple", function errsToSimple(val, node, shape) {
    var _ShExUtil = this;

    if (val.type === "FailureList") {
      return val.errors.reduce(function (ret, e) {
        return ret.concat(_ShExUtil.errsToSimple(e));
      }, []);
    } else if (val.type === "Failure") {
      return ["validating " + val.node + " as " + val.shape + ":"].concat(errorList(val.errors).reduce(function (ret, e) {
        var nested = _ShExUtil.errsToSimple(e).map(function (s) {
          return "  " + s;
        });

        return ret.length > 0 ? ret.concat(["  OR"]).concat(nested) : nested.map(function (s) {
          return "  " + s;
        });
      }, []));
    } else if (val.type === "TypeMismatch") {
      var nested = val.errors.constructor === Array ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating " + n3ify(val.triple.object) + ":"].concat(nested);
    } else if (val.type === "ShapeAndFailure") {
      return val.errors.constructor === Array ? val.errors.reduce(function (ret, e) {
        return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(function (s) {
          return "  " + s;
        }));
      }, []) : "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeOrFailure") {
      return val.errors.constructor === Array ? val.errors.reduce(function (ret, e) {
        return ret.concat(" OR " + (typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)));
      }, []) : " OR " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    } else if (val.type === "ShapeNotFailure") {
      return ["Node " + val.errors.node + " expected to NOT pass " + val.errors.shape];
    } else if (val.type === "ExcessTripleViolation") {
      return ["validating " + n3ify(val.triple.object) + ": exceeds cardinality"];
    } else if (val.type === "ClosedShapeViolation") {
      return ["ClosedShapeError: unexpected: {"].concat(val.unexpectedTriples.map(function (t) {
        return "  " + t.subject + " " + t.predicate + " " + n3ify(t.object) + " .";
      })).concat(["}"]);
    } else if (val.type === "NodeConstraintViolation") {
      var w = __webpack_require__(/*! ../lib/ShExWriter */ "../shex.js/packages/shex-core/lib/ShExWriter.js")();

      w._write(w._writeNodeConstraint(val.shapeExpr).join(""));

      var txt;
      w.end(function (err, res) {
        txt = res;
      });
      return ["NodeConstraintError: expected to match " + txt];
    } else if (val.type === "MissingProperty") {
      return ["Missing property: " + val.property];
    } else if (val.type === "NegatedProperty") {
      return ["Unexpected property: " + val.property];
    } else if (val.constructor === Array) {
      debugger;
      return val.reduce(function (ret, e) {
        var nested = _ShExUtil.errsToSimple(e).map(function (s) {
          return "  " + s;
        });

        return ret.length ? ret.concat(["AND"]).concat(nested) : nested;
      }, []);
    } else {
      debugger; // console.log(val);

      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }

    function errorList(errors) {
      return errors.reduce(function (acc, e) {
        var attrs = Object.keys(e);
        return acc.concat(attrs.length === 1 && attrs[0] === "errors" ? errorList(e.errors) : e);
      }, []);
    }
  }), _defineProperty(_ShExUtil2, "resolveRelativeIRI", RdfTerm.resolveRelativeIRI), _defineProperty(_ShExUtil2, "resolvePrefixedIRI", function resolvePrefixedIRI(prefixedIri, prefixes) {
    var colon = prefixedIri.indexOf(":");
    if (colon === -1) return null;
    var prefix = prefixes[prefixedIri.substr(0, colon)];
    return prefix === undefined ? null : prefix + prefixedIri.substr(colon + 1);
  }), _defineProperty(_ShExUtil2, "parsePassedNode", function parsePassedNode(passedValue, meta, deflt, known, reportUnknown) {
    if (passedValue === undefined || passedValue.length === 0) return known && known(meta.base) ? meta.base : deflt ? deflt() : this.NotSupplied;
    if (passedValue[0] === "_" && passedValue[1] === ":") return passedValue;

    if (passedValue[0] === "\"") {
      var m = passedValue.match(/^"((?:[^"\\]|\\")*)"(?:@(.+)|\^\^(?:<(.*)>|([^:]*):(.*)))?$/);
      if (!m) throw Error("malformed literal: " + passedValue);
      var lex = m[1],
          lang = m[2],
          rel = m[3],
          pre = m[4],
          local = m[5]; // Turn the literal into an N3.js atom.

      var quoted = "\"" + lex + "\"";
      if (lang !== undefined) return quoted + "@" + lang;

      if (pre !== undefined) {
        if (!(pre in meta.prefixes)) throw Error("error parsing node " + passedValue + " no prefix for \"" + pre + "\"");
        return quoted + "^^" + meta.prefixes[pre] + local;
      }

      if (rel !== undefined) return quoted + "^^" + RdfTerm.resolveRelativeIRI(meta.base, rel);
      return quoted;
    }

    if (!meta) return known(passedValue) ? passedValue : this.UnknownIRI;
    var relIRI = passedValue[0] === "<" && passedValue[passedValue.length - 1] === ">";
    if (relIRI) passedValue = passedValue.substr(1, passedValue.length - 2);
    var t = RdfTerm.resolveRelativeIRI(meta.base || "", passedValue); // fall back to base-less mode

    if (known(t)) return t;

    if (!relIRI) {
      var t2 = this.resolvePrefixedIRI(passedValue, meta.prefixes);
      if (t2 !== null && known(t2)) return t2;
    }

    return reportUnknown ? reportUnknown(t) : this.UnknownIRI;
  }), _defineProperty(_ShExUtil2, "executeQueryPromise", function executeQueryPromise(query, endpoint) {
    var rows;
    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    return fetch(queryURL, {
      headers: {
        'Accept': 'application/sparql-results+json'
      }
    }).then(function (resp) {
      return resp.json();
    }).then(function (t) {
      var selects = t.head.vars;
      return t.results.bindings.map(function (row) {
        return selects.map(function (sel) {
          var elt = row[sel];

          switch (elt.type) {
            case "uri":
              return elt.value;

            case "bnode":
              return "_:" + elt.value;

            case "literal":
              var datatype = elt.datatype;
              var lang = elt["xml:lang"];
              return "\"" + elt.value + "\"" + (datatype ? "^^" + datatype : lang ? "@" + lang : "");

            default:
              throw "unknown XML results type: " + elt.prop("tagName");
          }

          return row[sel];
        });
      });
    }); // .then(x => new Promise(resolve => setTimeout(() => resolve(x), 1000)));
  }), _defineProperty(_ShExUtil2, "executeQuery", function executeQuery(query, endpoint) {
    var rows, t, j;
    var queryURL = endpoint + "?query=" + encodeURIComponent(query);
    var xhr = new XMLHttpRequest();
    xhr.open("GET", queryURL, false);
    xhr.setRequestHeader('Accept', 'application/sparql-results+json');
    xhr.send(); // var selectsBlock = query.match(/SELECT\s*(.*?)\s*{/)[1];
    // var selects = selectsBlock.match(/\?[^\s?]+/g);

    var t = JSON.parse(xhr.responseText);
    var selects = t.head.vars;
    return t.results.bindings.map(function (row) {
      return selects.map(function (sel) {
        var elt = row[sel];

        switch (elt.type) {
          case "uri":
            return elt.value;

          case "bnode":
            return "_:" + elt.value;

          case "literal":
            var datatype = elt.datatype;
            var lang = elt["xml:lang"];
            return "\"" + elt.value + "\"" + (datatype ? "^^" + datatype : lang ? "@" + lang : "");

          default:
            throw "unknown XML results type: " + elt.prop("tagName");
        }

        return row[sel];
      });
    });
    /* TO ADD? XML results format parsed with jquery:
            $(data).find("sparql > results > result").
              each((_, row) => {
                rows.push($(row).find("binding > *:nth-child(1)").
                  map((idx, elt) => {
                    elt = $(elt);
                    var text = elt.text();
                    switch (elt.prop("tagName")) {
                    case "uri": return text;
                    case "bnode": return "_:" + text;
                    case "literal":
                      var datatype = elt.attr("datatype");
                      var lang = elt.attr("xml:lang");
                      return "\"" + text + "\"" + (
                        datatype ? "^^" + datatype :
                        lang ? "@" + lang :
                          "");
                    default: throw "unknown XML results type: " + elt.prop("tagName");
                    }
                  }).get());
              });
    */
  }), _defineProperty(_ShExUtil2, "makeN3DB", function makeN3DB(db, queryTracker) {
    function getSubjects() {
      return db.getSubjects().map(RdfTerm.internalTerm);
    }

    function getPredicates() {
      return db.getPredicates().map(RdfTerm.internalTerm);
    }

    function getObjects() {
      return db.getObjects().map(RdfTerm.internalTerm);
    }

    function getQuads() {
      return db.getQuads.apply(db, arguments).map(RdfTerm.internalTriple);
    }

    function getNeighborhood(point, shapeLabel
    /*, shape */
    ) {
      // I'm guessing a local DB doesn't benefit from shape optimization.
      var startTime;

      if (queryTracker) {
        startTime = new Date();
        queryTracker.start(false, point, shapeLabel);
      }

      var outgoing = db.getQuads(point, null, null, null).map(RdfTerm.internalTriple);

      if (queryTracker) {
        var time = new Date();
        queryTracker.end(outgoing, time - startTime);
        startTime = time;
      }

      if (queryTracker) {
        queryTracker.start(true, point, shapeLabel);
      }

      var incoming = db.getQuads(null, null, point, null).map(RdfTerm.internalTriple);

      if (queryTracker) {
        queryTracker.end(incoming, new Date() - startTime);
      }

      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      // size: db.size,
      getNeighborhood: getNeighborhood,
      getSubjects: getSubjects,
      getPredicates: getPredicates,
      getObjects: getObjects,
      getQuads: getQuads,

      get size() {
        return db.size;
      } // getQuads: function (s, p, o, graph, shapeLabel) {
      //   // console.log(Error(s + p + o).stack)
      //   if (queryTracker)
      //     queryTracker.start(!!s, s ? s : o, shapeLabel);
      //   var quads = db.getQuads(s, p, o, graph)
      //   if (queryTracker)
      //     queryTracker.end(quads, new Date() - startTime);
      //   return quads;
      // }


    };
  }), _defineProperty(_ShExUtil2, "makeQueryDB", function makeQueryDB(endpoint, queryTracker) {
    var _ShExUtil = this;

    function getQuads(s, p, o, g) {
      return mapQueryToTriples("SELECT " + [s ? "" : "?s", p ? "" : "?p", o ? "" : "?o", "{", s ? s : "?s", p ? p : "?s", o ? o : "?s", "}"].join(" "), s, o);
    }

    function mapQueryToTriples(query, s, o) {
      var rows = _ShExUtil.executeQuery(query, endpoint);

      var triples = rows.map(function (row) {
        return s ? {
          subject: s,
          predicate: row[0],
          object: row[1]
        } : {
          subject: row[0],
          predicate: row[1],
          object: o
        };
      });
      return triples;
    }

    function getTripleConstraints(tripleExpr) {
      var visitor = _ShExUtil.Visitor();

      var ret = {
        out: [],
        inc: []
      };

      visitor.visitTripleConstraint = function (expr) {
        ret[expr.inverse ? "inc" : "out"].push(expr);
        return expr;
      };

      if (tripleExpr) visitor.visitExpression(tripleExpr);
      return ret;
    }

    function getNeighborhood(point, shapeLabel, shape) {
      // I'm guessing a local DB doesn't benefit from shape optimization.
      var startTime;
      var tcs = getTripleConstraints(shape.expression);
      var pz = tcs.out.map(function (t) {
        return t.predicate;
      });
      pz = pz.filter(function (p, idx) {
        return pz.lastIndexOf(p) === idx;
      });

      if (queryTracker) {
        startTime = new Date();
        queryTracker.start(false, point, shapeLabel);
      }

      var outgoing = tcs.out.length > 0 || shape.closed ? mapQueryToTriples(shape.closed ? "SELECT ?p ?o { <".concat(point, "> ?p ?o }") : "SELECT ?p ?o {\n" + pz.map(function (p) {
        return "  {<".concat(point, "> <").concat(p, "> ?o BIND(<").concat(p, "> AS ?p)}");
      }).join(" UNION\n") + "\n}", point, null) : [];

      if (queryTracker) {
        var time = new Date();
        queryTracker.end(outgoing, time - startTime);
        startTime = time;
      }

      if (queryTracker) {
        queryTracker.start(true, point, shapeLabel);
      }

      var incoming = tcs.inc.length > 0 ? mapQueryToTriples("SELECT ?s ?p { ?s ?p <".concat(point, "> }"), null, point) : [];

      if (queryTracker) {
        queryTracker.end(incoming, new Date() - startTime);
      }

      return {
        outgoing: outgoing,
        incoming: incoming
      };
    }

    return {
      getNeighborhood: getNeighborhood,
      getQuads: getQuads,
      getSubjects: function getSubjects() {
        return ["!Query DB can't index subjects"];
      },
      getPredicates: function getPredicates() {
        return ["!Query DB can't index predicates"];
      },
      getObjects: function getObjects() {
        return ["!Query DB can't index objects"];
      },

      get size() {
        return undefined;
      }

    };
  }), _defineProperty(_ShExUtil2, "NotSupplied", "-- not supplied --"), _defineProperty(_ShExUtil2, "UnknownIRI", "-- not found --"), _defineProperty(_ShExUtil2, "_expect", function _expect(o, p, v) {
    if (!(p in o)) this._error("expected " + JSON.stringify(o) + " to have a ." + p);
    if (arguments.length > 2 && o[p] !== v) this._error("expected " + o[o] + " to equal ." + v);
  }), _defineProperty(_ShExUtil2, "_error", function _error(str) {
    throw new Error(str);
  }), _defineProperty(_ShExUtil2, "unescapeText", function unescapeText(string, replacements) {
    var regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;

    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;

        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance

          return String.fromCharCode(charCode);
        } else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance

          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        } else {
          var replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    } catch (error) {
      console.warn(error);
      return '';
    }
  }), _ShExUtil2);

  function n3ify(ldterm) {
    if (_typeof(ldterm) !== "object") return ldterm;
    var ret = "\"" + ldterm.value + "\"";
    if ("language" in ldterm) return ret + "@" + ldterm.language;
    if ("type" in ldterm) return ret + "^^" + ldterm.type;
    return ret;
  } // Add the ShExUtil functions to the given object or its prototype


  function AddShExUtil(parent, toPrototype) {
    for (var name in ShExUtil) {
      if (!toPrototype) parent[name] = ShExUtil[name];else parent.prototype[name] = ApplyToThis(ShExUtil[name]);
    }

    return parent;
  } // Returns a function that applies `f` to the `this` object


  function ApplyToThis(f) {
    return function (a) {
      return f(this, a);
    };
  }

  return AddShExUtil(AddShExUtil);
}();

if (true) module.exports = ShExUtil; // node environment

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/ShExValidator.js":
/*!**********************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/ShExValidator.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* ShExValidator - javascript module to validate a graph with respect to Shape Expressions
 *
 * Status: 1/2 tested, no known bugs.
 *
 * TODO:
 *   constraint violation reporting.
 */
var ShExValidator = function () {
  var UNBOUNDED = -1; // interface constants

  var Start = {
    term: "START"
  };
  var InterfaceOptions = {
    "or": {
      "oneOf": "exactly one disjunct must pass",
      "someOf": "one or more disjuncts must pass",
      "firstOf": "disjunct evaluation stops after one passes"
    },
    "partition": {
      "greedy": "each triple constraint consumes all triples matching predicate and object",
      "exhaustive": "search all mappings of triples to triple constriant"
    }
  };
  var VERBOSE = ("VERBOSE" in process.env); // **ShExValidator** provides ShEx utility functions

  var ProgramFlowError = {
    type: "ProgramFlowError",
    errors: {
      type: "UntrackedError"
    }
  };

  var RdfTerm = __webpack_require__(/*! ./RdfTerm */ "../shex.js/packages/shex-core/lib/RdfTerm.js");

  var ShExUtil = __webpack_require__(/*! ./ShExUtil */ "../shex.js/packages/shex-core/lib/ShExUtil.js");

  function getLexicalValue(term) {
    return RdfTerm.isIRI(term) ? term : RdfTerm.isLiteral(term) ? RdfTerm.getLiteralValue(term) : term.substr(2); // bnodes start with "_:"
  }

  var XSD = "http://www.w3.org/2001/XMLSchema#";
  var integerDatatypes = [XSD + "integer", XSD + "nonPositiveInteger", XSD + "negativeInteger", XSD + "long", XSD + "int", XSD + "short", XSD + "byte", XSD + "nonNegativeInteger", XSD + "unsignedLong", XSD + "unsignedInt", XSD + "unsignedShort", XSD + "unsignedByte", XSD + "positiveInteger"];
  var decimalDatatypes = [XSD + "decimal"].concat(integerDatatypes);
  var numericDatatypes = [XSD + "float", XSD + "double"].concat(decimalDatatypes);
  var numericParsers = {};

  numericParsers[XSD + "integer"] = function (label, parseError) {
    if (!label.match(/^[+-]?[0-9]+$/)) {
      parseError("illegal integer value '" + label + "'");
    }

    return parseInt(label);
  };

  numericParsers[XSD + "decimal"] = function (label, parseError) {
    if (!label.match(/^[+-]?(?:[0-9]*\.[0-9]+|[0-9]+)$/)) {
      // XSD has no pattern for decimal?
      parseError("illegal decimal value '" + label + "'");
    }

    return parseFloat(label);
  };

  var DECIMAL_REGEX = /^[+\-]?(?:[0-9]+(?:\.[0-9]*)?|\.[0-9]+)(?:[eE][+\-]?[0-9]+)?$/;

  numericParsers[XSD + "float"] = function (label, parseError) {
    if (label === "NaN") return NaN;
    if (label === "INF") return Infinity;
    if (label === "-INF") return -Infinity;

    if (!label.match(DECIMAL_REGEX)) {
      // XSD has no pattern for float?
      parseError("illegal float value '" + label + "'");
    }

    return parseFloat(label);
  };

  numericParsers[XSD + "double"] = function (label, parseError) {
    if (label === "NaN") return NaN;
    if (label === "INF") return Infinity;
    if (label === "-INF") return -Infinity;

    if (!label.match(DECIMAL_REGEX)) {
      parseError("illegal double value '" + label + "'");
    }

    return Number(label);
  };

  testRange = function testRange(value, datatype, parseError) {
    var ranges = {
      //    integer            -1 0 1 +1 | "" -1.0 +1.0 1e0 NaN INF
      //    decimal            -1 0 1 +1 -1.0 +1.0 | "" 1e0 NaN INF
      //    float              -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
      //    double             -1 0 1 +1 -1.0 +1.0 1e0 1E0 NaN INF -INF | "" +INF
      //    nonPositiveInteger -1 0 +0 -0 | 1 +1 1a a1
      //    negativeInteger    -1 | 0 +0 -0 1
      //    long               -1 0 1 +1 |
      //    int                -1 0 1 +1 |
      //    short              -32768 0 32767 | -32769 32768
      //    byte               -128 0 127 | "" -129 128
      //    nonNegativeInteger 0 -0 +0 1 +1 | -1
      //    unsignedLong       0 1 | -1
      //    unsignedInt        0 1 | -1
      //    unsignedShort      0 65535 | -1 65536
      //    unsignedByte       0 255 | -1 256
      //    positiveInteger    1 | -1 0
      //    string             "" "a" "0"
      //    boolean            true false 0 1 | "" TRUE FALSE tRuE fAlSe -1 2 10 01
      //    dateTime           "2012-01-02T12:34:56.78Z" | "" "2012-01-02T" "2012-01-02"
      integer: {
        min: -Infinity,
        max: Infinity
      },
      decimal: {
        min: -Infinity,
        max: Infinity
      },
      "float": {
        min: -Infinity,
        max: Infinity
      },
      "double": {
        min: -Infinity,
        max: Infinity
      },
      nonPositiveInteger: {
        min: -Infinity,
        max: 0
      },
      negativeInteger: {
        min: -Infinity,
        max: -1
      },
      "long": {
        min: -9223372036854775808,
        max: 9223372036854775807
      },
      "int": {
        min: -2147483648,
        max: 2147483647
      },
      "short": {
        min: -32768,
        max: 32767
      },
      "byte": {
        min: -128,
        max: 127
      },
      nonNegativeInteger: {
        min: 0,
        max: Infinity
      },
      unsignedLong: {
        min: 0,
        max: 18446744073709551615
      },
      unsignedInt: {
        min: 0,
        max: 4294967295
      },
      unsignedShort: {
        min: 0,
        max: 65535
      },
      unsignedByte: {
        min: 0,
        max: 255
      },
      positiveInteger: {
        min: 1,
        max: Infinity
      }
    };
    var parms = ranges[datatype.substr(XSD.length)];
    if (!parms) throw Error("unexpected datatype: " + datatype);

    if (value < parms.min) {
      parseError("\"" + value + "\"^^<" + datatype + "> is less than the min:", parms.min);
    } else if (value > parms.max) {
      parseError("\"" + value + "\"^^<" + datatype + "> is greater than the max:", parms.min);
    }
  };
  /*
  function intSubType (spec, label, parseError) {
    var ret = numericParsers[XSD + "integer"](label, parseError);
    if ("min" in spec && ret < spec.min)
      parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be < " + spec.min);
    if ("max" in spec && ret > spec.max)
      parseError("illegal " + XSD + spec.type + " value '" + label + "' should not be > " + spec.max);
    return ret;
  }
  [{type: "nonPositiveInteger", max: 0},
   {type: "negativeInteger", max: -1},
   {type: "long", min: -9223372036854775808, max: 9223372036854775807}, // beyond IEEE double
   {type: "int", min: -2147483648, max: 2147483647},
   {type: "short", min: -32768, max: 32767},
   {type: "byte", min: -128, max: 127},
   {type: "nonNegativeInteger", min: 0},
   {type: "unsignedLong", min: 0, max: 18446744073709551615},
   {type: "unsignedInt", min: 0, max: 4294967295},
   {type: "unsignedShort", min: 0, max: 65535},
   {type: "unsignedByte", min: 0, max: 255},
   {type: "positiveInteger", min: 1}].forEach(function (i) {
     numericParsers[XSD + i.type ] = function (label, parseError) {
       return intSubType(i, label, parseError);
     };
   });
  */


  var stringTests = {
    length: function length(v, l) {
      return v.length === l;
    },
    minlength: function minlength(v, l) {
      return v.length >= l;
    },
    maxlength: function maxlength(v, l) {
      return v.length <= l;
    }
  };
  var numericValueTests = {
    mininclusive: function mininclusive(n, m) {
      return n >= m;
    },
    minexclusive: function minexclusive(n, m) {
      return n > m;
    },
    maxinclusive: function maxinclusive(n, m) {
      return n <= m;
    },
    maxexclusive: function maxexclusive(n, m) {
      return n < m;
    }
  };
  var decimalLexicalTests = {
    totaldigits: function totaldigits(v, d) {
      var m = v.match(/[0-9]/g);
      return m && m.length <= d;
    },
    fractiondigits: function fractiondigits(v, d) {
      var m = v.match(/^[+-]?[0-9]*\.?([0-9]*)$/);
      return m && m[1].length <= d;
    }
  };

  function ldify(term) {
    if (term[0] !== "\"") return term;
    var ret = {
      value: RdfTerm.getLiteralValue(term)
    };
    var dt = RdfTerm.getLiteralType(term);
    if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
    var lang = RdfTerm.getLiteralLanguage(term);
    if (lang) ret.language = lang;
    return ret;
  }

  function isTerm(t) {
    return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
      return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
    }, true);
  }
  /* ShExValidator_constructor - construct an object for validating a schema.
   *
   * schema: a structure produced by a ShEx parser or equivalent.
   * options: object with controls for
   *   lax(true): boolean: whine about missing types in schema.
   *   diagnose(false): boolean: makde validate return a structure with errors.
   */


  function ShExValidator_constructor(schema, options) {
    if (!(this instanceof ShExValidator_constructor)) return new ShExValidator_constructor(schema, options);
    var index = schema._index || ShExUtil.index(schema);
    this.type = "ShExValidator";
    options = options || {};
    this.options = options;
    this.options.or = this.options.or || "someOf";
    this.options.partition = this.options.partition || "exhaustive";
    if (!("noCache" in options && options.noCache)) this.known = {};

    var _ShExValidator = this;

    this.schema = schema;
    this._expect = this.options.lax ? noop : expect; // report errors on missing types.

    this._optimize = {}; // optimizations:
    // hasRepeatedGroups: whether there are patterns like (:p1 ., :p2 .)*

    this.reset = function () {}; // included in case we need it later.
    // var regexModule = this.options.regexModule || require("../lib/regex/nfax-val-1err");


    var regexModule = this.options.regexModule || __webpack_require__(/*! ../lib/regex/threaded-val-nerr */ "../shex.js/packages/shex-core/lib/regex/threaded-val-nerr.js");
    /* getAST - compile a traditional regular expression abstract syntax tree.
     * Tested but not used at present.
     */


    this.getAST = function () {
      return {
        type: "AST",
        shapes: schema.shapes.reduce(function (ret, shape) {
          ret[shape.id] = {
            type: "ASTshape",
            expression: _compileShapeToAST(shape.expression, [], _ShExValidator.schema)
          };
          return ret;
        }, {})
      };
    };
    /* indexTripleConstraints - compile regular expression and index triple constraints
     */


    this.indexTripleConstraints = function (expression) {
      // list of triple constraints from (:p1 ., (:p2 . | :p3 .))
      var tripleConstraints = [];
      if (expression) indexTripleConstraints_dive(expression);
      return tripleConstraints;

      function indexTripleConstraints_dive(expr) {
        if (typeof expr === "string") // Inclusion
          indexTripleConstraints_dive(index.tripleExprs[expr]);else if (expr.type === "TripleConstraint") tripleConstraints.push(expr) - 1;else if (expr.type === "OneOf" || expr.type === "EachOf") expr.expressions.forEach(function (nested) {
          indexTripleConstraints_dive(nested);
        }); // @@TODO shape.virtual, shape.inherit
        else runtimeError("unexpected expr type: " + expr.type);
      }

      ;
    };
    /* emptyTracker - a tracker that does nothing
     */


    this.emptyTracker = function () {
      var noop = function noop(x) {
        return x;
      };

      return {
        recurse: noop,
        known: noop,
        enter: function enter(point, label) {
          ++this.depth;
        },
        exit: function exit(point, label, ret) {
          --this.depth;
        },
        depth: 0
      };
    };
    /* validate - test point in db against the schema for labelOrShape
     * depth: level of recurssion; for logging.
     */


    this.validate = function (db, point, label, tracker, seen) {
      var _this = this;

      // default to schema's start shape
      if (_typeof(point) === "object" && "termType" in point) {
        point = RdfTerm.internalTerm(point);
      }

      if (_typeof(point) === "object") {
        var shapeMap = point;

        if (this.options.results === "api") {
          return shapeMap.map(function (pair) {
            var time = new Date();

            var res = _this.validate(db, pair.node, pair.shape, label, tracker); // really tracker and seen


            time = new Date() - time;
            return {
              node: pair.node,
              shape: pair.shape,
              status: "errors" in res ? "nonconformant" : "conformant",
              appinfo: res,
              elapsed: time
            };
          });
        }

        var results = shapeMap.reduce(function (ret, pair) {
          var res = _this.validate(db, pair.node, pair.shape, label, tracker); // really tracker and seen


          return "errors" in res ? {
            passes: ret.passes,
            failures: ret.failures.concat(res)
          } : {
            passes: ret.passes.concat(res),
            failures: ret.failures
          };
        }, {
          passes: [],
          failures: []
        });

        if (false) { var ret, _add; }

        if (results.failures.length) {
          return results.failures.length !== 1 ? {
            type: "FailureList",
            errors: results.failures
          } : results.failures[0];
        } else {
          return results.passes.length !== 1 ? {
            type: "SolutionList",
            solutions: results.passes
          } : results.passes[0];
        }
      }

      var outside = tracker === undefined; // logging stuff

      if (!tracker) tracker = this.emptyTracker();

      if (!label || label === Start) {
        if (!schema.start) runtimeError("start production not defined");
      }

      var shape = null;

      if (label == Start) {
        shape = schema.start;
      } else if (!("shapes" in this.schema) || this.schema.shapes.length === 0) {
        runtimeError("shape " + label + " not found; no shapes in schema");
      } else if (label in index.shapeExprs) {
        shape = index.shapeExprs[label];
      } else {
        runtimeError("shape " + label + " not found in:\n" + Object.keys(index.shapeExprs || []).map(function (s) {
          return "  " + s;
        }).join("\n"));
      }

      if (seen === undefined) seen = {};
      var seenKey = point + "@" + (label === Start ? "_: -start-" : label);
      if (seenKey in seen) return tracker.recurse({
        type: "Recursion",
        node: ldify(point),
        shape: label
      });
      if ("known" in this && seenKey in this.known) return tracker.known(this.known[seenKey]);
      seen[seenKey] = {
        point: point,
        shape: label
      };
      tracker.enter(point, label);

      var ret = this._validateShapeExpr(db, point, shape, label, tracker, seen);

      tracker.exit(point, label, ret);
      delete seen[seenKey];
      if ("known" in this) this.known[seenKey] = ret;

      if ("startActs" in schema && outside) {
        ret.startActs = schema.startActs;
      }

      return ret;
    };

    this._validateShapeExpr = function (db, point, shapeExpr, shapeLabel, tracker, seen) {
      if (point === "") throw Error("validation needs a valid focus node");

      if (typeof shapeExpr === "string") {
        // ShapeRef
        return this._validateShapeExpr(db, point, index.shapeExprs[shapeExpr], shapeExpr, tracker, seen);
      } else if (shapeExpr.type === "NodeConstraint") {
        var errors = this._errorsMatchingNodeConstraint(point, shapeExpr, null);

        return errors.length ? {
          type: "Failure",
          node: ldify(point),
          shape: shapeLabel,
          errors: errors.map(function (error) {
            return {
              type: "NodeConstraintViolation",
              shapeExpr: shapeExpr,
              error: error
            };
          })
        } : {
          type: "NodeTest",
          node: ldify(point),
          shape: shapeLabel,
          shapeExpr: shapeExpr
        };
      } else if (shapeExpr.type === "Shape") {
        return this._validateShape(db, point, regexModule.compile(schema, shapeExpr, index), shapeExpr, shapeLabel, tracker, seen);
      } else if (shapeExpr.type === "ShapeExternal") {
        return this.options.validateExtern(db, point, shapeLabel, tracker, seen);
      } else if (shapeExpr.type === "ShapeOr") {
        var errors = [];

        for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {
          var nested = shapeExpr.shapeExprs[i];

          var sub = this._validateShapeExpr(db, point, nested, shapeLabel, tracker, seen);

          if ("errors" in sub) errors.push(sub);else return {
            type: "ShapeOrResults",
            solution: sub
          };
        }

        return {
          type: "ShapeOrFailure",
          errors: errors
        };
      } else if (shapeExpr.type === "ShapeNot") {
        var sub = this._validateShapeExpr(db, point, shapeExpr.shapeExpr, shapeLabel, tracker, seen);

        if ("errors" in sub) return {
          type: "ShapeNotResults",
          solution: sub
        };else return {
          type: "ShapeNotFailure",
          errors: sub
        };
      } else if (shapeExpr.type === "ShapeAnd") {
        var passes = [];

        for (var i = 0; i < shapeExpr.shapeExprs.length; ++i) {
          var nested = shapeExpr.shapeExprs[i];

          var sub = this._validateShapeExpr(db, point, nested, shapeLabel, tracker, seen);

          if ("errors" in sub) return {
            type: "ShapeAndFailure",
            errors: [sub]
          };else passes.push(sub);
        }

        return {
          type: "ShapeAndResults",
          solutions: passes
        };
      } else throw Error("expected one of Shape{Ref,And,Or} or NodeConstraint, got " + JSON.stringify(shapeExpr));
    };

    this._validateShape = function (db, point, regexEngine, shape, shapeLabel, tracker, seen) {
      var _ShExValidator = this;

      var ret = null;
      var startAcionStorage = {}; // !!! need test to see this write to results structure.

      if ("startActs" in schema && !this.semActHandler.dispatchAll(schema.startActs, null, startAcionStorage)) return {
        type: "Failure",
        node: ldify(point),
        shape: shapeLabel,
        errors: ['semact failure']
      }; // some semAct aborted !! return real error
      // @@ add to tracker: f("validating <" + point + "> as <" + shapeLabel + ">");

      var fromDB = db.getNeighborhood(point, shapeLabel, shape);
      var outgoing = indexNeighborhood(fromDB.outgoing.sort(function (l, r) {
        return sparqlOrder(l.object, r.object);
      }));
      var incoming = indexNeighborhood(fromDB.incoming.sort(function (l, r) {
        return sparqlOrder(l.subject, r.subject);
      }));
      var outgoingLength = fromDB.outgoing.length;
      var neighborhood = fromDB.outgoing.concat(fromDB.incoming);
      var constraintList = this.indexTripleConstraints(shape.expression);
      var tripleList = constraintList.reduce(function (ret, constraint, ord) {
        // subject and object depend on direction of constraint.
        var searchSubject = constraint.inverse ? null : point;
        var searchObject = constraint.inverse ? point : null;
        var index = constraint.inverse ? incoming : outgoing; // get triples matching predciate

        var matchPredicate = index.byPredicate[constraint.predicate] || []; // empty list when no triple matches that constraint

        function _errorsByShapeLabel(focus, shapeLabel) {
          var sub = _ShExValidator.validate(db, focus, shapeLabel, tracker, seen);

          return "errors" in sub ? sub.errors : [];
        }

        function _errorsByShapeExpr(focus, shapeExpr) {
          var sub = _ShExValidator._validateShapeExpr(db, focus, shapeExpr, shapeLabel, tracker, seen);

          return "errors" in sub ? sub.errors : [];
        } // strip to triples matching value constraints (apart from @<someShape>)


        var matchConstraints = _ShExValidator._triplesMatchingShapeExpr(matchPredicate, constraint.valueExpr, constraint.inverse,
        /* _ShExValidator.options.partition === "exhaustive" ? undefined : */
        _errorsByShapeLabel,
        /* _ShExValidator.options.partition === "exhaustive" ? undefined : */
        _errorsByShapeExpr);

        matchConstraints.hits.forEach(function (t) {
          ret.constraintList[neighborhood.indexOf(t)].push(ord);
        });
        matchConstraints.misses.forEach(function (t) {
          ret.misses[neighborhood.indexOf(t.triple)] = {
            constraintNo: ord,
            errors: t.errors
          };
        });
        return ret;
      }, {
        misses: {},
        constraintList: _seq(neighborhood.length).map(function () {
          return [];
        })
      }); // start with [[],[]...]
      // @@ add to tracker: f("constraints by triple: ", JSON.stringify(tripleList.constraintList));

      var extras = []; // triples accounted for by EXTRA

      var misses = tripleList.constraintList.reduce(function (ret, constraints, ord) {
        if (constraints.length === 0 && // matches no constraints
        ord < outgoingLength && // not an incoming triple
        ord in tripleList.misses) {
          // predicate matched some constraint(s)
          if (shape.extra !== undefined && shape.extra.indexOf(neighborhood[ord].predicate) !== -1) {
            extras.push(ord);
          } else {
            // not declared extra
            ret.push({
              // so it's a missed triple.
              tripleNo: ord,
              constraintNo: tripleList.misses[ord].constraintNo,
              errors: tripleList.misses[ord].errors
            });
          }
        }

        return ret;
      }, []);
      var xp = crossProduct(tripleList.constraintList);
      var partitionErrors = [];

      while (misses.length === 0 && xp.next() && ret === null) {
        // Pivot to triples by constraint.
        var _constraintToTriples = function _constraintToTriples() {
          var cll = constraintList.length;
          return tripleToConstraintMapping.slice().reduce(function (ret, c, ord) {
            if (c !== undefined) ret[c].push(ord);
            return ret;
          }, _seq(cll).map(function () {
            return [];
          }));
        };

        // e.g. 0 0 1 3 
        var _recurse = function _recurse(point, shapeLabel) {
          return _ShExValidator.validate(db, point, shapeLabel, tracker, seen);
        };

        var _direct = function _direct(point, shapeExpr) {
          return _ShExValidator._validateShapeExpr(db, point, shapeExpr, shapeLabel, tracker, seen);
        };

        var _testExpr = function _testExpr(term, valueExpr, recurse, direct) {
          return _ShExValidator._errorsMatchingShapeExpr(term, valueExpr, recurse, direct);
        };

        // caution: early continues
        var usedTriples = []; // [{s1,p1,o1},{s2,p2,o2}] implicated triples -- used for messages

        var constraintMatchCount = // [2,1,0,1] how many triples matched a constraint
        _seq(neighborhood.length).map(function () {
          return 0;
        });

        var tripleToConstraintMapping = xp.get(); // [0,1,0,3] mapping from triple to constraint
        // Triples not mapped to triple constraints are not allowed in closed shapes.

        if (shape.closed) {
          var unexpectedTriples = neighborhood.slice(0, outgoingLength).filter(function (t, i) {
            return tripleToConstraintMapping[i] === undefined && // didn't match a constraint
            extras.indexOf(i) === -1; // wasn't in EXTRAs.
          });

          if (unexpectedTriples.length > 0) {
            partitionErrors.push({
              errors: [{
                type: "ClosedShapeViolation",
                unexpectedTriples: unexpectedTriples
              }]
            });
            continue; // closed shape violation.
          }
        } // Set usedTriples and constraintMatchCount.


        tripleToConstraintMapping.forEach(function (tpNumber, ord) {
          if (tpNumber !== undefined) {
            usedTriples.push(neighborhood[ord]);
            ++constraintMatchCount[tpNumber];
          }
        });
        tripleToConstraintMapping.slice().sort(function (a, b) {
          return a - b;
        }).filter(function (i) {
          // sort constraint numbers
          return i !== undefined;
        }).map(function (n) {
          return n + " ";
        }).join("");
        var results = regexEngine.match(db, point, constraintList, _constraintToTriples(), tripleToConstraintMapping, neighborhood, _recurse, _direct, this.semActHandler, _testExpr, null);

        if (false) { var fromNFA, nfa; }

        if ("errors" in results) {
          partitionErrors.push({
            errors: results.errors
          });
          if (_ShExValidator.options.partition !== "exhaustive") break;else continue;
        } // @@ add to tracker: f("post-regexp " + usedTriples.join(" "));


        var possibleRet = {
          type: "ShapeTest",
          node: ldify(point),
          shape: shapeLabel
        };
        if (Object.keys(results).length > 0) // only include .solution for non-empty pattern
          possibleRet.solution = results;

        if ("semActs" in shape && !this.semActHandler.dispatchAll(shape.semActs, results, possibleRet)) {
          // some semAct aborted
          partitionErrors.push({
            errors: [{
              type: "SemActFailure",
              errors: [{
                type: "UntrackedSemActFailure"
              }]
            }]
          });
          if (_ShExValidator.options.partition !== "exhaustive") break;else continue;
        } // @@ add to tracker: f("final " + usedTriples.join(" "));


        ret = possibleRet; // alts.push(tripleToConstraintMapping);
      }

      if (ret === null
      /* !! && this.options.diagnose */
      ) {
          var missErrors = misses.map(function (miss) {
            var t = neighborhood[miss.tripleNo];
            return {
              type: "TypeMismatch",
              triple: {
                type: "TestedTriple",
                subject: t.subject,
                predicate: t.predicate,
                object: ldify(t.object)
              },
              constraint: constraintList[miss.constraintNo],
              errors: miss.errors
            };
          });
          ret = {
            type: "Failure",
            node: ldify(point),
            shape: shapeLabel,
            errors: missErrors.concat(partitionErrors.length === 1 ? partitionErrors[0].errors : partitionErrors)
          };
        }

      if (VERBOSE) {
        // remove N3jsTripleToString
        neighborhood.forEach(function (t) {
          delete t.toString;
        });
      } // @@ add to tracker: f("</" + shapeLabel + ">");


      return addShapeAttributes(ret);

      function addShapeAttributes(ret) {
        if ("annotations" in shape) ret.annotations = shape.annotations;
        return ret;
      }
    };

    this._triplesMatchingShapeExpr = function (triples, valueExpr, inverse, recurse, direct) {
      var _ShExValidator = this;

      var misses = [];
      var hits = [];
      triples.forEach(function (triple) {
        var value = inverse ? triple.subject : triple.object;
        var errors = valueExpr === undefined ? [] : _ShExValidator._errorsMatchingShapeExpr(value, valueExpr, recurse, direct);

        if (errors.length === 0) {
          hits.push(triple);
        } else if (hits.indexOf(triple) === -1) {
          misses.push({
            triple: triple,
            errors: errors
          });
        }
      });
      return {
        hits: hits,
        misses: misses
      };
    };

    this._errorsMatchingShapeExpr = function (value, valueExpr, recurse, direct) {
      var _ShExValidator = this;

      if (typeof valueExpr === "string") {
        // ShapeRef
        return recurse ? recurse(value, valueExpr) : [];
      } else if (valueExpr.type === "NodeConstraint") {
        return this._errorsMatchingNodeConstraint(value, valueExpr, null);
      } else if (valueExpr.type === "Shape") {
        return direct === undefined ? [] : direct(value, valueExpr);
      } else if (valueExpr.type === "ShapeOr") {
        var ret = [];

        for (var i = 0; i < valueExpr.shapeExprs.length; ++i) {
          var nested = _ShExValidator._errorsMatchingShapeExpr(value, valueExpr.shapeExprs[i], recurse, direct);

          if (nested.length === 0) return nested;
          ret = ret.concat(nested);
        }

        return ret;
      } else if (valueExpr.type === "ShapeAnd") {
        return valueExpr.shapeExprs.reduce(function (ret, nested, iter) {
          return ret.concat(_ShExValidator._errorsMatchingShapeExpr(value, nested, recurse, direct, true));
        }, []);
      } else if (valueExpr.type === "ShapeNot") {
        var ret = _ShExValidator._errorsMatchingShapeExpr(value, valueExpr.shapeExpr, recurse, direct, true);

        return ret.length ? [] : ["Error validating " + value + " as " + JSON.stringify(valueExpr) + ": expected NOT to pass"];
      } else {
        throw Error("unknown value expression type '" + valueExpr.type + "'");
      }
    };
    /* _errorsMatchingNodeConstraint - return whether the value matches the value
     * expression without checking shape references.
     */


    this._errorsMatchingNodeConstraint = function (value, valueExpr, recurse) {
      var errors = [];
      var label = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralValue(value) : RdfTerm.isBlank(value) ? value.substring(2) : value;
      var dt = RdfTerm.isLiteral(value) ? RdfTerm.getLiteralType(value) : null;
      var numeric = integerDatatypes.indexOf(dt) !== -1 ? XSD + "integer" : numericDatatypes.indexOf(dt) !== -1 ? dt : undefined;

      function validationError() {
        var errorStr = Array.prototype.join.call(arguments, "");
        errors.push("Error validating " + value + " as " + JSON.stringify(valueExpr) + ": " + errorStr);
        return false;
      } // if (negated) ;


      if (false) {} else {
        if ("nodeKind" in valueExpr) {
          if (["iri", "bnode", "literal", "nonliteral"].indexOf(valueExpr.nodeKind) === -1) {
            validationError("unknown node kind '" + valueExpr.nodeKind + "'");
          }

          if (RdfTerm.isBlank(value)) {
            if (valueExpr.nodeKind === "iri" || valueExpr.nodeKind === "literal") {
              validationError("blank node found when " + valueExpr.nodeKind + " expected");
            }
          } else if (RdfTerm.isLiteral(value)) {
            if (valueExpr.nodeKind !== "literal") {
              validationError("literal found when " + valueExpr.nodeKind + " expected");
            }
          } else if (valueExpr.nodeKind === "bnode" || valueExpr.nodeKind === "literal") {
            validationError("iri found when " + valueExpr.nodeKind + " expected");
          }
        }

        if (valueExpr.datatype && valueExpr.values) validationError("found both datatype and values in " + tripleConstraint);

        if (valueExpr.datatype) {
          if (!RdfTerm.isLiteral(value)) {
            validationError("mismatched datatype: " + value + " is not a literal with datatype " + valueExpr.datatype);
          } else if (RdfTerm.getLiteralType(value) !== valueExpr.datatype) {
            validationError("mismatched datatype: " + RdfTerm.getLiteralType(value) + " !== " + valueExpr.datatype);
          } else if (numeric) {
            testRange(numericParsers[numeric](label, validationError), valueExpr.datatype, validationError);
          } else if (valueExpr.datatype === XSD + "boolean") {
            if (label !== "true" && label !== "false" && label !== "1" && label !== "0") validationError("illegal boolean value: " + label);
          } else if (valueExpr.datatype === XSD + "dateTime") {
            if (!label.match(/^[+-]?\d{4}-[01]\d-[0-3]\dT[0-5]\d:[0-5]\d:[0-5]\d(\.\d+)?([+-][0-2]\d:[0-5]\d|Z)?$/)) validationError("illegal dateTime value: " + label);
          }
        }

        if (valueExpr.values) {
          if (RdfTerm.isLiteral(value) && valueExpr.values.reduce(function (ret, v) {
            if (ret) return true;
            var ld = ldify(value);

            if (v.type === "Language") {
              return v.languageTag === ld.language; // @@ use equals/normalizeTest
            }

            if (!(_typeof(v) === "object" && "value" in v)) return false;
            return v.value === ld.value && v.type === ld.type && v.language === ld.language;
          }, false)) {// literal match
          } else if (valueExpr.values.indexOf(value) !== -1) {// trivial match
          } else {
            if (!valueExpr.values.some(function (valueConstraint) {
              if (_typeof(valueConstraint) === "object" && !("value" in valueConstraint)) {
                /* expect N3.js literals with {Literal,Language}StemRange
                 *       or non-literals with IriStemRange
                 */
                var normalizedTest = function normalizedTest(val, ref, func) {
                  if (RdfTerm.isLiteral(val)) {
                    if (["LiteralStem", "LiteralStemRange"].indexOf(valueConstraint.type) !== -1) {
                      return func(RdfTerm.getLiteralValue(val), ref);
                    } else if (["LanguageStem", "LanguageStemRange"].indexOf(valueConstraint.type) !== -1) {
                      return func(RdfTerm.getLiteralLanguage(val) || null, ref);
                    } else {
                      return validationError("literal " + val + " not comparable with non-literal " + ref);
                    }
                  } else {
                    if (["IriStem", "IriStemRange"].indexOf(valueConstraint.type) === -1) {
                      return validationError("nonliteral " + val + " not comparable with literal " + JSON.stringify(ref));
                    } else {
                      return func(val, ref);
                    }
                  }
                };

                var startsWith = function startsWith(val, ref) {
                  return normalizedTest(val, ref, function (l, r) {
                    return valueConstraint.type === "LanguageStem" || valueConstraint.type === "LanguageStemRange" ? // rfc4647 basic filtering
                    l !== null && (l === r || r === "" || l[r.length] === "-") : // simple substring
                    l.startsWith(r);
                  });
                };

                var equals = function equals(val, ref) {
                  return normalizedTest(val, ref, function (l, r) {
                    return l === r;
                  });
                };

                // isTerm me -- strike "value" in
                if (!("type" in valueConstraint)) runtimeError("expected " + JSON.stringify(valueConstraint) + " to have a 'type' attribute.");
                var stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
                if (stemRangeTypes.indexOf(valueConstraint.type) === -1) runtimeError("expected type attribute '" + valueConstraint.type + "' to be in '" + stemRangeTypes + "'.");

                if (!isTerm(valueConstraint.stem)) {
                  expect(valueConstraint.stem, "type", "Wildcard"); // match whatever but check exclusions below
                } else {
                  if (!startsWith(value, valueConstraint.stem)) {
                    return false;
                  }
                }

                if (valueConstraint.exclusions) {
                  return !valueConstraint.exclusions.some(function (c) {
                    if (!isTerm(c)) {
                      if (!("type" in c)) runtimeError("expected " + JSON.stringify(c) + " to have a 'type' attribute.");
                      var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                      if (stemTypes.indexOf(c.type) === -1) runtimeError("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'.");
                      return startsWith(value, c.stem);
                    } else {
                      return equals(value, c);
                    }
                  });
                }

                return true;
              } else {// ignore -- would have caught it above
              }
            })) {
              validationError("value " + value + " not found in set " + JSON.stringify(valueExpr.values));
            }
          }
        }
      }

      if ("pattern" in valueExpr) {
        var regexp = "flags" in valueExpr ? new RegExp(valueExpr.pattern, valueExpr.flags) : new RegExp(valueExpr.pattern);
        if (!getLexicalValue(value).match(regexp)) validationError("value " + getLexicalValue(value) + " did not match pattern " + valueExpr.pattern);
      }

      Object.keys(stringTests).forEach(function (test) {
        if (test in valueExpr && !stringTests[test](label, valueExpr[test])) {
          validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
        }
      });
      Object.keys(numericValueTests).forEach(function (test) {
        if (test in valueExpr) {
          if (numeric) {
            if (!numericValueTests[test](numericParsers[numeric](label, validationError), valueExpr[test])) {
              validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
            }
          } else {
            validationError("facet violation: numeric facet " + test + " can't apply to " + value);
          }
        }
      });
      Object.keys(decimalLexicalTests).forEach(function (test) {
        if (test in valueExpr) {
          if (numeric === XSD + "integer" || numeric === XSD + "decimal") {
            if (!decimalLexicalTests[test]("" + numericParsers[numeric](label, validationError), valueExpr[test])) {
              validationError("facet violation: expected " + test + " of " + valueExpr[test] + " but got " + value);
            }
          } else {
            validationError("facet violation: numeric facet " + test + " can't apply to " + value);
          }
        }
      });
      return errors;
    };

    this.semActHandler = {
      handlers: {},
      results: {},

      /**
       * Store a semantic action handler.
       *
       * @param {string} name - semantic action's URL.
       * @param {object} handler - handler function.
       *
       * The handler object has a dispatch function is invoked with:
       * @param {string} code - text of the semantic action.
       * @param {object} ctx - matched triple or results subset.
       * @param {object} extensionStorage - place where the extension writes into the result structure.
       * @return {bool} false if the extension failed or did not accept the ctx object.
       */
      register: function register(name, handler) {
        this.handlers[name] = handler;
      },

      /**
       * Calls all semantic actions, allowing each to write to resultsArtifact.
       *
       * @param {array} semActs - list of semantic actions to invoke.
       * @return {bool} false if any result was false.
       */
      dispatchAll: function dispatchAll(semActs, ctx, resultsArtifact) {
        var _semActHanlder = this;

        return semActs.reduce(function (ret, semAct) {
          if (ret && semAct.name in _semActHanlder.handlers) {
            var code = "code" in semAct ? semAct.code : _ShExValidator.options.semActs[semAct.name];
            var existing = "extensions" in resultsArtifact && semAct.name in resultsArtifact.extensions;
            var extensionStorage = existing ? resultsArtifact.extensions[semAct.name] : {};
            ret = ret && _semActHanlder.handlers[semAct.name].dispatch(code, ctx, extensionStorage);

            if (!existing && Object.keys(extensionStorage).length > 0) {
              if (!("extensions" in resultsArtifact)) resultsArtifact.extensions = {};
              resultsArtifact.extensions[semAct.name] = extensionStorage;
            }

            return ret;
          }

          return ret;
        }, true);
      }
    };
  }
  /* _compileShapeToAST - compile a shape expression to an abstract syntax tree.
   *
   * currently tested but not used.
   */


  function _compileShapeToAST(expression, tripleConstraints, schema) {
    function Epsilon() {
      this.type = "Epsilon";
    }

    function TripleConstraint(ordinal, predicate, inverse, negated, valueExpr) {
      this.type = "TripleConstraint"; // this.ordinal = ordinal; @@ does 1card25

      this.inverse = !!inverse;
      this.negated = !!negated;
      this.predicate = predicate;
      if (valueExpr !== undefined) this.valueExpr = valueExpr;
    }

    function Choice(disjuncts) {
      this.type = "Choice";
      this.disjuncts = disjuncts;
    }

    function EachOf(conjuncts) {
      this.type = "EachOf";
      this.conjuncts = conjuncts;
    }

    function SemActs(expression, semActs) {
      this.type = "SemActs";
      this.expression = expression;
      this.semActs = semActs;
    }

    function KleeneStar(expression) {
      this.type = "KleeneStar";
      this.expression = expression;
    }

    function _compileExpression(expr, schema) {
      var repeated, container;
      /* _repeat: map expr with a min and max cardinality to a corresponding AST with Groups and Stars.
         expr 1 1 => expr
         expr 0 1 => Choice(expr, Eps)
         expr 0 3 => Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps)
         expr 2 5 => EachOf(expr, expr, Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps))
         expr 0 * => KleeneStar(expr)
         expr 1 * => EachOf(expr, KleeneStar(expr))
         expr 2 * => EachOf(expr, expr, KleeneStar(expr))
          @@TODO: favor Plus over Star if Epsilon not in expr.
      */

      function _repeat(expr, min, max) {
        if (min === undefined) {
          min = 1;
        }

        if (max === undefined) {
          max = 1;
        }

        if (min === 1 && max === 1) {
          return expr;
        }

        var opts = max === UNBOUNDED ? new KleeneStar(expr) : _seq(max - min).reduce(function (ret, elt, ord) {
          return ord === 0 ? new Choice([expr, new Epsilon()]) : new Choice([new EachOf([expr, ret]), new Epsilon()]);
        }, undefined);
        var reqd = min !== 0 ? new EachOf(_seq(min).map(function (ret) {
          return expr; // @@ something with ret
        }).concat(opts)) : opts;
        return reqd;
      }

      if (typeof expr === "string") {
        // Inclusion
        var included = schema._index.tripleExprs[expr].expression;
        return _compileExpression(included, schema);
      } else if (expr.type === "TripleConstraint") {
        // predicate, inverse, negated, valueExpr, annotations, semActs, min, max
        var valueExpr = "valueExprRef" in expr ? schema.valueExprDefns[expr.valueExprRef] : expr.valueExpr;
        var ordinal = tripleConstraints.push(expr) - 1;
        var tp = new TripleConstraint(ordinal, expr.predicate, expr.inverse, expr.negated, valueExpr);
        repeated = _repeat(tp, expr.min, expr.max);
        return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
      } else if (expr.type === "OneOf") {
        container = new Choice(expr.expressions.map(function (e) {
          return _compileExpression(e, schema);
        }));
        repeated = _repeat(container, expr.min, expr.max);
        return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
      } else if (expr.type === "EachOf") {
        container = new EachOf(expr.expressions.map(function (e) {
          return _compileExpression(e, schema);
        }));
        repeated = _repeat(container, expr.min, expr.max);
        return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
      } else throw Error("unexpected expr type: " + expr.type);
    }

    return expression ? _compileExpression(expression, schema) : new Epsilon();
  } // http://stackoverflow.com/questions/9422386/lazy-cartesian-product-of-arrays-arbitrary-nested-loops


  function crossProduct(sets) {
    var n = sets.length,
        carets = [],
        args = null;

    function init() {
      args = [];

      for (var i = 0; i < n; i++) {
        carets[i] = 0;
        args[i] = sets[i][0];
      }
    }

    function next() {
      // special case: crossProduct([]).next().next() returns false.
      if (args !== null && args.length === 0) return false;

      if (args === null) {
        init();
        return true;
      }

      var i = n - 1;
      carets[i]++;

      if (carets[i] < sets[i].length) {
        args[i] = sets[i][carets[i]];
        return true;
      }

      while (carets[i] >= sets[i].length) {
        if (i == 0) {
          return false;
        }

        carets[i] = 0;
        args[i] = sets[i][0];
        carets[--i]++;
      }

      args[i] = sets[i][carets[i]];
      return true;
    }

    return {
      next: next,
      "do": function _do(block, _context) {
        // old API
        return block.apply(_context, args);
      },
      // new API because
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments#Description
      // cautions about functions over arguments.
      get: function get() {
        return args;
      }
    };
  }
  /* N3jsTripleToString - simple toString function to make N3.js's triples
   * printable.
   */


  var N3jsTripleToString = function N3jsTripleToString() {
    function fmt(n) {
      return RdfTerm.isLiteral(n) ? ["http://www.w3.org/2001/XMLSchema#integer", "http://www.w3.org/2001/XMLSchema#float", "http://www.w3.org/2001/XMLSchema#double"].indexOf(RdfTerm.getLiteralType(n)) !== -1 ? parseInt(RdfTerm.getLiteralValue(n)) : n : RdfTerm.isBlank(n) ? n : "<" + n + ">";
    }

    return fmt(this.subject) + " " + fmt(this.predicate) + " " + fmt(this.object) + " .";
  };
  /* indexNeighborhood - index triples by predicate
   * returns: {
   *     byPredicate: Object: mapping from predicate to triples containing that
   *                  predicate.
   *
   *     candidates: [[1,3], [0,2]]: mapping from triple to the triple constraints
   *                 it matches.  It is initialized to []. Mappings that remain an
   *                 empty set indicate a triple which didn't matching anything in
   *                 the shape.
   *
   *     misses: list to recieve value constraint failures.
   *   }
   */


  function indexNeighborhood(triples) {
    return {
      byPredicate: triples.reduce(function (ret, t) {
        var p = t.predicate;
        if (!(p in ret)) ret[p] = [];
        ret[p].push(t); // If in VERBOSE mode, add a nice toString to N3.js's triple objects.

        if (VERBOSE) t.toString = N3jsTripleToString;
        return ret;
      }, {}),
      candidates: _seq(triples.length).map(function () {
        return [];
      }),
      misses: []
    };
  }
  /* sparqlOrder - sort triples by subject following SPARQL partial ordering.
   */


  function sparqlOrder(l, r) {
    var _map = [l, r].map(function (x) {
      return RdfTerm.isBlank(x) ? 1 : RdfTerm.isLiteral(x) ? 2 : 3;
    }),
        _map2 = _slicedToArray(_map, 2),
        lprec = _map2[0],
        rprec = _map2[1];

    return lprec === rprec ? l.localeCompare(r) : lprec - rprec;
  }
  /* Return a list of n ""s.
   *
   * Note that Array(n) on its own returns a "sparse array" so Array(n).map(f)
   * never calls f.
   */


  function _seq(n) {
    return n === 0 ? [] : Array(n).join(" ").split(/ /); // hahaha, javascript, you suck.
  }
  /* Expect property p with value v in object o
   */


  function expect(o, p, v) {
    if (!(p in o)) runtimeError("expected " + JSON.stringify(o) + " to have a '" + p + "' attribute.");
    if (arguments.length > 2 && o[p] !== v) runtimeError("expected " + p + " attribute '" + o[p] + "' to equal '" + v + "'.");
  }

  function noop() {}

  function runtimeError() {
    var errorStr = Array.prototype.join.call(arguments, "");
    var e = new Error(errorStr);
    Error.captureStackTrace(e, runtimeError);
    throw e;
  }

  return {
    construct: ShExValidator_constructor,
    start: Start,
    options: InterfaceOptions
  };
}(); // Export the `ShExValidator` class as a whole.


if (true) module.exports = ShExValidator;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/ShExWriter.js":
/*!*******************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/ShExWriter.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// **ShExWriter** writes ShEx documents.
var ShExWriter = function () {
  var util = __webpack_require__(/*! util */ "./node_modules/util/util.js");

  var UNBOUNDED = -1; // Matches a literal as represented in memory by the ShEx library

  var ShExLiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i; // rdf:type predicate (for 'a' abbreviation)

  var RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE = RDF_PREFIX + 'type'; // Characters in literals that require escaping

  var ESCAPE_1 = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
      ESCAPE_g = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
      ESCAPE_replacements = {
    '\\': '\\\\',
    '"': '\\"',
    '/': '\\/',
    '\t': '\\t',
    '\n': '\\n',
    '\r': '\\r',
    '\b': '\\b',
    '\f': '\\f'
  };
  var nodeKinds = {
    'iri': "IRI",
    'bnode': "BNODE",
    'literal': "LITERAL",
    'nonliteral': "NONLITERAL"
  };
  var nonLitNodeKinds = {
    'iri': "IRI",
    'bnode': "BNODE",
    'literal': "LITERAL",
    'nonliteral': "NONLITERAL"
  }; // ## Constructor

  function ShExWriter(outputStream, options) {
    if (!(this instanceof ShExWriter)) return new ShExWriter(outputStream, options); // Shift arguments if the first argument is not a stream

    if (outputStream && typeof outputStream.write !== 'function') options = outputStream, outputStream = null;
    options = options || {}; // If no output stream given, send the output as string through the end callback

    if (!outputStream) {
      var output = '';
      this._outputStream = {
        write: function write(chunk, encoding, done) {
          output += chunk;
          done && done();
        },
        end: function end(done) {
          done && done(null, output);
        }
      };
      this._endStream = true;
    } else {
      this._outputStream = outputStream;
      this._endStream = options.end === undefined ? true : !!options.end;
    } // Initialize writer, depending on the format


    this._prefixIRIs = Object.create(null);
    options.prefixes && this.addPrefixes(options.prefixes);
    this._error = options.error || _throwError;
    this.forceParens = !options.simplifyParentheses; // default to false

    this._expect = options.lax ? noop : expect;
  }

  ShExWriter.prototype = {
    // ## Private methods
    // ### `_write` writes the argument to the output stream
    _write: function _write(string, callback) {
      this._outputStream.write(string, 'utf8', callback);
    },
    // ### `_writeSchema` writes the shape to the output stream
    _writeSchema: function _writeSchema(schema, done) {
      var _ShExWriter = this;

      this._expect(schema, "type", "Schema");

      _ShExWriter.addPrefixes(schema.prefixes);

      if (schema.base) _ShExWriter._write("BASE " + this._encodeIriOrBlankNode(schema.base) + "\n");
      if (schema.imports) schema.imports.forEach(function (imp) {
        _ShExWriter._write("IMPORT " + _ShExWriter._encodeIriOrBlankNode(imp) + "\n");
      });
      if (schema.startActs) schema.startActs.forEach(function (act) {
        _ShExWriter._expect(act, "type", "SemAct");

        _ShExWriter._write(" %" + _ShExWriter._encodePredicate(act.name) + ("code" in act ? "{" + escapeCode(act.code) + "%" + "}" : "%"));
      });
      if (schema.start) _ShExWriter._write("start = " + _ShExWriter._writeShapeExpr(schema.start, done, true, 0).join('') + "\n");
      if ("shapes" in schema) schema.shapes.forEach(function (shapeExpr) {
        _ShExWriter._write(_ShExWriter._encodeShapeName(shapeExpr.id, false) + " " + _ShExWriter._writeShapeExpr(shapeExpr, done, true, 0).join("") + "\n", done);
      });
    },
    _writeShapeExpr: function _writeShapeExpr(shapeExpr, done, forceBraces, parentPrec) {
      var _ShExWriter = this;

      var pieces = [];
      if (typeof shapeExpr === "string") // ShapeRef
        pieces.push("@", _ShExWriter._encodeShapeName(shapeExpr)); // !!! []s for precedence!
      else if (shapeExpr.type === "ShapeExternal") pieces.push("EXTERNAL");else if (shapeExpr.type === "ShapeAnd") {
          if (parentPrec >= 3) pieces.push("(");
          var lastAndElided = false;
          shapeExpr.shapeExprs.forEach(function (expr, ord) {
            if (ord > 0) {
              // && !!! grammar rules too weird here

              /*
                shapeAtom:
                      nonLitNodeConstraint shapeOrRef?
                    | shapeDecl nonLitNodeConstraint?
                 nonLitInlineNodeConstraint:
                      nonLiteralKind stringFacet*
              */
              var nonLitNodeConstraint = function nonLitNodeConstraint(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type !== "NodeConstraint" || "nodeKind" in c && c.nodeKind === "literal" || "datatype" in c || "values" in c ? false : true;
              };

              var shapeOrRef = function shapeOrRef(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type === "Shape" || c.type === "ShapeRef";
              };

              var shapeDecl = function shapeDecl(idx) {
                var c = shapeExpr.shapeExprs[idx];
                return c.type === "Shape";
              };

              var elideAnd = !lastAndElided && (nonLitNodeConstraint(ord - 1) && shapeOrRef(ord) || shapeDecl(ord - 1) && nonLitNodeConstraint(ord));

              if (!elideAnd) {
                pieces.push(" AND ");
              }

              lastAndElided = elideAnd;
            }

            pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, false, 3));
          });
          if (parentPrec >= 3) pieces.push(")");
        } else if (shapeExpr.type === "ShapeOr") {
          if (parentPrec >= 2) pieces.push("(");
          shapeExpr.shapeExprs.forEach(function (expr, ord) {
            if (ord > 0) pieces.push(" OR ");
            pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr, done, forceBraces, 2));
          });
          if (parentPrec >= 2) pieces.push(")");
        } else if (shapeExpr.type === "ShapeNot") {
          if (parentPrec >= 4) pieces.push("(");
          pieces.push("NOT ");
          pieces = pieces.concat(_ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, forceBraces, 4));
          if (parentPrec >= 4) pieces.push(")");
        } else if (shapeExpr.type === "Shape") {
          pieces = pieces.concat(_ShExWriter._writeShape(shapeExpr, done, forceBraces));
        } else if (shapeExpr.type === "NodeConstraint") {
          pieces = pieces.concat(_ShExWriter._writeNodeConstraint(shapeExpr, done, forceBraces));
        } else throw Error("expected Shape{,And,Or,Ref} or NodeConstraint in " + util.inspect(shapeExpr));
      return pieces;
    },
    // ### `_writeShape` writes the shape to the output stream
    _writeShape: function _writeShape(shape, done, forceBraces) {
      var _ShExWriter = this;

      try {
        var _writeShapeActions = function _writeShapeActions(semActs) {
          if (!semActs) return;
          semActs.forEach(function (act) {
            _ShExWriter._expect(act, "type", "SemAct");

            pieces.push(" %", _ShExWriter._encodePredicate(act.name), "code" in act ? "{" + escapeCode(act.code) + "%" + "}" : "%");
          });
        };

        var _writeCardinality = function _writeCardinality(min, max) {
          if (min === 0 && max === 1) pieces.push("?");else if (min === 0 && max === UNBOUNDED) pieces.push("*");else if (min === undefined && max === undefined) ;else if (min === 1 && max === UNBOUNDED) pieces.push("+");else pieces.push("{", min, ",", max === UNBOUNDED ? "*" : max, "}"); // by coincidence, both use the same character.
        };

        var _writeExpression = function _writeExpression(expr, indent, parentPrecedence) {
          function _writeExpressionActions(semActs) {
            if (semActs) {
              semActs.forEach(function (act) {
                _ShExWriter._expect(act, "type", "SemAct");

                pieces.push("\n" + indent + "   %");
                pieces.push(_ShExWriter._encodeValue(act.name));
                if ("code" in act) pieces.push("{" + escapeCode(act.code) + "%" + "}");else pieces.push("%");
              });
            }
          }

          function _exprGroup(exprs, separator, precedence, forceParens) {
            var needsParens = precedence < parentPrecedence || forceParens;

            if (needsParens) {
              pieces.push("(");
            }

            exprs.forEach(function (nested, ord) {
              _writeExpression(nested, indent + "  ", precedence);

              if (ord < exprs.length - 1) pieces.push(separator);
            });

            if (needsParens) {
              pieces.push(")");
            }
          }

          if (typeof expr === "string") {
            pieces.push("&");
            pieces.push(_ShExWriter._encodeShapeName(expr, false));
          } else {
            if ("id" in expr) {
              pieces.push("$");
              pieces.push(_ShExWriter._encodeIriOrBlankNode(expr.id, true));
            }

            if (expr.type === "TripleConstraint") {
              if (expr.inverse) pieces.push("^");
              if (expr.negated) pieces.push("!");
              pieces.push(indent, _ShExWriter._encodePredicate(expr.predicate), " ");
              if ("valueExpr" in expr) pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));else pieces.push(". ");

              _writeCardinality(expr.min, expr.max);

              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else if (expr.type === "OneOf") {
              var needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;

              _exprGroup(expr.expressions, "\n" + indent + "| ", 1, needsParens || _ShExWriter.forceParens);

              _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt


              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else if (expr.type === "EachOf") {
              var needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;

              _exprGroup(expr.expressions, ";\n" + indent, 2, needsParens || _ShExWriter.forceParens);

              _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt


              _ShExWriter._annotations(pieces, expr.annotations, indent);

              _writeExpressionActions(expr.semActs);
            } else throw Error("unexpected expr type: " + expr.type);
          }
        };

        var pieces = []; // guessing push/join is faster than concat

        this._expect(shape, "type", "Shape");

        if (shape.closed) pieces.push("CLOSED "); // if (shape.inherit && shape.inherit.length > 0) { futureWork
        //   pieces.push("&");
        //   shape.inherit.forEach(function (i, ord) {
        //     if (ord)
        //       pieces.push(" ")
        //     pieces.push(_ShExWriter._encodeShapeName(i, ord > 0));
        //   });
        //   pieces.push(" ");
        // }

        if (shape.extra && shape.extra.length > 0) {
          pieces.push("EXTRA ");
          shape.extra.forEach(function (i, ord) {
            pieces.push(_ShExWriter._encodeShapeName(i, false) + " ");
          });
          pieces.push(" ");
        }

        var empties = ["values", "length", "minlength", "maxlength", "pattern", "flags"];
        pieces.push("{\n");
        if (shape.expression) // t: 0, 0Inherit1
          _writeExpression(shape.expression, "  ", 0);
        pieces.push("\n}");

        _writeShapeActions(shape.semActs);

        _ShExWriter._annotations(pieces, shape.annotations, "  ");

        return pieces;
      } catch (error) {
        done && done(error);
      }
    },
    // ### `_writeShape` writes the shape to the output stream
    _writeNodeConstraint: function _writeNodeConstraint(v, done) {
      var _ShExWriter = this;

      try {
        _ShExWriter._expect(v, "type", "NodeConstraint");

        var pieces = [];
        if (v.nodeKind in nodeKinds) pieces.push(nodeKinds[v.nodeKind], " ");else if (v.nodeKind !== undefined) _ShExWriter._error("unexpected nodeKind: " + v.nodeKind); // !!!!

        this._fillNodeConstraint(pieces, v, done);

        this._annotations(pieces, v.annotations, "  ");

        return pieces;
      } catch (error) {
        done && done(error);
      }
    },
    _annotations: function _annotations(pieces, annotations, indent) {
      var _ShExWriter = this;

      if (annotations) {
        annotations.forEach(function (a) {
          _ShExWriter._expect(a, "type", "Annotation");

          pieces.push("//\n" + indent + "   ");
          pieces.push(_ShExWriter._encodeValue(a.predicate));
          pieces.push(" ");
          pieces.push(_ShExWriter._encodeValue(a.object));
        });
      }
    },
    _fillNodeConstraint: function _fillNodeConstraint(pieces, v, done) {
      var _ShExWriter = this;

      if (v.datatype && v.values) _ShExWriter._error("found both datatype and values in " + expr);

      if (v.datatype) {
        pieces.push(_ShExWriter._encodeShapeName(v.datatype));
      }

      if (v.values) {
        pieces.push("[");
        v.values.forEach(function (t, ord) {
          if (ord > 0) pieces.push(" ");

          if (!isTerm(t)) {
            var langOrLiteral = function langOrLiteral(t, c) {
              return ["LanguageStem", "LanguageStemRange"].indexOf(t.type) !== -1 ? "@" + c : ["LiteralStem", "LiteralStemRange"].indexOf(t.type) !== -1 ? '"' + c.replace(ESCAPE_g, c) + '"' : _ShExWriter._encodeValue(c);
            };

            //          expect(t, "type", "IriStemRange");
            if (!("type" in t)) runtimeError("expected " + JSON.stringify(t) + " to have a 'type' attribute.");
            var stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
            if (stemRangeTypes.indexOf(t.type) === -1) runtimeError("expected type attribute '" + t.type + "' to be in '" + stemRangeTypes + "'.");

            if (t.type === "Language") {
              pieces.push("@" + t.languageTag);
            } else if (!isTerm(t.stem)) {
              expect(t.stem, "type", "Wildcard");
              pieces.push(".");
            } else {
              pieces.push(langOrLiteral(t, t.stem) + "~");
            }

            if (t.exclusions) {
              t.exclusions.forEach(function (c) {
                pieces.push(" - ");

                if (!isTerm(c)) {
                  //                expect(c, "type", "IriStem");
                  if (!("type" in c)) runtimeError("expected " + JSON.stringify(c) + " to have a 'type' attribute.");
                  var stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                  if (stemTypes.indexOf(c.type) === -1) runtimeError("expected type attribute '" + c.type + "' to be in '" + stemTypes + "'.");
                  pieces.push(langOrLiteral(t, c.stem) + "~");
                } else {
                  pieces.push(langOrLiteral(t, c));
                }
              });
            }
          } else {
            pieces.push(_ShExWriter._encodeValue(t));
          }
        });
        pieces.push("]");
      }

      if ('pattern' in v) {
        var pattern = v.pattern.replace(/\//g, "\\/"); // if (ESCAPE_1.test(pattern))
        //   pattern = pattern.replace(ESCAPE_g, characterReplacer);

        var flags = 'flags' in v ? v.flags : "";
        pieces.push("/" + pattern + "/" + flags + " ");
      }

      ['length', 'minlength', 'maxlength', 'mininclusive', 'minexclusive', 'maxinclusive', 'maxexclusive', 'totaldigits', 'fractiondigits'].forEach(function (a) {
        if (v[a]) pieces.push(" ", a, " ", v[a]);
      });
      return pieces;

      function isTerm(t) {
        return _typeof(t) !== "object" || "value" in t && Object.keys(t).reduce(function (r, k) {
          return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
        }, true);
      }
    },
    // ### `_encodeIriOrBlankNode` represents an IRI or blank node
    _encodeIriOrBlankNode: function _encodeIriOrBlankNode(iri, trailingSpace) {
      trailingSpace = trailingSpace ? ' ' : ''; // A blank node is represented as-is

      if (iri[0] === '_' && iri[1] === ':') return iri; // Escape special characters

      if (ESCAPE_1.test(iri)) iri = iri.replace(ESCAPE_g, characterReplacer); // Try to represent the IRI as prefixed name

      var prefixMatch = this._prefixRegex.exec(iri);

      return !prefixMatch ? '<' + iri + '>' : (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]) + trailingSpace;
    },
    // ### `_encodeLiteral` represents a literal
    _encodeLiteral: function _encodeLiteral(value, type, language) {
      // Escape special characters
      if (ESCAPE_1.test(value)) value = value.replace(ESCAPE_g, characterReplacer); // Write the literal, possibly with type or language

      if (language) return '"' + value + '"@' + language;else if (type) return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);else return '"' + value + '"';
    },
    // ### `_encodeShapeName` represents a subject
    _encodeShapeName: function _encodeShapeName(subject, trailingSpace) {
      if (subject[0] === '"') throw new Error('A literal as subject is not allowed: ' + subject);
      return this._encodeIriOrBlankNode(subject, trailingSpace);
    },
    // ### `_encodePredicate` represents a predicate
    _encodePredicate: function _encodePredicate(predicate) {
      if (predicate[0] === '"') throw new Error('A literal as predicate is not allowed: ' + predicate);
      return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
    },
    // ### `_encodeValue` represents an object
    _encodeValue: function _encodeValue(object) {
      // Represent an IRI or blank node
      if (_typeof(object) !== "object") return this._encodeIriOrBlankNode(object); // Represent a literal

      return this._encodeLiteral(object.value, object.type, object.language);
    },
    // ### `_blockedWrite` replaces `_write` after the writer has been closed
    _blockedWrite: function _blockedWrite() {
      throw new Error('Cannot write because the writer has been closed.');
    },
    writeSchema: function writeSchema(shape, done) {
      this._writeSchema(shape, done);

      this.end(done);
    },
    // ### `addShape` adds the shape to the output stream
    addShape: function addShape(shape, name, done) {
      this._write(_ShExWriter._encodeShapeName(name, false) + " " + _ShExWriter._writeShapeExpr(shape, done, true, 0).join(""), done);
    },
    // ### `addShapes` adds the shapes to the output stream
    addShapes: function addShapes(shapes) {
      for (var i = 0; i < shapes.length; i++) {
        this.addShape(shapes[i]);
      }
    },
    // ### `addPrefix` adds the prefix to the output stream
    addPrefix: function addPrefix(prefix, iri, done) {
      var prefixes = {};
      prefixes[prefix] = iri;
      this.addPrefixes(prefixes, done);
    },
    // ### `addPrefixes` adds the prefixes to the output stream
    addPrefixes: function addPrefixes(prefixes, done) {
      // Add all useful prefixes
      var prefixIRIs = this._prefixIRIs,
          hasPrefixes = false;

      for (var prefix in prefixes) {
        // Verify whether the prefix can be used and does not exist yet
        var iri = prefixes[prefix];

        if ( // @@ /[#\/]$/.test(iri) && !! what was that?
        prefixIRIs[iri] !== (prefix += ':')) {
          hasPrefixes = true;
          prefixIRIs[iri] = prefix; // Write prefix

          this._write('PREFIX ' + prefix + ' <' + iri + '>\n');
        }
      } // Recreate the prefix matcher


      if (hasPrefixes) {
        var IRIlist = '',
            prefixList = '';

        for (var prefixIRI in prefixIRIs) {
          IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
          prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
        }

        IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
        this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' + '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
      } // End a prefix block with a newline


      this._write(hasPrefixes ? '\n' : '', done);
    },
    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
    _prefixRegex: /$0^/,
    // ### `end` signals the end of the output stream
    end: function end(done) {
      // Disallow further writing
      this._write = this._blockedWrite; // Try to end the underlying stream, ensuring done is called exactly one time

      var singleDone = done && function (error, result) {
        singleDone = null, done(error, result);
      };

      if (this._endStream) {
        try {
          return this._outputStream.end(singleDone);
        } catch (error) {
          /* error closing stream */
        }
      }

      singleDone && singleDone();
    }
  }; // Replaces a character by its escaped version

  function characterReplacer(character) {
    // Replace a single character by its escaped version
    var result = ESCAPE_replacements[character];

    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = "\\u0000".substr(0, 6 - result.length) + result;
      } // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
          result = ((character.charCodeAt(0) - 0xD800) * 0x400 + character.charCodeAt(1) + 0x2400).toString(16);
          result = "\\U00000000".substr(0, 10 - result.length) + result;
        }
    }

    return result;
  }

  function escapeCode(code) {
    return code.replace(/\\/g, "\\\\").replace(/%/g, "\\%");
  }
  /** _throwError: overridable function to throw Errors().
   *
   * @param func (optional): function at which to truncate stack trace
   * @param str: error message
   */


  function _throwError(func, str) {
    if (typeof func !== "function") {
      str = func;
      func = _throwError;
    }

    var e = new Error(str);
    Error.captureStackTrace(e, func);
    throw e;
  } // Expect property p with value v in object o


  function expect(o, p, v) {
    if (!(p in o)) this._error(expect, "expected " + o + " to have a ." + p);
    if (arguments.length > 2 && o[p] !== v) this._error(expect, "expected " + o[o] + " to equal ." + v);
  } // The empty function


  function noop() {}

  return ShExWriter;
}(); // Export the `ShExWriter` class as a whole.


if (true) module.exports = ShExWriter; // node environment

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/regex/nfax-val-1err.js":
/*!****************************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/regex/nfax-val-1err.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var NFAXVal1Err = function () {
  var RdfTerm = __webpack_require__(/*! ../RdfTerm */ "../shex.js/packages/shex-core/lib/RdfTerm.js");

  var Split = "<span class='keyword' title='Split'>|</span>";
  var Rept = "<span class='keyword' title='Repeat'>×</span>";
  var Match = "<span class='keyword' title='Match'>␃</span>";
  /* compileNFA - compile regular expression and index triple constraints
   */

  var UNBOUNDED = -1;

  function compileNFA(schema, shape, index) {
    var expression = shape.expression;
    return NFA();

    function NFA() {
      // wrapper for states, startNo and matchstate
      var states = [];
      var matchstate = State_make(Match, []);
      var startNo = matchstate;
      var stack = [];
      var pair;

      if (expression) {
        var pair = walkExpr(expression, []);
        patch(pair.tail, matchstate);
        startNo = pair.start;
      }

      var ret = {
        algorithm: "rbenx",
        end: matchstate,
        states: states,
        start: startNo,
        match: rbenx_match
      };
      matchstate = states = startNo = null;
      return ret;

      function walkExpr(expr, stack) {
        var s, starts;
        var lastTail;

        function maybeAddRept(start, tail) {
          if ((expr.min == undefined || expr.min === 1) && (expr.max == undefined || expr.max === 1)) return {
            start: start,
            tail: tail
          };
          s = State_make(Rept, [start]);
          states[s].expr = expr; // cache min/max in normalized form for simplicity of comparison.

          states[s].min = "min" in expr ? expr.min : 1;
          states[s].max = "max" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;
          patch(tail, s);
          return {
            start: s,
            tail: [s]
          };
        }

        if (typeof expr === "string") {
          // Inclusion
          var included = index.tripleExprs[expr];
          return walkExpr(included, stack);
        } else if (expr.type === "TripleConstraint") {
          s = State_make(expr, []);
          states[s].stack = stack;
          return {
            start: s,
            tail: [s]
          }; // maybeAddRept(s, [s]);
        } else if (expr.type === "OneOf") {
          lastTail = [];
          starts = [];
          expr.expressions.forEach(function (nested, ord) {
            pair = walkExpr(nested, stack.concat({
              c: expr,
              e: ord
            }));
            starts.push(pair.start);
            lastTail = lastTail.concat(pair.tail);
          });
          s = State_make(Split, starts);
          states[s].expr = expr;
          return maybeAddRept(s, lastTail);
        } else if (expr.type === "EachOf") {
          expr.expressions.forEach(function (nested, ord) {
            pair = walkExpr(nested, stack.concat({
              c: expr,
              e: ord
            }));
            if (ord === 0) s = pair.start;else patch(lastTail, pair.start);
            lastTail = pair.tail;
          });
          return maybeAddRept(s, lastTail);
        }

        throw Error("unexpected expr type: " + expr.type);
      }

      ;

      function State_make(c, outs, negated) {
        var ret = states.length;
        states.push({
          c: c,
          outs: outs
        });
        if (negated) states[ret].negated = true; // only include if true for brevity

        return ret;
      }

      function patch(l, target) {
        l.forEach(function (elt) {
          states[elt].outs.push(target);
        });
      }
    }

    function nfaToString() {
      var known = {
        OneOf: [],
        EachOf: []
      };

      function dumpTripleConstraint(tc) {
        return "<" + tc.predicate + ">";
      }

      function card(obj) {
        var x = "";
        if ("min" in obj) x += obj.min;
        if ("max" in obj) x += "," + obj.max;
        return x ? "{" + x + "}" : "";
      }

      function junct(j) {
        var id = known[j.type].indexOf(j);
        if (id === -1) id = known[j.type].push(j) - 1;
        return j.type + id; // + card(j);
      }

      function dumpStackElt(elt) {
        return junct(elt.c) + "." + elt.e + ("i" in elt ? "[" + elt.i + "]" : "");
      }

      function dumpStack(stack) {
        return stack.map(function (elt) {
          return dumpStackElt(elt);
        }).join("/");
      }

      function dumpNFA(states, startNo) {
        return states.map(function (s, i) {
          return (i === startNo ? s.c === Match ? "." : "S" : s.c === Match ? "E" : " ") + i + " " + (s.c === Split ? "Split-" + junct(s.expr) : s.c === Rept ? "Rept-" + junct(s.expr) : s.c === Match ? "Match" : dumpTripleConstraint(s.c)) + card(s) + "→" + s.outs.join(" | ") + ("stack" in s ? dumpStack(s.stack) : "");
        }).join("\n");
      }

      function dumpMatched(matched) {
        return matched.map(function (m) {
          return dumpTripleConstraint(m.c) + "[" + m.triples.join(",") + "]" + dumpStack(m.stack);
        }).join(",");
      }

      function dumpThread(thread) {
        return "S" + thread.state + ":" + Object.keys(thread.repeats).map(function (k) {
          return k + "×" + thread.repeats[k];
        }).join(",") + " " + dumpMatched(thread.matched);
      }

      function dumpThreadList(list) {
        return "[[" + list.map(function (thread) {
          return dumpThread(thread);
        }).join("\n  ") + "]]";
      }

      return {
        nfa: dumpNFA,
        stack: dumpStack,
        stackElt: dumpStackElt,
        thread: dumpThread,
        threadList: dumpThreadList
      };
    }

    function rbenx_match(graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, recurse, direct, semActHandler, checkValueExpr, trace) {
      var rbenx = this;
      var clist = [],
          nlist = []; // list of {state:state number, repeats:stateNo->repetitionCount}

      function localExpect(list) {
        return list.map(function (st) {
          var s = rbenx.states[st.state]; // simpler threads are a list of states.

          return renderAtom(s.c, s.negated);
        });
      }

      if (rbenx.states.length === 1) return matchedToResult([], constraintList, neighborhood, recurse, direct, semActHandler, checkValueExpr);
      var chosen = null; // var dump = nfaToString();
      // console.log(dump.nfa(this.states, this.start));

      addstate(rbenx, clist, this.start, {
        repeats: {},
        avail: [],
        matched: [],
        stack: [],
        errors: []
      });

      while (clist.length) {
        nlist = [];
        if (trace) trace.push({
          threads: []
        });

        for (var threadno = 0; threadno < clist.length; ++threadno) {
          var thread = clist[threadno];
          if (thread.state === rbenx.end) continue;
          var state = rbenx.states[thread.state];
          var nlistlen = nlist.length;
          var constraintNo = constraintList.indexOf(state.c); // may be Accept!

          var min = "min" in state.c ? state.c.min : 1;
          var max = "max" in state.c ? state.c.max === UNBOUNDED ? Infinity : state.c.max : 1;
          if ("negated" in state.c && state.c.negated) min = max = 0;
          if (thread.avail[constraintNo] === undefined) thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].slice();
          var taken = thread.avail[constraintNo].splice(0, max);

          if (taken.length >= min) {
            do {
              addStates(rbenx, nlist, thread, taken);
            } while (function () {
              if (thread.avail[constraintNo].length > 0 && taken.length < max) {
                taken.push(thread.avail[constraintNo].shift());
                return true; // stay in look to take more.
              } else {
                return false; // no more to take or we're already at max
              }
            }());
          }

          if (trace) trace[trace.length - 1].threads.push({
            state: clist[threadno].state,
            to: nlist.slice(nlistlen).map(function (x) {
              return stateString(x.state, x.repeats);
            })
          });
        } // console.log(dump.threadList(nlist));


        if (nlist.length === 0 && chosen === null) return reportError(localExpect(clist, rbenx.states));
        var t = clist;
        clist = nlist;
        nlist = t;
        var longerChosen = clist.reduce(function (ret, elt) {
          var matchedAll = elt.matched.reduce(function (ret, m) {
            return ret + m.triples.length; // count matched triples
          }, 0) === tripleToConstraintMapping.reduce(function (ret, t) {
            return t === undefined ? ret : ret + 1; // count expected
          }, 0);
          return ret !== null ? ret : elt.state === rbenx.end && matchedAll ? elt : null;
        }, null);
        if (longerChosen) chosen = longerChosen; // if (longerChosen !== null)
        //   console.log(JSON.stringify(matchedToResult(longerChosen.matched)));
      }

      if (chosen === null) return reportError();

      function reportError() {
        return {
          type: "Failure",
          node: node,
          errors: localExpect(clist, rbenx.states)
        };
      }

      function localExpect() {
        return clist.map(function (t) {
          var c = rbenx.states[t.state].c; // if (c === Match)
          //   return { type: "EndState999" };

          var valueExpr = null;

          if (typeof c.valueExpr === "string") {
            // ShapeRef
            valueExpr = c.valueExpr;
            if (RdfTerm.isBlank(valueExpr)) valueExpr = schema.shapes[valueExpr];
          } else if (c.valueExpr) {
            valueExpr = extend({}, c.valueExpr);
          }

          return extend({
            type: state.c.negated ? "NegatedProperty" : t.state === rbenx.end ? "ExcessTripleViolation" : "MissingProperty",
            property: state.c.predicate
          }, valueExpr ? {
            valueExpr: valueExpr
          } : {});
        });
      } // console.log("chosen:", dump.thread(chosen));


      return "errors" in chosen.matched ? chosen.matched : matchedToResult(chosen.matched, constraintList, neighborhood, recurse, direct, semActHandler, checkValueExpr);
    }

    function addStates(rbenx, nlist, thread, taken) {
      var state = rbenx.states[thread.state]; // find the exprs that require repetition

      var exprs = rbenx.states.map(function (x) {
        return x.c === Rept ? x.expr : null;
      });
      var newStack = state.stack.map(function (e) {
        var i = thread.repeats[exprs.indexOf(e.c)];
        if (i === undefined) i = 0; // expr has no repeats
        else i = i - 1;
        return {
          c: e.c,
          e: e.e,
          i: i
        };
      });
      var withIndexes = {
        c: state.c,
        triples: taken,
        stack: newStack
      };
      thread.matched = thread.matched.concat(withIndexes);
      state.outs.forEach(function (o) {
        // single out if NFA includes epsilons
        addstate(rbenx, nlist, o, thread);
      });
    }

    function addstate(rbenx, list, stateNo, thread, seen) {
      seen = seen || [];
      var seenkey = stateString(stateNo, thread.repeats);
      if (seen.indexOf(seenkey) !== -1) return;
      seen.push(seenkey);
      var s = rbenx.states[stateNo];

      if (s.c === Split) {
        return s.outs.reduce(function (ret, o, idx) {
          return ret.concat(addstate(rbenx, list, o, thread, seen));
        }, []); // } else if (s.c.type === "OneOf" || s.c.type === "EachOf") { // don't need Rept
      } else if (s.c === Rept) {
        var ret = []; // matched = [matched].concat("Rept" + s.expr);

        if (!(stateNo in thread.repeats)) thread.repeats[stateNo] = 0;
        var repetitions = thread.repeats[stateNo]; // add(r < s.min ? outs[0] : r >= s.min && < s.max ? outs[0], outs[1] : outs[1])

        if (repetitions < s.max) ret = ret.concat(addstate(rbenx, list, s.outs[0], incrmRepeat(thread, stateNo), seen)); // outs[0] to repeat

        if (repetitions >= s.min && repetitions <= s.max) ret = ret.concat(addstate(rbenx, list, s.outs[1], resetRepeat(thread, stateNo), seen)); // outs[1] when done

        return ret;
      } else {
        // if (stateNo !== rbenx.end || !thread.avail.reduce((r2, avail) => { faster if we trim early??
        //   return r2 || avail.length > 0;
        // }, false))
        return [list.push({
          // return [new list element index]
          state: stateNo,
          repeats: thread.repeats,
          avail: thread.avail.map(function (a) {
            // copy parent thread's avail vector
            return a.slice();
          }),
          stack: thread.stack,
          matched: thread.matched,
          errors: thread.errors
        }) - 1];
      }
    }

    function resetRepeat(thread, repeatedState) {
      var trimmedRepeats = Object.keys(thread.repeats).reduce(function (r, k) {
        if (parseInt(k) !== repeatedState) // ugh, hash keys are strings
          r[k] = thread.repeats[k];
        return r;
      }, {});
      return {
        state: thread.state
        /*???*/
        ,
        repeats: trimmedRepeats,
        matched: thread.matched,
        avail: thread.avail.slice(),
        stack: thread.stack
      };
    }

    function incrmRepeat(thread, repeatedState) {
      var incrmedRepeats = Object.keys(thread.repeats).reduce(function (r, k) {
        r[k] = parseInt(k) == repeatedState ? thread.repeats[k] + 1 : thread.repeats[k];
        return r;
      }, {});
      return {
        state: thread.state
        /*???*/
        ,
        repeats: incrmedRepeats,
        matched: thread.matched,
        avail: thread.avail.slice(),
        stack: thread.stack
      };
    }

    function stateString(state, repeats) {
      var rs = Object.keys(repeats).map(function (rpt) {
        return rpt + ":" + repeats[rpt];
      }).join(",");
      return rs.length ? state + "-" + rs : "" + state;
    }

    function matchedToResult(matched, constraintList, neighborhood, recurse, direct, semActHandler, checkValueExpr) {
      var last = [];
      var errors = [];
      var skips = [];
      var ret = matched.reduce(function (out, m) {
        var mis = 0;
        var ptr = out,
            t;

        while (mis < last.length && m.stack[mis].c === last[mis].c && // constraint
        m.stack[mis].i === last[mis].i && // iteration number
        m.stack[mis].e === last[mis].e) {
          // (dis|con)junction number
          ptr = ptr.solutions[last[mis].i].expressions[last[mis].e];
          ++mis;
        }

        while (mis < m.stack.length) {
          if (mis >= last.length) {
            last.push({});
          }

          if (m.stack[mis].c !== last[mis].c) {
            t = [];
            ptr.type = m.stack[mis].c.type === "EachOf" ? "EachOfSolutions" : "OneOfSolutions", ptr.solutions = t;
            if ("min" in m.stack[mis].c) ptr.min = m.stack[mis].c.min;
            if ("max" in m.stack[mis].c) ptr.max = m.stack[mis].c.max;
            if ("annotations" in m.stack[mis].c) ptr.annotations = m.stack[mis].c.annotations;
            if ("semActs" in m.stack[mis].c) ptr.semActs = m.stack[mis].c.semActs;
            ptr = t;
            last[mis].i = null; // !!! on the way out to call after valueExpr test

            if ("semActs" in m.stack[mis].c) {
              if (!semActHandler.dispatchAll(m.stack[mis].c.semActs, "???", ptr)) throw {
                type: "SemActFailure",
                errors: [{
                  type: "UntrackedSemActFailure"
                }]
              };
            }

            if (ret && "semActs" in expr) {
              ret.semActs = expr.semActs;
            }
          } else {
            ptr = ptr.solutions;
          }

          if (m.stack[mis].i !== last[mis].i) {
            t = [];
            ptr[m.stack[mis].i] = {
              type: m.stack[mis].c.type === "EachOf" ? "EachOfSolution" : "OneOfSolution",
              expressions: t
            };
            ptr = t;
            last[mis].e = null;
          } else {
            ptr = ptr[last[mis].i].expressions;
          }

          if (m.stack[mis].e !== last[mis].e) {
            t = {};
            ptr[m.stack[mis].e] = t;
            if (m.stack[mis].e > 0 && ptr[m.stack[mis].e - 1] === undefined && skips.indexOf(ptr) === -1) skips.push(ptr);
            ptr = t;
            last.length = mis + 1; // chop off last so we create everything underneath
          } else {
            throw "how'd we get here?";
            ptr = ptr[last[mis].e];
          }

          ++mis;
        }

        ptr.type = "TripleConstraintSolutions";
        if ("min" in m.c) ptr.min = m.c.min;
        if ("max" in m.c) ptr.max = m.c.max;
        ptr.predicate = m.c.predicate;
        if ("valueExpr" in m.c) ptr.valueExpr = m.c.valueExpr;
        if ("productionLabel" in m.c) ptr.productionLabel = m.c.productionLabel;
        ptr.solutions = m.triples.map(function (tno) {
          var triple = neighborhood[tno];
          var ret = {
            type: "TestedTriple",
            subject: triple.subject,
            predicate: triple.predicate,
            object: ldify(triple.object)
          };

          function ldify(term) {
            if (term[0] !== "\"") return term;
            var ret = {
              value: RdfTerm.getLiteralValue(term)
            };
            var dt = RdfTerm.getLiteralType(term);
            if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
            var lang = RdfTerm.getLiteralLanguage(term);
            if (lang) ret.language = lang;
            return ret;
          }

          function diver(focus, shape, dive) {
            var sub = dive(focus, shape);

            if ("errors" in sub) {
              // console.dir(sub);
              var err = {
                type: "ReferenceError",
                focus: focus,
                shape: shape,
                errors: sub
              };
              if (typeof shapeLabel === "string" && RdfTerm.isBlank(shapeLabel)) err.referencedShape = shape;
              return [err];
            }

            if (("solution" in sub || "solutions" in sub) && Object.keys(sub.solution || sub.solutions).length !== 0 || sub.type === "Recursion") ret.referenced = sub; // !!! needs to aggregate errors and solutions

            return [];
          }

          function diveRecurse(focus, shapeLabel) {
            return diver(focus, shapeLabel, recurse);
          }

          function diveDirect(focus, shapeLabel) {
            return diver(focus, shapeLabel, direct);
          }

          if ("valueExpr" in ptr) errors = errors.concat(checkValueExpr(ptr.inverse ? triple.subject : triple.object, ptr.valueExpr, diveRecurse, diveDirect));
          if (errors.length === 0 && "semActs" in m.c && !semActHandler.dispatchAll(m.c.semActs, triple, ret)) errors.push({
            type: "SemActFailure",
            errors: [{
              type: "UntrackedSemActFailure"
            }]
          }); // some semAct aborted

          return ret;
        });
        if ("annotations" in m.c) ptr.annotations = m.c.annotations;
        if ("semActs" in m.c) ptr.semActs = m.c.semActs;
        last = m.stack.slice();
        return out;
      }, {});
      if (errors.length) return {
        type: "SemActFailure",
        errors: errors
      }; // Clear out the nulls for the expressions with min:0 and no matches.
      // <S> { (:p .; :q .)?; :r . } \ { <s> :r 1 } -> i:0, e:1 resulting in null at e=0
      // Maybe we want these nulls in expressions[] to make it clear that there are holes?

      skips.forEach(function (skip) {
        for (var exprNo = 0; exprNo < skip.length; ++exprNo) {
          if (skip[exprNo] === null || skip[exprNo] === undefined) skip.splice(exprNo--, 1);
        }
      });
      if ("semActs" in shape) ret.semActs = shape.semActs;
      return ret;
    }
  }

  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  } // ## Exports


  return exports = {
    name: "nfax-val-1err",
    description: "simple regular expression engine with n out states",
    compile: compileNFA
  };
}();

if (true) module.exports = NFAXVal1Err;

/***/ }),

/***/ "../shex.js/packages/shex-core/lib/regex/threaded-val-nerr.js":
/*!********************************************************************!*\
  !*** ../shex.js/packages/shex-core/lib/regex/threaded-val-nerr.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ThreadedValNErr = function () {
  var RdfTerm = __webpack_require__(/*! ../RdfTerm */ "../shex.js/packages/shex-core/lib/RdfTerm.js");

  var UNBOUNDED = -1;

  function vpEngine(schema, shape, index) {
    var outerExpression = shape.expression;
    return {
      match: match
    };

    function match(graph, node, constraintList, constraintToTripleMapping, tripleToConstraintMapping, neighborhood, recurse, direct, semActHandler, checkValueExpr, trace) {
      /*
       * returns: list of passing or failing threads (no heterogeneous lists)
       */
      function validateExpr(expr, thread) {
        if (typeof expr === "string") {
          // Inclusion
          var included = index.tripleExprs[expr];
          return validateExpr(included, thread);
        }

        var constraintNo = constraintList.indexOf(expr);
        var min = "min" in expr ? expr.min : 1;
        var max = "max" in expr ? expr.max === UNBOUNDED ? Infinity : expr.max : 1;

        function validateRept(type, val) {
          var repeated = 0,
              errOut = false;
          var newThreads = [thread];
          var minmax = {};

          if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
            minmax.min = expr.min;
            minmax.max = expr.max;
          }

          if ("semActs" in expr) minmax.semActs = expr.semActs;
          if ("annotations" in expr) minmax.annotations = expr.annotations;

          for (; repeated < max && !errOut; ++repeated) {
            var inner = [];

            for (var t = 0; t < newThreads.length; ++t) {
              var newt = newThreads[t];
              var sub = val(newt);

              if (sub.length > 0 && sub[0].errors.length === 0) {
                sub.forEach(function (newThread) {
                  var solutions = "expression" in newt ? newt.expression.solutions : [];
                  if ("solution" in newThread) solutions = solutions.concat(newThread.solution);
                  delete newThread.solution;
                  newThread.expression = extend({
                    type: type,
                    solutions: solutions
                  }, minmax);
                });
              }

              if (sub.length === 0
              /* min:0 */
              || sub[0].errors.length > 0) return repeated < min ? sub : newThreads;else inner = inner.concat(sub); // newThreads.expressions.push(sub);
            }

            newThreads = inner;
          }

          if (newThreads.length > 0 && newThreads[0].errors.length === 0 && "semActs" in expr) {
            var passes = [];
            var failures = [];
            newThreads.forEach(function (newThread) {
              if (semActHandler.dispatchAll(expr.semActs, "???", newThread)) {
                passes.push(newThread);
              } else {
                newThread.errors.push({
                  type: "SemActFailure",
                  errors: [{
                    type: "UntrackedSemActFailure"
                  }]
                });
                failures.push(newThread);
              }
            });
            newThreads = passes.length > 0 ? passes : failures;
          }

          return newThreads;
        }

        if (expr.type === "TripleConstraint") {
          var negated = "negated" in expr && expr.negated || max === 0;
          if (negated) min = max = Infinity;
          if (thread.avail[constraintNo] === undefined) thread.avail[constraintNo] = constraintToTripleMapping[constraintNo].slice();
          var minmax = {};

          if ("min" in expr && expr.min !== 1 || "max" in expr && expr.max !== 1) {
            minmax.min = expr.min;
            minmax.max = expr.max;
          }

          if ("semActs" in expr) minmax.semActs = expr.semActs;
          if ("annotations" in expr) minmax.annotations = expr.annotations;
          var taken = thread.avail[constraintNo].splice(0, min);
          var passed = negated ? taken.length === 0 : taken.length >= min;
          var ret = [];
          var matched = thread.matched;

          if (passed) {
            do {
              ret.push({
                avail: thread.avail.map(function (a) {
                  // copy parent thread's avail vector
                  return a.slice();
                }),
                // was: extend({}, thread.avail)
                errors: thread.errors.slice(),
                matched: matched.concat({
                  tNos: taken.slice()
                }),
                expression: extend({
                  type: "TripleConstraintSolutions",
                  predicate: expr.predicate,
                  solutions: taken.map(function (tripleNo) {
                    return {
                      type: "halfTestedTriple",
                      tripleNo: tripleNo,
                      constraintNo: constraintNo
                    };
                  }) // map(triple => {
                  //   var t = neighborhood[triple];
                  //   return {
                  //     type: "TestedTriple", subject: t.subject, predicate: t.predicate, object: t.object
                  //   }
                  // })

                }, "valueExpr" in expr ? {
                  valueExpr: expr.valueExpr
                } : {}, "productionLabel" in expr ? {
                  productionLabel: expr.productionLabel
                } : {}, minmax)
              });
            } while (function () {
              if (thread.avail[constraintNo].length > 0 && taken.length < max) {
                taken.push(thread.avail[constraintNo].shift());
                return true;
              } else {
                return false;
              }
            }());
          } else {
            var valueExpr = null;

            if (typeof expr.valueExpr === "string") {
              // ShapeRef
              valueExpr = expr.valueExpr;
              if (RdfTerm.isBlank(valueExpr)) valueExpr = index.shapeExprs[valueExpr];
            } else if (expr.valueExpr) {
              valueExpr = extend({}, expr.valueExpr);
            }

            ret.push({
              avail: thread.avail,
              errors: thread.errors.concat([extend({
                type: negated ? "NegatedProperty" : "MissingProperty",
                property: expr.predicate
              }, valueExpr ? {
                valueExpr: valueExpr
              } : {})]),
              matched: matched
            });
          }

          return ret;
        } else if (expr.type === "OneOf") {
          return validateRept("OneOfSolutions", function (th) {
            var accept = null;
            var matched = [];
            var failed = [];
            expr.expressions.forEach(function (nested) {
              var thcopy = {
                avail: th.avail.map(function (a) {
                  return a.slice();
                }),
                errors: th.errors,
                matched: th.matched //.slice() ever needed??

              };
              var sub = validateExpr(nested, thcopy);

              if (sub[0].errors.length === 0) {
                matched = matched.concat(sub);
                sub.forEach(function (newThread) {
                  var expressions = "solution" in thcopy ? thcopy.solution.expressions : [];
                  if ("expression" in newThread) // undefined for no matches on min card:0
                    expressions = expressions.concat([newThread.expression]);
                  delete newThread.expression;
                  newThread.solution = {
                    type: "OneOfSolution",
                    expressions: expressions
                  };
                });
              } else failed = failed.concat(sub);
            });
            return matched.length > 0 ? matched : failed;
          });
        } else if (expr.type === "EachOf") {
          return validateRept("EachOfSolutions", function (th) {
            // Iterate through nested expressions, exprThreads starts as [th].
            return expr.expressions.reduce(function (exprThreads, nested) {
              // Iterate through current thread list composing nextThreads.
              // Consider e.g.
              // <S1> { <p1> . | <p2> .; <p3> . } / { <x> <p2> 2; <p3> 3 } (should pass)
              // <S1> { <p1> .; <p2> . }          / { <s1> <p1> 1 }        (should fail)
              return exprThreads.reduce(function (nextThreads, exprThread) {
                var sub = validateExpr(nested, exprThread); // Move newThread.expression into a hierarchical solution structure.

                sub.forEach(function (newThread) {
                  if (newThread.errors.length === 0) {
                    var expressions = "solution" in exprThread ? exprThread.solution.expressions : [];
                    if ("expression" in newThread) // undefined for no matches on min card:0
                      expressions = expressions.concat([newThread.expression]); // console.warn(threadMatched(newThread), " vs ", exprMatched(expressions));

                    delete newThread.expression;
                    newThread.solution = {
                      type: "EachOfSolution",
                      expressions: expressions // exprThread.expression + newThread.expression

                    };
                  }
                });
                return nextThreads.concat(sub);
              }, []);
            }, [th]);
          });
        }

        runtimeError("unexpected expr type: " + expr.type);
      }

      var startingThread = {
        avail: [],
        // triples remaining by constraint number
        matched: [],
        // triples matched in this thread
        errors: [] // errors encounted

      };
      if (!outerExpression) return {}; // vapid match if no expression

      var ret = validateExpr(outerExpression, startingThread); // console.log(JSON.stringify(ret));
      // note: don't return if ret.length === 1 because it might fail the unmatchedTriples test.

      var longerChosen = ret.reduce(function (ret, elt) {
        if (elt.errors.length > 0) return ret; // early return

        var unmatchedTriples = {}; // Collect triples assigned to some constraint.

        Object.keys(tripleToConstraintMapping).forEach(function (k) {
          if (tripleToConstraintMapping[k] !== undefined) unmatchedTriples[k] = tripleToConstraintMapping[k];
        }); // Removed triples matched in this thread.

        elt.matched.forEach(function (m) {
          m.tNos.forEach(function (t) {
            delete unmatchedTriples[t];
          });
        }); // Remaining triples are unaccounted for.

        Object.keys(unmatchedTriples).forEach(function (t) {
          elt.errors.push({
            type: "ExcessTripleViolation",
            triple: neighborhood[t],
            constraint: constraintList[unmatchedTriples[t]]
          });
        });
        return ret !== null ? ret : // keep first solution
        // Accept thread with no unmatched triples.
        Object.keys(unmatchedTriples).length > 0 ? null : elt;
      }, null);
      return longerChosen !== null ? finish(longerChosen.expression, constraintList, neighborhood, recurse, direct, semActHandler, checkValueExpr) : ret.length > 1 ? {
        type: "PossibleErrors",
        errors: ret.reduce(function (all, e) {
          return all.concat([e.errors]);
        }, [])
      } : ret[0];
    }

    function finish(fromValidatePoint, constraintList, neighborhood, recurse, direct, semActHandler, checkValueExpr) {
      function _dive(solns) {
        function ldify(term) {
          if (term[0] !== "\"") return term;
          var ret = {
            value: RdfTerm.getLiteralValue(term)
          };
          var dt = RdfTerm.getLiteralType(term);
          if (dt && dt !== "http://www.w3.org/2001/XMLSchema#string" && dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString") ret.type = dt;
          var lang = RdfTerm.getLiteralLanguage(term);
          if (lang) ret.language = lang;
          return ret;
        }

        if (solns.type === "OneOfSolutions" || solns.type === "EachOfSolutions") {
          solns.solutions.forEach(function (s) {
            s.expressions.forEach(function (e) {
              _dive(e);
            });
          });
        } else if (solns.type === "TripleConstraintSolutions") {
          solns.solutions = solns.solutions.map(function (x) {
            if (x.type === "TestedTriple") // already done
              return x; // c.f. validation/3circularRef1_pass-open

            var t = neighborhood[x.tripleNo];
            var expr = constraintList[x.constraintNo];
            var ret = {
              type: "TestedTriple",
              subject: t.subject,
              predicate: t.predicate,
              object: ldify(t.object)
            };

            function diver(focus, shapeLabel, dive) {
              var sub = dive(focus, shapeLabel);

              if ("errors" in sub) {
                // console.dir(sub);
                var err = {
                  type: "ReferenceError",
                  focus: focus,
                  shape: shapeLabel
                };
                if (typeof shapeLabel === "string" && RdfTerm.isBlank(shapeLabel)) err.referencedShape = shape;
                err.errors = sub;
                return [err];
              }

              if (("solution" in sub || "solutions" in sub) && Object.keys(sub.solution || sub.solutions).length !== 0 || sub.type === "Recursion") ret.referenced = sub; // !!! needs to aggregate errors and solutions

              return [];
            }

            function diveRecurse(focus, shapeLabel) {
              return diver(focus, shapeLabel, recurse);
            }

            function diveDirect(focus, shapeLabel) {
              return diver(focus, shapeLabel, direct);
            }

            var subErrors = "valueExpr" in expr ? checkValueExpr(expr.inverse ? t.subject : t.object, expr.valueExpr, diveRecurse, diveDirect) : [];
            if (subErrors.length === 0 && "semActs" in expr && !semActHandler.dispatchAll(expr.semActs, t, ret)) subErrors.push({
              type: "SemActFailure",
              errors: [{
                type: "UntrackedSemActFailure"
              }]
            }); // some semAct aborted

            if (subErrors.length > 0) {
              fromValidatePoint.errors = fromValidatePoint.errors || [];
              fromValidatePoint.errors = fromValidatePoint.errors.concat(subErrors);
            }

            return ret;
          });
        } else {
          throw Error("unexpected expr type in " + JSON.stringify(solns));
        }
      }

      if (Object.keys(fromValidatePoint).length > 0) // guard against {}
        _dive(fromValidatePoint);
      if ("semActs" in shape) fromValidatePoint.semActs = shape.semActs;
      return fromValidatePoint;
    }
  }

  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  }

  return {
    name: "threaded-val-nerr",
    description: "emulation of regular expression engine with error permutations",
    compile: vpEngine
  };
}();

if (true) module.exports = ThreadedValNErr;

/***/ }),

/***/ "../shex.js/packages/shex-core/shex-core.js":
/*!**************************************************!*\
  !*** ../shex.js/packages/shex-core/shex-core.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ShExCore = {
  RdfTerm: __webpack_require__(/*! ./lib/RdfTerm */ "../shex.js/packages/shex-core/lib/RdfTerm.js"),
  Util: __webpack_require__(/*! ./lib/ShExUtil */ "../shex.js/packages/shex-core/lib/ShExUtil.js"),
  Validator: __webpack_require__(/*! ./lib/ShExValidator */ "../shex.js/packages/shex-core/lib/ShExValidator.js"),
  Writer: __webpack_require__(/*! ./lib/ShExWriter */ "../shex.js/packages/shex-core/lib/ShExWriter.js"),
  'nfax-val-1err': __webpack_require__(/*! ./lib/regex/nfax-val-1err */ "../shex.js/packages/shex-core/lib/regex/nfax-val-1err.js"),
  'threaded-val-nerr': __webpack_require__(/*! ./lib/regex/threaded-val-nerr */ "../shex.js/packages/shex-core/lib/regex/threaded-val-nerr.js")
};
if (true) module.exports = ShExCore;

/***/ }),

/***/ "../shex.js/packages/shex-parser/lib/ShExJison.js":
/*!********************************************************!*\
  !*** ../shex.js/packages/shex-parser/lib/ShExJison.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, module) {function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* parser generated by jison 0.4.18 */

/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ShExJison = function () {
  var o = function o(k, v, _o, l) {
    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {
      ;
    }

    return _o;
  },
      $V0 = [7, 18, 19, 20, 21, 23, 26, 189, 211, 212],
      $V1 = [1, 25],
      $V2 = [1, 29],
      $V3 = [1, 24],
      $V4 = [1, 28],
      $V5 = [1, 27],
      $V6 = [2, 12],
      $V7 = [2, 13],
      $V8 = [2, 14],
      $V9 = [7, 18, 19, 20, 21, 23, 26, 211, 212],
      $Va = [1, 35],
      $Vb = [1, 38],
      $Vc = [1, 37],
      $Vd = [2, 18],
      $Ve = [2, 19],
      $Vf = [19, 21, 65, 67, 81, 92, 93, 94, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 115, 121, 123, 157, 185, 211, 215],
      $Vg = [2, 57],
      $Vh = [1, 47],
      $Vi = [1, 48],
      $Vj = [1, 49],
      $Vk = [19, 21, 35, 39, 65, 67, 75, 76, 77, 81, 92, 93, 94, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 115, 121, 123, 157, 185, 211, 215],
      $Vl = [2, 234],
      $Vm = [2, 235],
      $Vn = [1, 51],
      $Vo = [1, 54],
      $Vp = [1, 53],
      $Vq = [2, 256],
      $Vr = [2, 257],
      $Vs = [2, 260],
      $Vt = [2, 258],
      $Vu = [2, 259],
      $Vv = [2, 15],
      $Vw = [2, 17],
      $Vx = [19, 21, 65, 67, 75, 76, 77, 81, 92, 93, 94, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 115, 121, 123, 157, 185, 211, 215],
      $Vy = [1, 72],
      $Vz = [2, 26],
      $VA = [2, 27],
      $VB = [2, 28],
      $VC = [115, 121, 123, 185, 215],
      $VD = [2, 135],
      $VE = [1, 98],
      $VF = [1, 106],
      $VG = [1, 84],
      $VH = [1, 89],
      $VI = [1, 90],
      $VJ = [1, 91],
      $VK = [1, 97],
      $VL = [1, 102],
      $VM = [1, 103],
      $VN = [1, 104],
      $VO = [1, 107],
      $VP = [1, 108],
      $VQ = [1, 109],
      $VR = [1, 110],
      $VS = [1, 111],
      $VT = [1, 112],
      $VU = [1, 94],
      $VV = [1, 105],
      $VW = [2, 58],
      $VX = [1, 114],
      $VY = [1, 115],
      $VZ = [1, 116],
      $V_ = [1, 122],
      $V$ = [1, 123],
      $V01 = [47, 49],
      $V11 = [2, 87],
      $V21 = [2, 88],
      $V31 = [189, 191],
      $V41 = [1, 138],
      $V51 = [1, 141],
      $V61 = [1, 140],
      $V71 = [2, 16],
      $V81 = [7, 18, 19, 20, 21, 23, 26, 47, 211, 212],
      $V91 = [2, 43],
      $Va1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 211, 212],
      $Vb1 = [2, 50],
      $Vc1 = [2, 32],
      $Vd1 = [2, 65],
      $Ve1 = [2, 70],
      $Vf1 = [2, 67],
      $Vg1 = [1, 175],
      $Vh1 = [1, 176],
      $Vi1 = [1, 177],
      $Vj1 = [1, 180],
      $Vk1 = [1, 183],
      $Vl1 = [2, 73],
      $Vm1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 75, 76, 77, 115, 121, 123, 185, 186, 189, 211, 212, 215],
      $Vn1 = [2, 91],
      $Vo1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 186, 189, 211, 212],
      $Vp1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 92, 93, 94, 97, 98, 99, 100, 186, 189, 211, 212],
      $Vq1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 75, 76, 77, 97, 98, 99, 100, 115, 121, 123, 185, 186, 189, 211, 212, 215],
      $Vr1 = [2, 104],
      $Vs1 = [2, 103],
      $Vt1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 186, 189, 211, 212],
      $Vu1 = [2, 98],
      $Vv1 = [2, 97],
      $Vw1 = [1, 198],
      $Vx1 = [1, 200],
      $Vy1 = [1, 202],
      $Vz1 = [1, 201],
      $VA1 = [2, 108],
      $VB1 = [2, 109],
      $VC1 = [2, 110],
      $VD1 = [2, 106],
      $VE1 = [2, 233],
      $VF1 = [19, 21, 67, 77, 96, 104, 105, 159, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $VG1 = [2, 179],
      $VH1 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 108, 109, 110, 111, 112, 113, 186, 189, 211, 212],
      $VI1 = [2, 100],
      $VJ1 = [2, 114],
      $VK1 = [1, 210],
      $VL1 = [1, 211],
      $VM1 = [1, 212],
      $VN1 = [1, 213],
      $VO1 = [96, 104, 105, 202, 203, 204, 205],
      $VP1 = [2, 31],
      $VQ1 = [2, 35],
      $VR1 = [2, 38],
      $VS1 = [2, 41],
      $VT1 = [2, 89],
      $VU1 = [2, 225],
      $VV1 = [2, 226],
      $VW1 = [2, 227],
      $VX1 = [1, 261],
      $VY1 = [1, 266],
      $VZ1 = [1, 247],
      $V_1 = [1, 252],
      $V$1 = [1, 253],
      $V02 = [1, 254],
      $V12 = [1, 260],
      $V22 = [1, 257],
      $V32 = [1, 265],
      $V42 = [1, 268],
      $V52 = [1, 269],
      $V62 = [1, 270],
      $V72 = [1, 276],
      $V82 = [1, 277],
      $V92 = [2, 20],
      $Va2 = [2, 49],
      $Vb2 = [2, 56],
      $Vc2 = [2, 61],
      $Vd2 = [2, 64],
      $Ve2 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 92, 93, 94, 97, 98, 99, 100, 211, 212],
      $Vf2 = [2, 83],
      $Vg2 = [2, 84],
      $Vh2 = [2, 29],
      $Vi2 = [2, 33],
      $Vj2 = [2, 69],
      $Vk2 = [2, 66],
      $Vl2 = [2, 71],
      $Vm2 = [2, 68],
      $Vn2 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 97, 98, 99, 100, 186, 189, 211, 212],
      $Vo2 = [1, 322],
      $Vp2 = [1, 330],
      $Vq2 = [1, 331],
      $Vr2 = [1, 332],
      $Vs2 = [1, 338],
      $Vt2 = [1, 339],
      $Vu2 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 75, 76, 77, 115, 121, 123, 185, 189, 211, 212, 215],
      $Vv2 = [2, 223],
      $Vw2 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 189, 211, 212],
      $Vx2 = [1, 347],
      $Vy2 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 92, 93, 94, 97, 98, 99, 100, 189, 211, 212],
      $Vz2 = [2, 102],
      $VA2 = [2, 107],
      $VB2 = [2, 94],
      $VC2 = [1, 357],
      $VD2 = [2, 95],
      $VE2 = [2, 96],
      $VF2 = [2, 101],
      $VG2 = [19, 21, 65, 156, 195, 211],
      $VH2 = [2, 163],
      $VI2 = [2, 137],
      $VJ2 = [1, 372],
      $VK2 = [1, 371],
      $VL2 = [1, 377],
      $VM2 = [1, 381],
      $VN2 = [1, 380],
      $VO2 = [1, 379],
      $VP2 = [1, 386],
      $VQ2 = [1, 389],
      $VR2 = [1, 385],
      $VS2 = [1, 388],
      $VT2 = [19, 21, 211, 212],
      $VU2 = [1, 400],
      $VV2 = [1, 406],
      $VW2 = [1, 395],
      $VX2 = [1, 399],
      $VY2 = [1, 409],
      $VZ2 = [1, 410],
      $V_2 = [1, 411],
      $V$2 = [1, 398],
      $V03 = [1, 412],
      $V13 = [1, 413],
      $V23 = [1, 418],
      $V33 = [1, 419],
      $V43 = [1, 420],
      $V53 = [1, 421],
      $V63 = [1, 414],
      $V73 = [1, 415],
      $V83 = [1, 416],
      $V93 = [1, 417],
      $Va3 = [1, 405],
      $Vb3 = [2, 113],
      $Vc3 = [2, 118],
      $Vd3 = [2, 120],
      $Ve3 = [2, 121],
      $Vf3 = [2, 122],
      $Vg3 = [2, 248],
      $Vh3 = [2, 249],
      $Vi3 = [2, 250],
      $Vj3 = [2, 251],
      $Vk3 = [2, 119],
      $Vl3 = [2, 30],
      $Vm3 = [2, 39],
      $Vn3 = [2, 36],
      $Vo3 = [2, 42],
      $Vp3 = [2, 37],
      $Vq3 = [1, 453],
      $Vr3 = [2, 40],
      $Vs3 = [1, 489],
      $Vt3 = [1, 522],
      $Vu3 = [1, 523],
      $Vv3 = [1, 524],
      $Vw3 = [1, 527],
      $Vx3 = [2, 44],
      $Vy3 = [2, 51],
      $Vz3 = [2, 60],
      $VA3 = [2, 62],
      $VB3 = [2, 72],
      $VC3 = [47, 49, 66],
      $VD3 = [1, 587],
      $VE3 = [47, 49, 66, 75, 76, 77, 115, 121, 123, 185, 186, 189, 215],
      $VF3 = [47, 49, 66, 186, 189],
      $VG3 = [47, 49, 66, 92, 93, 94, 97, 98, 99, 100, 186, 189],
      $VH3 = [47, 49, 66, 75, 76, 77, 97, 98, 99, 100, 115, 121, 123, 185, 186, 189, 215],
      $VI3 = [47, 49, 66, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 186, 189],
      $VJ3 = [47, 49, 66, 108, 109, 110, 111, 112, 113, 186, 189],
      $VK3 = [47, 66],
      $VL3 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 75, 76, 77, 115, 121, 123, 185, 211, 212, 215],
      $VM3 = [2, 93],
      $VN3 = [2, 92],
      $VO3 = [2, 222],
      $VP3 = [1, 629],
      $VQ3 = [1, 632],
      $VR3 = [1, 628],
      $VS3 = [1, 631],
      $VT3 = [2, 90],
      $VU3 = [2, 130],
      $VV3 = [2, 105],
      $VW3 = [2, 99],
      $VX3 = [2, 111],
      $VY3 = [2, 112],
      $VZ3 = [2, 142],
      $V_3 = [2, 143],
      $V$3 = [1, 649],
      $V04 = [2, 144],
      $V14 = [117, 131],
      $V24 = [2, 149],
      $V34 = [2, 150],
      $V44 = [2, 152],
      $V54 = [1, 652],
      $V64 = [1, 653],
      $V74 = [19, 21, 195, 211],
      $V84 = [2, 171],
      $V94 = [1, 661],
      $Va4 = [117, 131, 136, 137],
      $Vb4 = [2, 161],
      $Vc4 = [19, 21, 115, 121, 123, 185, 211, 212, 215],
      $Vd4 = [19, 21, 115, 121, 123, 185, 195, 211, 215],
      $Ve4 = [2, 231],
      $Vf4 = [2, 232],
      $Vg4 = [2, 178],
      $Vh4 = [1, 696],
      $Vi4 = [19, 21, 67, 77, 96, 104, 105, 159, 174, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $Vj4 = [2, 228],
      $Vk4 = [2, 229],
      $Vl4 = [2, 230],
      $Vm4 = [2, 241],
      $Vn4 = [2, 244],
      $Vo4 = [2, 238],
      $Vp4 = [2, 239],
      $Vq4 = [2, 240],
      $Vr4 = [2, 246],
      $Vs4 = [2, 247],
      $Vt4 = [2, 252],
      $Vu4 = [2, 253],
      $Vv4 = [2, 254],
      $Vw4 = [2, 255],
      $Vx4 = [19, 21, 67, 77, 96, 104, 105, 107, 159, 174, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $Vy4 = [1, 728],
      $Vz4 = [1, 775],
      $VA4 = [1, 830],
      $VB4 = [1, 840],
      $VC4 = [1, 876],
      $VD4 = [1, 912],
      $VE4 = [2, 63],
      $VF4 = [47, 49, 66, 97, 98, 99, 100, 186, 189],
      $VG4 = [47, 49, 66, 75, 76, 77, 115, 121, 123, 185, 189, 215],
      $VH4 = [47, 49, 66, 189],
      $VI4 = [1, 934],
      $VJ4 = [47, 49, 66, 92, 93, 94, 97, 98, 99, 100, 189],
      $VK4 = [1, 944],
      $VL4 = [1, 981],
      $VM4 = [1, 1017],
      $VN4 = [2, 224],
      $VO4 = [1, 1028],
      $VP4 = [1, 1034],
      $VQ4 = [1, 1033],
      $VR4 = [19, 21, 96, 104, 105, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $VS4 = [1, 1054],
      $VT4 = [1, 1060],
      $VU4 = [1, 1059],
      $VV4 = [1, 1080],
      $VW4 = [1, 1086],
      $VX4 = [1, 1085],
      $VY4 = [2, 131],
      $VZ4 = [2, 145],
      $V_4 = [2, 147],
      $V$4 = [2, 151],
      $V05 = [2, 153],
      $V15 = [2, 154],
      $V25 = [2, 158],
      $V35 = [2, 160],
      $V45 = [2, 165],
      $V55 = [2, 166],
      $V65 = [1, 1112],
      $V75 = [1, 1115],
      $V85 = [1, 1111],
      $V95 = [1, 1114],
      $Va5 = [1, 1125],
      $Vb5 = [2, 218],
      $Vc5 = [2, 236],
      $Vd5 = [2, 237],
      $Ve5 = [1, 1127],
      $Vf5 = [1, 1129],
      $Vg5 = [1, 1131],
      $Vh5 = [19, 21, 67, 77, 96, 104, 105, 159, 175, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $Vi5 = [1, 1135],
      $Vj5 = [1, 1141],
      $Vk5 = [1, 1144],
      $Vl5 = [1, 1145],
      $Vm5 = [1, 1146],
      $Vn5 = [1, 1134],
      $Vo5 = [1, 1147],
      $Vp5 = [1, 1148],
      $Vq5 = [1, 1153],
      $Vr5 = [1, 1154],
      $Vs5 = [1, 1155],
      $Vt5 = [1, 1156],
      $Vu5 = [1, 1149],
      $Vv5 = [1, 1150],
      $Vw5 = [1, 1151],
      $Vx5 = [1, 1152],
      $Vy5 = [1, 1140],
      $Vz5 = [2, 242],
      $VA5 = [2, 245],
      $VB5 = [2, 123],
      $VC5 = [1, 1186],
      $VD5 = [1, 1192],
      $VE5 = [1, 1224],
      $VF5 = [1, 1230],
      $VG5 = [1, 1289],
      $VH5 = [1, 1336],
      $VI5 = [47, 49, 66, 75, 76, 77, 115, 121, 123, 185, 215],
      $VJ5 = [47, 49, 66, 92, 93, 94, 97, 98, 99, 100],
      $VK5 = [1, 1412],
      $VL5 = [1, 1459],
      $VM5 = [2, 219],
      $VN5 = [2, 220],
      $VO5 = [2, 221],
      $VP5 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 75, 76, 77, 107, 115, 121, 123, 185, 186, 189, 211, 212, 215],
      $VQ5 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 107, 186, 189, 211, 212],
      $VR5 = [7, 18, 19, 20, 21, 23, 26, 47, 49, 92, 93, 94, 97, 98, 99, 100, 107, 186, 189, 211, 212],
      $VS5 = [2, 148],
      $VT5 = [2, 146],
      $VU5 = [2, 155],
      $VV5 = [2, 159],
      $VW5 = [2, 156],
      $VX5 = [2, 157],
      $VY5 = [19, 21, 39, 65, 67, 75, 76, 77, 81, 92, 93, 94, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 115, 121, 123, 157, 185, 211, 215],
      $VZ5 = [1, 1519],
      $V_5 = [66, 131],
      $V$5 = [1, 1522],
      $V06 = [1, 1523],
      $V16 = [66, 131, 136, 137],
      $V26 = [2, 201],
      $V36 = [1, 1539],
      $V46 = [19, 21, 67, 77, 96, 104, 105, 159, 174, 175, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $V56 = [19, 21, 67, 77, 96, 104, 105, 107, 159, 174, 175, 181, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211],
      $V66 = [2, 243],
      $V76 = [1, 1577],
      $V86 = [1, 1643],
      $V96 = [1, 1649],
      $Va6 = [1, 1648],
      $Vb6 = [1, 1669],
      $Vc6 = [1, 1675],
      $Vd6 = [1, 1674],
      $Ve6 = [1, 1695],
      $Vf6 = [1, 1701],
      $Vg6 = [1, 1700],
      $Vh6 = [1, 1742],
      $Vi6 = [1, 1748],
      $Vj6 = [1, 1780],
      $Vk6 = [1, 1786],
      $Vl6 = [1, 1801],
      $Vm6 = [1, 1807],
      $Vn6 = [1, 1806],
      $Vo6 = [1, 1827],
      $Vp6 = [1, 1833],
      $Vq6 = [1, 1832],
      $Vr6 = [1, 1853],
      $Vs6 = [1, 1859],
      $Vt6 = [1, 1858],
      $Vu6 = [1, 1900],
      $Vv6 = [1, 1906],
      $Vw6 = [1, 1938],
      $Vx6 = [1, 1944],
      $Vy6 = [117, 131, 136, 137, 186, 189],
      $Vz6 = [2, 168],
      $VA6 = [1, 1962],
      $VB6 = [1, 1963],
      $VC6 = [1, 1964],
      $VD6 = [1, 1965],
      $VE6 = [117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VF6 = [2, 34],
      $VG6 = [47, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VH6 = [2, 47],
      $VI6 = [47, 49, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VJ6 = [2, 54],
      $VK6 = [1, 1994],
      $VL6 = [1, 2031],
      $VM6 = [1, 2064],
      $VN6 = [1, 2070],
      $VO6 = [1, 2069],
      $VP6 = [1, 2090],
      $VQ6 = [1, 2096],
      $VR6 = [1, 2095],
      $VS6 = [1, 2117],
      $VT6 = [1, 2123],
      $VU6 = [1, 2122],
      $VV6 = [1, 2144],
      $VW6 = [1, 2150],
      $VX6 = [1, 2149],
      $VY6 = [1, 2170],
      $VZ6 = [1, 2176],
      $V_6 = [1, 2175],
      $V$6 = [1, 2197],
      $V07 = [1, 2203],
      $V17 = [1, 2202],
      $V27 = [1, 2272],
      $V37 = [47, 49, 66, 75, 76, 77, 107, 115, 121, 123, 185, 186, 189, 215],
      $V47 = [47, 49, 66, 107, 186, 189],
      $V57 = [47, 49, 66, 92, 93, 94, 97, 98, 99, 100, 107, 186, 189],
      $V67 = [1, 2386],
      $V77 = [2, 169],
      $V87 = [2, 173],
      $V97 = [2, 174],
      $Va7 = [2, 175],
      $Vb7 = [2, 176],
      $Vc7 = [2, 45],
      $Vd7 = [2, 52],
      $Ve7 = [2, 59],
      $Vf7 = [2, 79],
      $Vg7 = [2, 75],
      $Vh7 = [2, 81],
      $Vi7 = [1, 2469],
      $Vj7 = [2, 78],
      $Vk7 = [47, 49, 75, 76, 77, 97, 98, 99, 100, 115, 117, 121, 123, 131, 136, 137, 152, 153, 154, 155, 185, 186, 189, 215],
      $Vl7 = [47, 49, 75, 76, 77, 115, 117, 121, 123, 131, 136, 137, 152, 153, 154, 155, 185, 186, 189, 215],
      $Vm7 = [47, 49, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vn7 = [47, 49, 92, 93, 94, 97, 98, 99, 100, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vo7 = [2, 85],
      $Vp7 = [2, 86],
      $Vq7 = [47, 49, 108, 109, 110, 111, 112, 113, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vr7 = [1, 2523],
      $Vs7 = [1, 2529],
      $Vt7 = [1, 2612],
      $Vu7 = [1, 2645],
      $Vv7 = [1, 2651],
      $Vw7 = [1, 2650],
      $Vx7 = [1, 2671],
      $Vy7 = [1, 2677],
      $Vz7 = [1, 2676],
      $VA7 = [1, 2698],
      $VB7 = [1, 2704],
      $VC7 = [1, 2703],
      $VD7 = [1, 2725],
      $VE7 = [1, 2731],
      $VF7 = [1, 2730],
      $VG7 = [1, 2751],
      $VH7 = [1, 2757],
      $VI7 = [1, 2756],
      $VJ7 = [1, 2778],
      $VK7 = [1, 2784],
      $VL7 = [1, 2783],
      $VM7 = [1, 2825],
      $VN7 = [1, 2858],
      $VO7 = [1, 2864],
      $VP7 = [1, 2863],
      $VQ7 = [1, 2884],
      $VR7 = [1, 2890],
      $VS7 = [1, 2889],
      $VT7 = [1, 2911],
      $VU7 = [1, 2917],
      $VV7 = [1, 2916],
      $VW7 = [1, 2938],
      $VX7 = [1, 2944],
      $VY7 = [1, 2943],
      $VZ7 = [1, 2964],
      $V_7 = [1, 2970],
      $V$7 = [1, 2969],
      $V08 = [1, 2991],
      $V18 = [1, 2997],
      $V28 = [1, 2996],
      $V38 = [117, 131, 136, 137, 189],
      $V48 = [1, 3016],
      $V58 = [2, 48],
      $V68 = [2, 55],
      $V78 = [2, 74],
      $V88 = [2, 80],
      $V98 = [2, 76],
      $Va8 = [2, 82],
      $Vb8 = [47, 49, 97, 98, 99, 100, 117, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vc8 = [1, 3040],
      $Vd8 = [66, 131, 136, 137, 186, 189],
      $Ve8 = [1, 3049],
      $Vf8 = [1, 3050],
      $Vg8 = [1, 3051],
      $Vh8 = [1, 3052],
      $Vi8 = [66, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vj8 = [47, 66, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vk8 = [47, 49, 66, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $Vl8 = [1, 3081],
      $Vm8 = [1, 3150],
      $Vn8 = [1, 3156],
      $Vo8 = [1, 3236],
      $Vp8 = [1, 3242],
      $Vq8 = [2, 170],
      $Vr8 = [2, 46],
      $Vs8 = [1, 3330],
      $Vt8 = [2, 53],
      $Vu8 = [1, 3363],
      $Vv8 = [2, 77],
      $Vw8 = [2, 167],
      $Vx8 = [1, 3408],
      $Vy8 = [47, 49, 66, 75, 76, 77, 97, 98, 99, 100, 115, 121, 123, 131, 136, 137, 152, 153, 154, 155, 185, 186, 189, 215],
      $Vz8 = [47, 49, 66, 75, 76, 77, 115, 121, 123, 131, 136, 137, 152, 153, 154, 155, 185, 186, 189, 215],
      $VA8 = [47, 49, 66, 97, 98, 99, 100, 108, 109, 110, 111, 112, 113, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VB8 = [47, 49, 66, 92, 93, 94, 97, 98, 99, 100, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VC8 = [47, 49, 66, 108, 109, 110, 111, 112, 113, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VD8 = [1, 3439],
      $VE8 = [1, 3445],
      $VF8 = [1, 3444],
      $VG8 = [1, 3465],
      $VH8 = [1, 3471],
      $VI8 = [1, 3470],
      $VJ8 = [1, 3492],
      $VK8 = [1, 3498],
      $VL8 = [1, 3497],
      $VM8 = [1, 3596],
      $VN8 = [1, 3602],
      $VO8 = [1, 3601],
      $VP8 = [1, 3637],
      $VQ8 = [1, 3679],
      $VR8 = [66, 131, 136, 137, 189],
      $VS8 = [1, 3709],
      $VT8 = [47, 49, 66, 97, 98, 99, 100, 131, 136, 137, 152, 153, 154, 155, 186, 189],
      $VU8 = [1, 3733],
      $VV8 = [1, 3769],
      $VW8 = [1, 3775],
      $VX8 = [1, 3774],
      $VY8 = [1, 3795],
      $VZ8 = [1, 3801],
      $V_8 = [1, 3800],
      $V$8 = [1, 3822],
      $V09 = [1, 3828],
      $V19 = [1, 3827],
      $V29 = [1, 3849],
      $V39 = [1, 3855],
      $V49 = [1, 3854],
      $V59 = [1, 3875],
      $V69 = [1, 3881],
      $V79 = [1, 3880],
      $V89 = [1, 3902],
      $V99 = [1, 3908],
      $Va9 = [1, 3907],
      $Vb9 = [107, 117, 131, 136, 137, 186, 189],
      $Vc9 = [1, 3950],
      $Vd9 = [1, 3974],
      $Ve9 = [1, 4016],
      $Vf9 = [1, 4049],
      $Vg9 = [1, 4154],
      $Vh9 = [1, 4197],
      $Vi9 = [1, 4203],
      $Vj9 = [1, 4202],
      $Vk9 = [1, 4238],
      $Vl9 = [1, 4280],
      $Vm9 = [1, 4336],
      $Vn9 = [66, 107, 131, 136, 137, 186, 189],
      $Vo9 = [1, 4391],
      $Vp9 = [1, 4415],
      $Vq9 = [1, 4445],
      $Vr9 = [1, 4491],
      $Vs9 = [1, 4563],
      $Vt9 = [1, 4612];

  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      "error": 2,
      "shexDoc": 3,
      "initParser": 4,
      "Qdirective_E_Star": 5,
      "Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt": 6,
      "EOF": 7,
      "directive": 8,
      "O_QnotStartAction_E_Or_QstartActions_E_C": 9,
      "notStartAction": 10,
      "startActions": 11,
      "Qstatement_E_Star": 12,
      "statement": 13,
      "O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C": 14,
      "baseDecl": 15,
      "prefixDecl": 16,
      "importDecl": 17,
      "IT_BASE": 18,
      "IRIREF": 19,
      "IT_PREFIX": 20,
      "PNAME_NS": 21,
      "iri": 22,
      "IT_IMPORT": 23,
      "start": 24,
      "shapeExprDecl": 25,
      "IT_start": 26,
      "=": 27,
      "shapeAnd": 28,
      "Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star": 29,
      "QcodeDecl_E_Plus": 30,
      "codeDecl": 31,
      "shapeExprLabel": 32,
      "O_QshapeExpression_E_Or_QIT_EXTERNAL_E_C": 33,
      "shapeExpression": 34,
      "IT_EXTERNAL": 35,
      "QIT_NOT_E_Opt": 36,
      "shapeAtomNoRef": 37,
      "QshapeOr_E_Opt": 38,
      "IT_NOT": 39,
      "shapeRef": 40,
      "shapeOr": 41,
      "inlineShapeExpression": 42,
      "inlineShapeOr": 43,
      "Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus": 44,
      "Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus": 45,
      "O_QIT_OR_E_S_QshapeAnd_E_C": 46,
      "IT_OR": 47,
      "O_QIT_AND_E_S_QshapeNot_E_C": 48,
      "IT_AND": 49,
      "shapeNot": 50,
      "inlineShapeAnd": 51,
      "Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star": 52,
      "O_QIT_OR_E_S_QinlineShapeAnd_E_C": 53,
      "Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star": 54,
      "inlineShapeNot": 55,
      "Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star": 56,
      "O_QIT_AND_E_S_QinlineShapeNot_E_C": 57,
      "shapeAtom": 58,
      "inlineShapeAtom": 59,
      "nonLitNodeConstraint": 60,
      "QshapeOrRef_E_Opt": 61,
      "litNodeConstraint": 62,
      "shapeOrRef": 63,
      "QnonLitNodeConstraint_E_Opt": 64,
      "(": 65,
      ")": 66,
      ".": 67,
      "shapeDefinition": 68,
      "nonLitInlineNodeConstraint": 69,
      "QinlineShapeOrRef_E_Opt": 70,
      "litInlineNodeConstraint": 71,
      "inlineShapeOrRef": 72,
      "QnonLitInlineNodeConstraint_E_Opt": 73,
      "inlineShapeDefinition": 74,
      "ATPNAME_LN": 75,
      "ATPNAME_NS": 76,
      "@": 77,
      "Qannotation_E_Star": 78,
      "semanticActions": 79,
      "annotation": 80,
      "IT_LITERAL": 81,
      "QxsFacet_E_Star": 82,
      "datatype": 83,
      "valueSet": 84,
      "QnumericFacet_E_Plus": 85,
      "xsFacet": 86,
      "numericFacet": 87,
      "nonLiteralKind": 88,
      "QstringFacet_E_Star": 89,
      "QstringFacet_E_Plus": 90,
      "stringFacet": 91,
      "IT_IRI": 92,
      "IT_BNODE": 93,
      "IT_NONLITERAL": 94,
      "stringLength": 95,
      "INTEGER": 96,
      "REGEXP": 97,
      "IT_LENGTH": 98,
      "IT_MINLENGTH": 99,
      "IT_MAXLENGTH": 100,
      "numericRange": 101,
      "rawNumeric": 102,
      "numericLength": 103,
      "DECIMAL": 104,
      "DOUBLE": 105,
      "string": 106,
      "^^": 107,
      "IT_MININCLUSIVE": 108,
      "IT_MINEXCLUSIVE": 109,
      "IT_MAXINCLUSIVE": 110,
      "IT_MAXEXCLUSIVE": 111,
      "IT_TOTALDIGITS": 112,
      "IT_FRACTIONDIGITS": 113,
      "Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star": 114,
      "{": 115,
      "QtripleExpression_E_Opt": 116,
      "}": 117,
      "O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C": 118,
      "extension": 119,
      "extraPropertySet": 120,
      "IT_CLOSED": 121,
      "tripleExpression": 122,
      "IT_EXTRA": 123,
      "Qpredicate_E_Plus": 124,
      "predicate": 125,
      "oneOfTripleExpr": 126,
      "groupTripleExpr": 127,
      "multiElementOneOf": 128,
      "Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus": 129,
      "O_QGT_PIPE_E_S_QgroupTripleExpr_E_C": 130,
      "|": 131,
      "singleElementGroup": 132,
      "multiElementGroup": 133,
      "unaryTripleExpr": 134,
      "QGT_SEMI_E_Opt": 135,
      ",": 136,
      ";": 137,
      "Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus": 138,
      "O_QGT_SEMI_E_S_QunaryTripleExpr_E_C": 139,
      "Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt": 140,
      "O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C": 141,
      "include": 142,
      "O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C": 143,
      "$": 144,
      "tripleExprLabel": 145,
      "tripleConstraint": 146,
      "bracketedTripleExpr": 147,
      "Qcardinality_E_Opt": 148,
      "cardinality": 149,
      "QsenseFlags_E_Opt": 150,
      "senseFlags": 151,
      "*": 152,
      "+": 153,
      "?": 154,
      "REPEAT_RANGE": 155,
      "^": 156,
      "[": 157,
      "QvalueSetValue_E_Star": 158,
      "]": 159,
      "valueSetValue": 160,
      "iriRange": 161,
      "literalRange": 162,
      "languageRange": 163,
      "O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C": 164,
      "QiriExclusion_E_Plus": 165,
      "iriExclusion": 166,
      "QliteralExclusion_E_Plus": 167,
      "literalExclusion": 168,
      "QlanguageExclusion_E_Plus": 169,
      "languageExclusion": 170,
      "Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt": 171,
      "QiriExclusion_E_Star": 172,
      "O_QGT_TILDE_E_S_QiriExclusion_E_Star_C": 173,
      "~": 174,
      "-": 175,
      "QGT_TILDE_E_Opt": 176,
      "literal": 177,
      "Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt": 178,
      "QliteralExclusion_E_Star": 179,
      "O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C": 180,
      "LANGTAG": 181,
      "Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt": 182,
      "O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C": 183,
      "QlanguageExclusion_E_Star": 184,
      "&": 185,
      "//": 186,
      "O_Qiri_E_Or_Qliteral_E_C": 187,
      "QcodeDecl_E_Star": 188,
      "%": 189,
      "O_QCODE_E_Or_QGT_MODULO_E_C": 190,
      "CODE": 191,
      "rdfLiteral": 192,
      "numericLiteral": 193,
      "booleanLiteral": 194,
      "a": 195,
      "blankNode": 196,
      "langString": 197,
      "Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt": 198,
      "O_QGT_DTYPE_E_S_Qdatatype_E_C": 199,
      "IT_true": 200,
      "IT_false": 201,
      "STRING_LITERAL1": 202,
      "STRING_LITERAL_LONG1": 203,
      "STRING_LITERAL2": 204,
      "STRING_LITERAL_LONG2": 205,
      "LANG_STRING_LITERAL1": 206,
      "LANG_STRING_LITERAL_LONG1": 207,
      "LANG_STRING_LITERAL2": 208,
      "LANG_STRING_LITERAL_LONG2": 209,
      "prefixedName": 210,
      "PNAME_LN": 211,
      "BLANK_NODE_LABEL": 212,
      "O_QIT_EXTENDS_E_Or_QGT_AMP_E_C": 213,
      "QshapeExprLabel_E_Plus": 214,
      "IT_EXTENDS": 215,
      "$accept": 0,
      "$end": 1
    },
    terminals_: {
      2: "error",
      7: "EOF",
      18: "IT_BASE",
      19: "IRIREF",
      20: "IT_PREFIX",
      21: "PNAME_NS",
      23: "IT_IMPORT",
      26: "IT_start",
      27: "=",
      35: "IT_EXTERNAL",
      39: "IT_NOT",
      47: "IT_OR",
      49: "IT_AND",
      65: "(",
      66: ")",
      67: ".",
      75: "ATPNAME_LN",
      76: "ATPNAME_NS",
      77: "@",
      81: "IT_LITERAL",
      92: "IT_IRI",
      93: "IT_BNODE",
      94: "IT_NONLITERAL",
      96: "INTEGER",
      97: "REGEXP",
      98: "IT_LENGTH",
      99: "IT_MINLENGTH",
      100: "IT_MAXLENGTH",
      104: "DECIMAL",
      105: "DOUBLE",
      107: "^^",
      108: "IT_MININCLUSIVE",
      109: "IT_MINEXCLUSIVE",
      110: "IT_MAXINCLUSIVE",
      111: "IT_MAXEXCLUSIVE",
      112: "IT_TOTALDIGITS",
      113: "IT_FRACTIONDIGITS",
      115: "{",
      117: "}",
      121: "IT_CLOSED",
      123: "IT_EXTRA",
      131: "|",
      136: ",",
      137: ";",
      144: "$",
      152: "*",
      153: "+",
      154: "?",
      155: "REPEAT_RANGE",
      156: "^",
      157: "[",
      159: "]",
      174: "~",
      175: "-",
      181: "LANGTAG",
      185: "&",
      186: "//",
      189: "%",
      191: "CODE",
      195: "a",
      200: "IT_true",
      201: "IT_false",
      202: "STRING_LITERAL1",
      203: "STRING_LITERAL_LONG1",
      204: "STRING_LITERAL2",
      205: "STRING_LITERAL_LONG2",
      206: "LANG_STRING_LITERAL1",
      207: "LANG_STRING_LITERAL_LONG1",
      208: "LANG_STRING_LITERAL2",
      209: "LANG_STRING_LITERAL_LONG2",
      211: "PNAME_LN",
      212: "BLANK_NODE_LABEL",
      215: "IT_EXTENDS"
    },
    productions_: [0, [3, 4], [4, 0], [5, 0], [5, 2], [9, 1], [9, 1], [12, 0], [12, 2], [14, 2], [6, 0], [6, 1], [8, 1], [8, 1], [8, 1], [15, 2], [16, 3], [17, 2], [10, 1], [10, 1], [24, 4], [11, 1], [30, 1], [30, 2], [13, 1], [13, 1], [25, 2], [33, 1], [33, 1], [34, 3], [34, 3], [34, 2], [38, 0], [38, 1], [42, 1], [41, 1], [41, 2], [46, 2], [44, 1], [44, 2], [48, 2], [45, 1], [45, 2], [29, 0], [29, 2], [43, 2], [53, 2], [52, 0], [52, 2], [28, 2], [54, 0], [54, 2], [51, 2], [57, 2], [56, 0], [56, 2], [50, 2], [36, 0], [36, 1], [55, 2], [58, 2], [58, 1], [58, 2], [58, 3], [58, 1], [61, 0], [61, 1], [64, 0], [64, 1], [37, 2], [37, 1], [37, 2], [37, 3], [37, 1], [59, 2], [59, 1], [59, 2], [59, 3], [59, 1], [70, 0], [70, 1], [73, 0], [73, 1], [63, 1], [63, 1], [72, 1], [72, 1], [40, 1], [40, 1], [40, 2], [62, 3], [78, 0], [78, 2], [60, 3], [71, 2], [71, 2], [71, 2], [71, 1], [82, 0], [82, 2], [85, 1], [85, 2], [69, 2], [69, 1], [89, 0], [89, 2], [90, 1], [90, 2], [88, 1], [88, 1], [88, 1], [86, 1], [86, 1], [91, 2], [91, 1], [95, 1], [95, 1], [95, 1], [87, 2], [87, 2], [102, 1], [102, 1], [102, 1], [102, 3], [101, 1], [101, 1], [101, 1], [101, 1], [103, 1], [103, 1], [68, 3], [74, 4], [118, 1], [118, 1], [118, 1], [114, 0], [114, 2], [116, 0], [116, 1], [120, 2], [124, 1], [124, 2], [122, 1], [126, 1], [126, 1], [128, 2], [130, 2], [129, 1], [129, 2], [127, 1], [127, 1], [132, 2], [135, 0], [135, 1], [135, 1], [133, 3], [139, 2], [139, 2], [138, 1], [138, 2], [134, 2], [134, 1], [143, 2], [140, 0], [140, 1], [141, 1], [141, 1], [147, 6], [148, 0], [148, 1], [146, 6], [150, 0], [150, 1], [149, 1], [149, 1], [149, 1], [149, 1], [151, 1], [84, 3], [158, 0], [158, 2], [160, 1], [160, 1], [160, 1], [160, 2], [165, 1], [165, 2], [167, 1], [167, 2], [169, 1], [169, 2], [164, 1], [164, 1], [164, 1], [161, 2], [172, 0], [172, 2], [173, 2], [171, 0], [171, 1], [166, 3], [176, 0], [176, 1], [162, 2], [179, 0], [179, 2], [180, 2], [178, 0], [178, 1], [168, 3], [163, 2], [163, 2], [184, 0], [184, 2], [183, 2], [182, 0], [182, 1], [170, 3], [142, 2], [80, 3], [187, 1], [187, 1], [79, 1], [188, 0], [188, 2], [31, 3], [190, 1], [190, 1], [177, 1], [177, 1], [177, 1], [125, 1], [125, 1], [83, 1], [32, 1], [32, 1], [145, 1], [145, 1], [193, 1], [193, 1], [193, 1], [192, 1], [192, 2], [199, 2], [198, 0], [198, 1], [194, 1], [194, 1], [106, 1], [106, 1], [106, 1], [106, 1], [197, 1], [197, 1], [197, 1], [197, 1], [22, 1], [22, 1], [210, 1], [210, 1], [196, 1], [119, 2], [213, 1], [213, 1], [214, 1], [214, 2]],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate
    /* action[1] */
    , $$
    /* vstack */
    , _$
    /* lstack */
    ) {
      /* this == yyval */
      var $0 = $$.length - 1;

      switch (yystate) {
        case 1:
          var imports = Object.keys(Parser._imports).length ? {
            imports: Parser._imports
          } : {};
          var startObj = Parser.start ? {
            start: Parser.start
          } : {};
          var startActs = Parser.startActs ? {
            startActs: Parser.startActs
          } : {};
          var shapes = Parser.shapes ? {
            shapes: Object.values(Parser.shapes)
          } : {};
          var shexj = Object.assign({
            type: "Schema"
          }, imports, startActs, startObj, shapes);

          if (Parser.options.index) {
            if (Parser._base !== null) shexj._base = Parser._base;
            shexj._prefixes = Parser._prefixes;
            shexj._index = {
              shapeExprs: Parser.shapes || new Map(),
              tripleExprs: Parser.productions || new Map()
            };
            shexj._sourceMap = Parser._sourceMap;
          }

          return shexj;
          break;

        case 2:
          yy.parser.yy = {
            lexer: yy.lexer
          };
          break;

        case 15:
          // t: @@
          Parser._setBase(Parser._base === null || absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : _resolveIRI($$[$0].slice(1, -1)));

          break;

        case 16:
          // t: ShExParser-test.js/with pre-defined prefixes
          Parser._prefixes[$$[$0 - 1].slice(0, -1)] = $$[$0];
          break;

        case 17:
          // t: @@
          Parser._imports.push($$[$0]);

          break;

        case 20:
          if (Parser.start) error(new Error("Parse error: start already defined"), yy);
          Parser.start = shapeJunction("ShapeOr", $$[$0 - 1], $$[$0]); // t: startInline

          break;

        case 21:
          Parser.startActs = $$[$0]; // t: startCode1

          break;

        case 22:
          this.$ = [$$[$0]]; // t: startCode1;

          break;

        case 23:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: startCode3;

          break;

        case 26:
          // t: 1dot 1val1vsMinusiri3??
          addShape($$[$0 - 1], $$[$0], yy);
          break;

        case 27:
          this.$ = nonest($$[$0]);
          break;

        case 28:
          this.$ = {
            type: "ShapeExternal"
          };
          break;

        case 29:
          if ($$[$0 - 2]) $$[$0 - 1] = {
            type: "ShapeNot",
            "shapeExpr": nonest($$[$0 - 1])
          }; // t:@@

          if ($$[$0]) {
            // If there were disjuncts,
            //           shapeOr will have $$[$0].set needsAtom.
            //           Prepend $$[$0].needsAtom with $$[$0-1].
            //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
            $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
            delete $$[$0].needsAtom;
            this.$ = $$[$0];
          } else {
            this.$ = $$[$0 - 1];
          }

          break;

        case 30:
          $$[$0 - 1] = {
            type: "ShapeNot",
            "shapeExpr": nonest($$[$0 - 1])
          }; // !!! opt

          if ($$[$0]) {
            // If there were disjuncts,
            //           shapeOr will have $$[$0].set needsAtom.
            //           Prepend $$[$0].needsAtom with $$[$0-1].
            //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
            $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
            delete $$[$0].needsAtom;
            this.$ = $$[$0];
          } else {
            this.$ = $$[$0 - 1];
          }

          break;

        case 31:
          $$[$0].needsAtom.unshift(nonest($$[$0 - 1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };

          break;

        case 32:
        case 227:
        case 244:
          this.$ = null;
          break;

        case 33:
        case 37:
        case 40:
        case 46:
        case 53:
        case 184:
        case 243:
          this.$ = $$[$0];
          break;

        case 35:
          // returns a ShapeOr
          var disjuncts = $$[$0].map(nonest);
          this.$ = {
            type: "ShapeOr",
            shapeExprs: disjuncts,
            needsAtom: disjuncts
          }; // t: @@

          break;

        case 36:
          // returns a ShapeAnd
          // $$[$0-1] could have implicit conjuncts and explicit nested ANDs (will have .nested: true)
          $$[$0 - 1].filter(function (c) {
            return c.type === "ShapeAnd";
          }).length === $$[$0 - 1].length;
          var and = {
            type: "ShapeAnd",
            shapeExprs: $$[$0 - 1].reduce(function (acc, elt) {
              return acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt));
            }, [])
          };
          this.$ = $$[$0].length > 0 ? {
            type: "ShapeOr",
            shapeExprs: [and].concat($$[$0].map(nonest))
          } : and; // t: @@

          this.$.needsAtom = and.shapeExprs;
          break;

        case 38:
        case 41:
          this.$ = [$$[$0]];
          break;

        case 39:
        case 42:
        case 44:
        case 48:
        case 51:
        case 55:
          this.$ = $$[$0 - 1].concat($$[$0]);
          break;

        case 43:
        case 47:
        case 50:
        case 54:
          this.$ = [];
          break;

        case 45:
          this.$ = shapeJunction("ShapeOr", $$[$0 - 1], $$[$0]);
          break;

        case 49:
        case 52:
          this.$ = shapeJunction("ShapeAnd", $$[$0 - 1], $$[$0]); // t: @@;

          break;

        case 56:
          this.$ = $$[$0 - 1] ? {
            type: "ShapeNot",
            "shapeExpr": nonest($$[$0])
          }
          /* t:@@ */
          : $$[$0];
          break;

        case 57:
          this.$ = false;
          break;

        case 58:
          this.$ = true;
          break;

        case 59:
          this.$ = $$[$0 - 1] ? {
            type: "ShapeNot",
            "shapeExpr": nonest($$[$0])
          }
          /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */
          : $$[$0];
          break;

        case 60:
        case 69:
        case 74:
          this.$ = $$[$0] ? {
            type: "ShapeAnd",
            shapeExprs: [extend({
              type: "NodeConstraint"
            }, $$[$0 - 1]), $$[$0]]
          } : $$[$0 - 1];
          break;

        case 62:
          this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0 - 1], [$$[$0]])
          /* t: 1dotRef1 */
          : $$[$0 - 1]; // t:@@;

          break;

        case 63:
        case 72:
        case 77:
          this.$ = Object.assign($$[$0 - 1], {
            nested: true
          }); // t: 1val1vsMinusiri3;

          break;

        case 64:
        case 73:
        case 78:
          this.$ = EmptyShape; // t: 1dot;

          break;

        case 71:
          this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0 - 1], [$$[$0]])
          /* t:@@ */
          : $$[$0 - 1]; // t: 1dotRef1 -- use _QnonLitNodeConstraint_E_Opt like below?;

          break;

        case 76:
          this.$ = $$[$0] ? {
            type: "ShapeAnd",
            shapeExprs: [extend({
              type: "NodeConstraint"
            }, $$[$0 - 1]), $$[$0]]
          } : $$[$0 - 1]; // t: !! look to 1dotRef1;

          break;

        case 87:
          // t: 1dotRefLNex@@
          $$[$0] = $$[$0].substr(1, $$[$0].length - 1);
          var namePos = $$[$0].indexOf(':');
          this.$ = addSourceMap(expandPrefix($$[$0].substr(0, namePos), yy) + $$[$0].substr(namePos + 1), yy); // ShapeRef

          break;

        case 88:
          // t: 1dotRefNS1@@
          $$[$0] = $$[$0].substr(1, $$[$0].length - 1);
          this.$ = addSourceMap(expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy), yy); // ShapeRef

          break;

        case 89:
          this.$ = addSourceMap($$[$0], yy); // ShapeRef // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;

          break;

        case 90:
        case 93:
          // t: !!
          this.$ = $$[$0 - 2];

          if ($$[$0 - 1].length) {
            this.$.annotations = $$[$0 - 1];
          } // t: !!


          if ($$[$0]) {
            this.$.semActs = $$[$0].semActs;
          } // t: !!


          break;

        case 91:
          this.$ = []; // t: 1dot, 1dotAnnot3;

          break;

        case 92:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1dotAnnot3;

          break;

        case 94:
          this.$ = extend({
            type: "NodeConstraint",
            nodeKind: "literal"
          }, $$[$0]); // t: 1literalPattern;

          break;

        case 95:
          if (numericDatatypes.indexOf($$[$0 - 1]) === -1) numericFacets.forEach(function (facet) {
            if (facet in $$[$0]) error(new Error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0 - 1]), yy);
          });
          this.$ = extend({
            type: "NodeConstraint",
            datatype: $$[$0 - 1]
          }, $$[$0]); // t: 1datatype

          break;

        case 96:
          this.$ = {
            type: "NodeConstraint",
            values: $$[$0 - 1]
          }; // t: 1val1IRIREF;

          break;

        case 97:
          this.$ = extend({
            type: "NodeConstraint"
          }, $$[$0]);
          break;

        case 98:
          this.$ = {}; // t: 1literalPattern;

          break;

        case 99:
          if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
            error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
          }

          this.$ = extend($$[$0 - 1], $$[$0]); // t: 1literalLength

          break;

        case 101:
        case 107:
          if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
            error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
          }

          this.$ = extend($$[$0 - 1], $$[$0]); // t: !! look to 1literalLength

          break;

        case 102:
          this.$ = extend({
            type: "NodeConstraint"
          }, $$[$0 - 1], $$[$0] ? $$[$0] : {}); // t: 1iriPattern;

          break;

        case 103:
          this.$ = extend({
            type: "NodeConstraint"
          }, $$[$0]); // t: @@;

          break;

        case 104:
          this.$ = {};
          break;

        case 105:
          if (Object.keys($$[$0 - 1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
            error(new Error("Parse error: facet " + Object.keys($$[$0])[0] + " defined multiple times"), yy);
          }

          this.$ = extend($$[$0 - 1], $$[$0]);
          break;

        case 108:
          this.$ = {
            nodeKind: "iri"
          }; // t: 1iriPattern;

          break;

        case 109:
          this.$ = {
            nodeKind: "bnode"
          }; // t: 1bnodeLength;

          break;

        case 110:
          this.$ = {
            nodeKind: "nonliteral"
          }; // t: 1nonliteralLength;

          break;

        case 113:
          this.$ = keyValObject($$[$0 - 1], parseInt($$[$0], 10)); // t: 1literalLength;

          break;

        case 114:
          this.$ = unescapeRegexp($$[$0]); // t: 1literalPattern;

          break;

        case 115:
          this.$ = "length"; // t: 1literalLength;

          break;

        case 116:
          this.$ = "minlength"; // t: 1literalMinlength;

          break;

        case 117:
          this.$ = "maxlength"; // t: 1literalMaxlength;

          break;

        case 118:
          this.$ = keyValObject($$[$0 - 1], $$[$0]); // t: 1literalMininclusive;

          break;

        case 119:
          this.$ = keyValObject($$[$0 - 1], parseInt($$[$0], 10)); // t: 1literalTotaldigits;

          break;

        case 120:
          this.$ = parseInt($$[$0], 10);
          break;

        case 121:
        case 122:
          this.$ = parseFloat($$[$0]);
          break;

        case 123:
          // ## deprecated
          if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE) this.$ = parseFloat($$[$0 - 2].value);else if (numericDatatypes.indexOf($$[$0]) !== -1) this.$ = parseInt($$[$0 - 2].value);else error(new Error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]), yy);
          break;

        case 124:
          this.$ = "mininclusive"; // t: 1literalMininclusive;

          break;

        case 125:
          this.$ = "minexclusive"; // t: 1literalMinexclusive;

          break;

        case 126:
          this.$ = "maxinclusive"; // t: 1literalMaxinclusive;

          break;

        case 127:
          this.$ = "maxexclusive"; // t: 1literalMaxexclusive;

          break;

        case 128:
          this.$ = "totaldigits"; // t: 1literalTotaldigits;

          break;

        case 129:
          this.$ = "fractiondigits"; // t: 1literalFractiondigits;

          break;

        case 130:
          // t: 1dotInherit3
          this.$ = $$[$0 - 2] === EmptyShape ? {
            type: "Shape"
          } : $$[$0 - 2]; // t: 0

          if ($$[$0 - 1].length) {
            this.$.annotations = $$[$0 - 1];
          } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2


          if ($$[$0]) {
            this.$.semActs = $$[$0].semActs;
          } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot


          break;

        case 131:
          // t: 1dotInherit3
          var exprObj = $$[$0 - 1] ? {
            expression: $$[$0 - 1]
          } : EmptyObject; // t: 0, 0Inherit1

          this.$ = exprObj === EmptyObject && $$[$0 - 3] === EmptyObject ? EmptyShape : extend({
            type: "Shape"
          }, exprObj, $$[$0 - 3]);
          break;

        case 132:
          this.$ = ["inherit", $$[$0]]; // t: 1dotInherit1;

          break;

        case 133:
          this.$ = ["extra", $$[$0]]; // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;

          break;

        case 134:
          this.$ = ["closed", true]; // t: 1dotClosed;

          break;

        case 135:
          this.$ = EmptyObject;
          break;

        case 136:
          if ($$[$0 - 1] === EmptyObject) $$[$0 - 1] = {};
          if ($$[$0][0] === "closed") $$[$0 - 1]["closed"] = true; // t: 1dotClosed
          else if ($$[$0][0] in $$[$0 - 1]) $$[$0 - 1][$$[$0][0]] = unionAll($$[$0 - 1][$$[$0][0]], $$[$0][1]); // t: 1dotInherit3, 3groupdot3Extra, 3groupdotExtra3
            else $$[$0 - 1][$$[$0][0]] = $$[$0][1]; // t: 1dotInherit1

          this.$ = $$[$0 - 1];
          break;

        case 139:
          this.$ = $$[$0]; // t: 1dotExtra1, 3groupdot3Extra;

          break;

        case 140:
          this.$ = [$$[$0]]; // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;

          break;

        case 141:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 3groupdotExtra3;

          break;

        case 145:
          this.$ = {
            type: "OneOf",
            expressions: unionAll([$$[$0 - 1]], $$[$0])
          }; // t: 2oneOfdot;

          break;

        case 146:
          this.$ = $$[$0]; // t: 2oneOfdot;

          break;

        case 147:
          this.$ = [$$[$0]]; // t: 2oneOfdot;

          break;

        case 148:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 2oneOfdot;

          break;

        case 151:
          this.$ = $$[$0 - 1];
          break;

        case 155:
          this.$ = {
            type: "EachOf",
            expressions: unionAll([$$[$0 - 2]], $$[$0 - 1])
          }; // t: 2groupOfdot;

          break;

        case 156:
          this.$ = $$[$0]; // ## deprecated // t: 2groupOfdot;

          break;

        case 157:
          this.$ = $$[$0]; // t: 2groupOfdot;

          break;

        case 158:
          this.$ = [$$[$0]]; // t: 2groupOfdot;

          break;

        case 159:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 2groupOfdot;

          break;

        case 160:
          if ($$[$0 - 1]) {
            this.$ = extend({
              id: $$[$0 - 1]
            }, $$[$0]);
            addProduction($$[$0 - 1], this.$, yy);
          } else {
            this.$ = $$[$0];
          }

          break;

        case 162:
          this.$ = addSourceMap($$[$0], yy);
          break;

        case 167:
          // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
          this.$ = $$[$0 - 4]; // Copy all of the new attributes into the encapsulated shape.

          if ("min" in $$[$0 - 2]) {
            this.$.min = $$[$0 - 2].min;
          } // t: open3groupdotclosecard23Annot3Code2


          if ("max" in $$[$0 - 2]) {
            this.$.max = $$[$0 - 2].max;
          } // t: open3groupdotclosecard23Annot3Code2


          if ($$[$0 - 1].length) {
            this.$.annotations = $$[$0 - 1];
          } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2


          if ($$[$0]) {
            this.$.semActs = "semActs" in $$[$0 - 4] ? $$[$0 - 4].semActs.concat($$[$0].semActs) : $$[$0].semActs;
          } // t: open3groupdotcloseCode1, !open1dotOr1dot


          break;

        case 168:
          this.$ = {}; // t: 1dot;

          break;

        case 170:
          // $$[$0]: t: 1dotCode1
          if ($$[$0 - 3] !== EmptyShape && false) {
            var t = blank();
            addShape(t, $$[$0 - 3], yy);
            $$[$0 - 3] = t; // ShapeRef
          } // %6: t: 1inversedotCode1


          this.$ = extend({
            type: "TripleConstraint"
          }, $$[$0 - 5] ? $$[$0 - 5] : {}, {
            predicate: $$[$0 - 4]
          }, $$[$0 - 3] === EmptyShape ? {} : {
            valueExpr: $$[$0 - 3]
          }, $$[$0 - 2], $$[$0]); // t: 1dot // t: 1inversedot

          if ($$[$0 - 1].length) this.$["annotations"] = $$[$0 - 1]; // t: 1dotAnnot3 // t: 1inversedotAnnot3

          break;

        case 173:
          this.$ = {
            min: 0,
            max: UNBOUNDED
          }; // t: 1cardStar;

          break;

        case 174:
          this.$ = {
            min: 1,
            max: UNBOUNDED
          }; // t: 1cardPlus;

          break;

        case 175:
          this.$ = {
            min: 0,
            max: 1
          }; // t: 1cardOpt;

          break;

        case 176:
          $$[$0] = $$[$0].substr(1, $$[$0].length - 2);
          var nums = $$[$0].match(/(\d+)/g);
          this.$ = {
            min: parseInt(nums[0], 10)
          }; // t: 1card2blank, 1card2Star

          if (nums.length === 2) this.$["max"] = parseInt(nums[1], 10); // t: 1card23
          else if ($$[$0].indexOf(',') === -1) // t: 1card2
              this.$["max"] = parseInt(nums[0], 10);else this.$["max"] = UNBOUNDED;
          break;

        case 177:
          this.$ = {
            inverse: true
          }; // t: 1inversedot;

          break;

        case 178:
          this.$ = $$[$0 - 1]; // t: 1val1IRIREF;

          break;

        case 179:
          this.$ = []; // t: 1val1IRIREF;

          break;

        case 180:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1IRIREF;

          break;

        case 185:
          this.$ = [$$[$0]]; // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;

          break;

        case 186:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;

          break;

        case 187:
          this.$ = [$$[$0]]; // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;

          break;

        case 188:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;

          break;

        case 189:
          this.$ = [$$[$0]]; // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;

          break;

        case 190:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;

          break;

        case 191:
          this.$ = {
            type: "IriStemRange",
            stem: {
              type: "Wildcard"
            },
            exclusions: $$[$0]
          };
          break;

        case 192:
          this.$ = {
            type: "LiteralStemRange",
            stem: {
              type: "Wildcard"
            },
            exclusions: $$[$0]
          };
          break;

        case 193:
          this.$ = {
            type: "LanguageStemRange",
            stem: {
              type: "Wildcard"
            },
            exclusions: $$[$0]
          };
          break;

        case 194:
          if ($$[$0]) {
            this.$ = {
              // t: 1val1iriStem, 1val1iriStemMinusiri3
              type: $$[$0].length ? "IriStemRange" : "IriStem",
              stem: $$[$0 - 1]
            };
            if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
          } else {
            this.$ = $$[$0 - 1]; // t: 1val1IRIREF, 1AvalA
          }

          break;

        case 195:
          this.$ = []; // t: 1val1iriStem, 1val1iriStemMinusiri3;

          break;

        case 196:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1iriStemMinusiri3;

          break;

        case 197:
          this.$ = $$[$0]; // t: 1val1iriStemMinusiri3;

          break;

        case 200:
          this.$ = $$[$0] ? {
            type: "IriStem",
            stem: $$[$0 - 1]
          }
          /* t: 1val1iriStemMinusiriStem3 */
          : $$[$0 - 1]; // t: 1val1iriStemMinusiri3;

          break;

        case 203:
          if ($$[$0]) {
            this.$ = {
              // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
              type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
              stem: $$[$0 - 1].value
            };
            if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
          } else {
            this.$ = $$[$0 - 1]; // t: 1val1LITERAL
          }

          break;

        case 204:
          this.$ = []; // t: 1val1literalStem, 1val1literalStemMinusliteral3;

          break;

        case 205:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1literalStemMinusliteral3;

          break;

        case 206:
          this.$ = $$[$0]; // t: 1val1literalStemMinusliteral3;

          break;

        case 209:
          this.$ = $$[$0] ? {
            type: "LiteralStem",
            stem: $$[$0 - 1].value
          }
          /* t: 1val1literalStemMinusliteral3 */
          : $$[$0 - 1].value; // t: 1val1literalStemMinusliteralStem3;

          break;

        case 210:
          if ($$[$0]) {
            this.$ = {
              // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
              type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
              stem: $$[$0 - 1]
            };
            if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
          } else {
            this.$ = {
              type: "Language",
              languageTag: $$[$0 - 1]
            }; // t: 1val1language
          }

          break;

        case 211:
          this.$ = {
            // t: @@
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: ""
          };
          if ($$[$0].length) this.$["exclusions"] = $$[$0]; // t: @@

          break;

        case 212:
          this.$ = []; // t: 1val1languageStem, 1val1languageStemMinuslanguage3;

          break;

        case 213:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1val1languageStemMinuslanguage3;

          break;

        case 214:
          this.$ = $$[$0]; // t: 1val1languageStemMinuslanguage3;

          break;

        case 217:
          this.$ = $$[$0] ? {
            type: "LanguageStem",
            stem: $$[$0 - 1]
          }
          /* t: 1val1languageStemMinuslanguageStem3 */
          : $$[$0 - 1]; // t: 1val1languageStemMinuslanguage3;

          break;

        case 218:
          this.$ = addSourceMap($$[$0], yy); // Inclusion // t: 2groupInclude1;

          break;

        case 219:
          this.$ = {
            type: "Annotation",
            predicate: $$[$0 - 1],
            object: $$[$0]
          }; // t: 1dotAnnotIRIREF;

          break;

        case 222:
          this.$ = $$[$0].length ? {
            semActs: $$[$0]
          } : null; // t: 1dotCode1/2oneOfDot;

          break;

        case 223:
          this.$ = []; // t: 1dot, 1dotCode1;

          break;

        case 224:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1dotCode1;

          break;

        case 225:
          this.$ = $$[$0] ? unescapeSemanticAction($$[$0 - 1], $$[$0])
          /* t: 1dotCode1 */
          : {
            type: "SemAct",
            name: $$[$0 - 1]
          }; // t: 1dotNoCode1;

          break;

        case 232:
          this.$ = RDF_TYPE; // t: 1AvalA;

          break;

        case 238:
          this.$ = createLiteral($$[$0], XSD_INTEGER); // t: 1val1INTEGER;

          break;

        case 239:
          this.$ = createLiteral($$[$0], XSD_DECIMAL); // t: 1val1DECIMAL;

          break;

        case 240:
          this.$ = createLiteral($$[$0], XSD_DOUBLE); // t: 1val1DOUBLE;

          break;

        case 242:
          this.$ = $$[$0] ? extend($$[$0 - 1], {
            type: $$[$0]
          }) : $$[$0 - 1]; // t: 1val1Datatype;

          break;

        case 246:
          this.$ = {
            value: "true",
            type: XSD_BOOLEAN
          }; // t: 1val1true;

          break;

        case 247:
          this.$ = {
            value: "false",
            type: XSD_BOOLEAN
          }; // t: 1val1false;

          break;

        case 248:
          this.$ = unescapeString($$[$0], 1); // t: 1val1STRING_LITERAL2;

          break;

        case 249:
          this.$ = unescapeString($$[$0], 3); // t: 1val1STRING_LITERAL1;

          break;

        case 250:
          this.$ = unescapeString($$[$0], 1); // t: 1val1STRING_LITERAL_LONG2;

          break;

        case 251:
          this.$ = unescapeString($$[$0], 3); // t: 1val1STRING_LITERAL_LONG1;

          break;

        case 252:
          this.$ = unescapeLangString($$[$0], 1); // t: @@;

          break;

        case 253:
          this.$ = unescapeLangString($$[$0], 3); // t: @@;

          break;

        case 254:
          this.$ = unescapeLangString($$[$0], 1); // t: 1val1LANGTAG;

          break;

        case 255:
          this.$ = unescapeLangString($$[$0], 3); // t: 1val1STRING_LITERAL_LONG2_with_LANGTAG;

          break;

        case 256:
          // t: 1dot
          var unesc = ShExUtil.unescapeText($$[$0].slice(1, -1), {});
          this.$ = Parser._base === null || absoluteIRI.test(unesc) ? unesc : _resolveIRI(unesc);
          break;

        case 258:
          // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
          var namePos = $$[$0].indexOf(':');
          this.$ = expandPrefix($$[$0].substr(0, namePos), yy) + ShExUtil.unescapeText($$[$0].substr(namePos + 1), pnameEscapeReplacements);
          break;

        case 259:
          // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
          this.$ = expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
          break;

        case 261:
          this.$ = $$[$0]; // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;

          break;

        case 264:
          this.$ = [$$[$0]]; // t: 1dotInherit1, 1dot3Inherit, 1dotInherit3;

          break;

        case 265:
          this.$ = appendTo($$[$0 - 1], $$[$0]); // t: 1dotInherit3;

          break;
      }
    },
    table: [o($V0, [2, 2], {
      3: 1,
      4: 2
    }), {
      1: [3]
    }, o($V0, [2, 3], {
      5: 3
    }), {
      6: 4,
      7: [2, 10],
      8: 5,
      9: 10,
      10: 14,
      11: 15,
      14: 6,
      15: 7,
      16: 8,
      17: 9,
      18: [1, 11],
      19: $V1,
      20: [1, 12],
      21: $V2,
      22: 22,
      23: [1, 13],
      24: 16,
      25: 17,
      26: [1, 19],
      30: 18,
      31: 21,
      32: 20,
      189: $V3,
      196: 23,
      210: 26,
      211: $V4,
      212: $V5
    }, {
      7: [1, 30]
    }, o($V0, [2, 4]), {
      7: [2, 11]
    }, o($V0, $V6), o($V0, $V7), o($V0, $V8), o($V9, [2, 7], {
      12: 31
    }), {
      19: [1, 32]
    }, {
      21: [1, 33]
    }, {
      19: $Va,
      21: $Vb,
      22: 34,
      210: 36,
      211: $Vc
    }, o($V9, [2, 5]), o($V9, [2, 6]), o($V9, $Vd), o($V9, $Ve), o($V9, [2, 21], {
      31: 39,
      189: $V3
    }), {
      27: [1, 40]
    }, o($Vf, $Vg, {
      33: 41,
      34: 42,
      36: 44,
      40: 46,
      35: [1, 43],
      39: [1, 45],
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($V0, [2, 22]), o($Vk, $Vl), o($Vk, $Vm), {
      19: $Vn,
      21: $Vo,
      22: 50,
      210: 52,
      211: $Vp
    }, o($Vk, $Vq), o($Vk, $Vr), o($Vk, $Vs), o($Vk, $Vt), o($Vk, $Vu), {
      1: [2, 1]
    }, {
      7: [2, 9],
      8: 56,
      10: 57,
      13: 55,
      15: 58,
      16: 59,
      17: 60,
      18: [1, 63],
      19: $V1,
      20: [1, 64],
      21: $V2,
      22: 22,
      23: [1, 65],
      24: 61,
      25: 62,
      26: [1, 66],
      32: 67,
      196: 23,
      210: 26,
      211: $V4,
      212: $V5
    }, o($V0, $Vv), {
      19: $Va,
      21: $Vb,
      22: 68,
      210: 36,
      211: $Vc
    }, o($V0, $Vw), o($V0, $Vq), o($V0, $Vr), o($V0, $Vt), o($V0, $Vu), o($V0, [2, 23]), o($Vx, $Vg, {
      28: 69,
      50: 70,
      36: 71,
      39: $Vy
    }), o($V9, $Vz), o($V9, $VA), o($V9, $VB), o($VC, $VD, {
      37: 73,
      60: 74,
      62: 75,
      68: 76,
      69: 79,
      71: 80,
      74: 81,
      88: 82,
      90: 83,
      83: 85,
      84: 86,
      85: 87,
      114: 88,
      91: 92,
      22: 93,
      87: 95,
      95: 96,
      210: 99,
      101: 100,
      103: 101,
      19: $VE,
      21: $VF,
      65: [1, 77],
      67: [1, 78],
      81: $VG,
      92: $VH,
      93: $VI,
      94: $VJ,
      97: $VK,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: $VU,
      211: $VV
    }), o($Vf, $VW, {
      40: 113,
      75: $VX,
      76: $VY,
      77: $VZ
    }), {
      41: 117,
      44: 118,
      45: 119,
      46: 120,
      47: $V_,
      48: 121,
      49: $V$
    }, o($V01, $V11), o($V01, $V21), {
      19: [1, 127],
      21: [1, 131],
      22: 125,
      32: 124,
      196: 126,
      210: 128,
      211: [1, 130],
      212: [1, 129]
    }, {
      189: [1, 134],
      190: 132,
      191: [1, 133]
    }, o($V31, $Vq), o($V31, $Vr), o($V31, $Vt), o($V31, $Vu), o($V9, [2, 8]), o($V9, [2, 24]), o($V9, [2, 25]), o($V9, $V6), o($V9, $V7), o($V9, $V8), o($V9, $Vd), o($V9, $Ve), {
      19: [1, 135]
    }, {
      21: [1, 136]
    }, {
      19: $V41,
      21: $V51,
      22: 137,
      210: 139,
      211: $V61
    }, {
      27: [1, 142]
    }, o($Vf, $Vg, {
      33: 143,
      34: 144,
      36: 146,
      40: 148,
      35: [1, 145],
      39: [1, 147],
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($V0, $V71), o($V81, $V91, {
      29: 149
    }), o($Va1, $Vb1, {
      54: 150
    }), o($VC, $VD, {
      69: 79,
      71: 80,
      74: 81,
      88: 82,
      90: 83,
      83: 85,
      84: 86,
      85: 87,
      114: 88,
      91: 92,
      22: 93,
      87: 95,
      95: 96,
      210: 99,
      101: 100,
      103: 101,
      58: 151,
      60: 152,
      62: 153,
      63: 154,
      68: 157,
      40: 158,
      19: $VE,
      21: $VF,
      65: [1, 155],
      67: [1, 156],
      75: [1, 159],
      76: [1, 160],
      77: [1, 161],
      81: $VG,
      92: $VH,
      93: $VI,
      94: $VJ,
      97: $VK,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: $VU,
      211: $VV
    }), o($Vx, $VW), o($V9, $Vc1, {
      44: 118,
      45: 119,
      46: 120,
      48: 121,
      38: 162,
      41: 163,
      47: $V_,
      49: $V$
    }), o($Va1, $Vd1, {
      61: 164,
      63: 165,
      68: 166,
      40: 167,
      74: 168,
      114: 169,
      75: $VX,
      76: $VY,
      77: $VZ,
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Ve1), o($Va1, $Vf1, {
      64: 170,
      60: 171,
      69: 172,
      88: 173,
      90: 174,
      91: 178,
      95: 179,
      92: $Vg1,
      93: $Vh1,
      94: $Vi1,
      97: $Vj1,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      34: 181,
      36: 182,
      40: 184,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vl1), o($Vm1, $Vn1, {
      78: 185
    }), o($Vo1, $Vn1, {
      78: 186
    }), o($Vp1, $Vn1, {
      78: 187
    }), o($Vq1, $Vr1, {
      89: 188
    }), o($Vm1, $Vs1, {
      95: 96,
      91: 189,
      97: $VK,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 190
    }), o($Vt1, $Vu1, {
      82: 191
    }), o($Vt1, $Vu1, {
      82: 192
    }), o($Vo1, $Vv1, {
      101: 100,
      103: 101,
      87: 193,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), {
      115: [1, 194],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 203
    }), o($VH1, $VI1), {
      96: [1, 204]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 206],
      102: 205,
      104: [1, 207],
      105: [1, 208],
      106: 209,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 214]
    }, {
      96: [2, 115]
    }, {
      96: [2, 116]
    }, {
      96: [2, 117]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($VO1, [2, 124]), o($VO1, [2, 125]), o($VO1, [2, 126]), o($VO1, [2, 127]), {
      96: [2, 128]
    }, {
      96: [2, 129]
    }, o($V9, $Vc1, {
      44: 118,
      45: 119,
      46: 120,
      48: 121,
      41: 163,
      38: 215,
      47: $V_,
      49: $V$
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 219],
      21: [1, 223],
      22: 217,
      32: 216,
      196: 218,
      210: 220,
      211: [1, 222],
      212: [1, 221]
    }, o($V9, $VP1), o($V9, $VQ1, {
      46: 224,
      47: $V_
    }), o($V81, $V91, {
      29: 225,
      48: 226,
      49: $V$
    }), o($V81, $VR1), o($Va1, $VS1), o($Vx, $Vg, {
      28: 227,
      50: 228,
      36: 229,
      39: $Vy
    }), o($Vx, $Vg, {
      50: 230,
      36: 231,
      39: $Vy
    }), o($V01, $VT1), o($V01, $Vl), o($V01, $Vm), o($V01, $Vq), o($V01, $Vr), o($V01, $Vs), o($V01, $Vt), o($V01, $Vu), o($V0, $VU1), o($V0, $VV1), o($V0, $VW1), o($V9, $Vv), {
      19: $V41,
      21: $V51,
      22: 232,
      210: 139,
      211: $V61
    }, o($V9, $Vw), o($V9, $Vq), o($V9, $Vr), o($V9, $Vt), o($V9, $Vu), o($Vx, $Vg, {
      28: 233,
      50: 234,
      36: 235,
      39: $Vy
    }), o($V9, $Vz), o($V9, $VA), o($V9, $VB), o($VC, $VD, {
      37: 236,
      60: 237,
      62: 238,
      68: 239,
      69: 242,
      71: 243,
      74: 244,
      88: 245,
      90: 246,
      83: 248,
      84: 249,
      85: 250,
      114: 251,
      91: 255,
      22: 256,
      87: 258,
      95: 259,
      210: 262,
      101: 263,
      103: 264,
      19: $VX1,
      21: $VY1,
      65: [1, 240],
      67: [1, 241],
      81: $VZ1,
      92: $V_1,
      93: $V$1,
      94: $V02,
      97: $V12,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: $V22,
      211: $V32
    }), o($Vf, $VW, {
      40: 267,
      75: $V42,
      76: $V52,
      77: $V62
    }), {
      41: 271,
      44: 272,
      45: 273,
      46: 274,
      47: $V72,
      48: 275,
      49: $V82
    }, o($V9, $V92, {
      46: 278,
      47: $V_
    }), o($V81, $Va2, {
      48: 279,
      49: $V$
    }), o($Va1, $Vb2), o($Va1, $Vd1, {
      63: 165,
      68: 166,
      40: 167,
      74: 168,
      114: 169,
      61: 280,
      75: $VX,
      76: $VY,
      77: $VZ,
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      60: 171,
      69: 172,
      88: 173,
      90: 174,
      91: 178,
      95: 179,
      64: 281,
      92: $Vg1,
      93: $Vh1,
      94: $Vi1,
      97: $Vj1,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 282,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 286],
      21: [1, 290],
      22: 284,
      32: 283,
      196: 285,
      210: 287,
      211: [1, 289],
      212: [1, 288]
    }, o($V9, $Vh2), o($V9, $Vi2), o($Va1, $Vj2), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 291
    }), {
      115: [1, 292],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $Vl2), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 293
    }), o($Vn2, $Vr1, {
      89: 294
    }), o($Vo1, $Vs1, {
      95: 179,
      91: 295,
      97: $Vj1,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 296]
    }, o($Vn2, $VJ1), {
      66: [1, 297]
    }, o($VC, $VD, {
      37: 298,
      60: 299,
      62: 300,
      68: 301,
      69: 304,
      71: 305,
      74: 306,
      88: 307,
      90: 308,
      83: 310,
      84: 311,
      85: 312,
      114: 313,
      91: 317,
      22: 318,
      87: 320,
      95: 321,
      210: 324,
      101: 325,
      103: 326,
      19: [1, 323],
      21: [1, 328],
      65: [1, 302],
      67: [1, 303],
      81: [1, 309],
      92: [1, 314],
      93: [1, 315],
      94: [1, 316],
      97: $Vo2,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 319],
      211: [1, 327]
    }), o($Vf, $VW, {
      40: 329,
      75: $Vp2,
      76: $Vq2,
      77: $Vr2
    }), {
      41: 333,
      44: 334,
      45: 335,
      46: 336,
      47: $Vs2,
      48: 337,
      49: $Vt2
    }, o($Vu2, $Vv2, {
      79: 340,
      80: 341,
      188: 342,
      186: [1, 343]
    }), o($Vw2, $Vv2, {
      79: 344,
      80: 345,
      188: 346,
      186: $Vx2
    }), o($Vy2, $Vv2, {
      79: 348,
      80: 349,
      188: 350,
      186: [1, 351]
    }), o($Vm1, $Vz2, {
      95: 96,
      91: 352,
      97: $VK,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 353,
      91: 354,
      87: 355,
      95: 356,
      101: 358,
      103: 359,
      97: $VC2,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 353,
      91: 354,
      87: 355,
      95: 356,
      101: 358,
      103: 359,
      97: $VC2,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 353,
      91: 354,
      87: 355,
      95: 356,
      101: 358,
      103: 359,
      97: $VC2,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($VG2, $VH2, {
      116: 360,
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VC, [2, 136]), o($VC, [2, 132]), o($VC, [2, 133]), o($VC, [2, 134]), {
      19: $VL2,
      21: $VM2,
      22: 375,
      32: 374,
      196: 376,
      210: 378,
      211: $VN2,
      212: $VO2,
      214: 373
    }, {
      19: $VP2,
      21: $VQ2,
      22: 384,
      124: 382,
      125: 383,
      195: $VR2,
      210: 387,
      211: $VS2
    }, o($VT2, [2, 262]), o($VT2, [2, 263]), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 390],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 422]
    }, {
      107: $Vg3
    }, {
      107: $Vh3
    }, {
      107: $Vi3
    }, {
      107: $Vj3
    }, o($VH1, $Vk3), o($V9, $Vl3), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($V81, $Vm3), o($V9, $Vn3, {
      46: 278,
      47: $V_
    }), o($Va1, $Vo3), o($V81, $Vp3), o($Va1, $Vb1, {
      54: 423
    }), o($VC, $VD, {
      58: 424,
      60: 425,
      62: 426,
      63: 427,
      69: 430,
      71: 431,
      68: 432,
      40: 433,
      88: 434,
      90: 435,
      83: 437,
      84: 438,
      85: 439,
      74: 440,
      91: 447,
      22: 448,
      87: 450,
      114: 451,
      95: 452,
      210: 455,
      101: 456,
      103: 457,
      19: [1, 454],
      21: [1, 459],
      65: [1, 428],
      67: [1, 429],
      75: [1, 441],
      76: [1, 442],
      77: [1, 443],
      81: [1, 436],
      92: [1, 444],
      93: [1, 445],
      94: [1, 446],
      97: $Vq3,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 449],
      211: [1, 458]
    }), o($Va1, $Vr3), o($VC, $VD, {
      58: 460,
      60: 461,
      62: 462,
      63: 463,
      69: 466,
      71: 467,
      68: 468,
      40: 469,
      88: 470,
      90: 471,
      83: 473,
      84: 474,
      85: 475,
      74: 476,
      91: 483,
      22: 484,
      87: 486,
      114: 487,
      95: 488,
      210: 491,
      101: 492,
      103: 493,
      19: [1, 490],
      21: [1, 495],
      65: [1, 464],
      67: [1, 465],
      75: [1, 477],
      76: [1, 478],
      77: [1, 479],
      81: [1, 472],
      92: [1, 480],
      93: [1, 481],
      94: [1, 482],
      97: $Vs3,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 485],
      211: [1, 494]
    }), o($V9, $V71), o($V81, $V91, {
      29: 496
    }), o($Va1, $Vb1, {
      54: 497
    }), o($VC, $VD, {
      69: 242,
      71: 243,
      74: 244,
      88: 245,
      90: 246,
      83: 248,
      84: 249,
      85: 250,
      114: 251,
      91: 255,
      22: 256,
      87: 258,
      95: 259,
      210: 262,
      101: 263,
      103: 264,
      58: 498,
      60: 499,
      62: 500,
      63: 501,
      68: 504,
      40: 505,
      19: $VX1,
      21: $VY1,
      65: [1, 502],
      67: [1, 503],
      75: [1, 506],
      76: [1, 507],
      77: [1, 508],
      81: $VZ1,
      92: $V_1,
      93: $V$1,
      94: $V02,
      97: $V12,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: $V22,
      211: $V32
    }), o($V9, $Vc1, {
      44: 272,
      45: 273,
      46: 274,
      48: 275,
      38: 509,
      41: 510,
      47: $V72,
      49: $V82
    }), o($Va1, $Vd1, {
      61: 511,
      63: 512,
      68: 513,
      40: 514,
      74: 515,
      114: 516,
      75: $V42,
      76: $V52,
      77: $V62,
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Ve1), o($Va1, $Vf1, {
      64: 517,
      60: 518,
      69: 519,
      88: 520,
      90: 521,
      91: 525,
      95: 526,
      92: $Vt3,
      93: $Vu3,
      94: $Vv3,
      97: $Vw3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 528,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vl1), o($Vm1, $Vn1, {
      78: 529
    }), o($Vo1, $Vn1, {
      78: 530
    }), o($Vp1, $Vn1, {
      78: 531
    }), o($Vq1, $Vr1, {
      89: 532
    }), o($Vm1, $Vs1, {
      95: 259,
      91: 533,
      97: $V12,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 534
    }), o($Vt1, $Vu1, {
      82: 535
    }), o($Vt1, $Vu1, {
      82: 536
    }), o($Vo1, $Vv1, {
      101: 263,
      103: 264,
      87: 537,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), {
      115: [1, 538],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 539
    }), o($VH1, $VI1), {
      96: [1, 540]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 542],
      102: 541,
      104: [1, 543],
      105: [1, 544],
      106: 545,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 546]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($V9, $Vc1, {
      44: 272,
      45: 273,
      46: 274,
      48: 275,
      41: 510,
      38: 547,
      47: $V72,
      49: $V82
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 551],
      21: [1, 555],
      22: 549,
      32: 548,
      196: 550,
      210: 552,
      211: [1, 554],
      212: [1, 553]
    }, o($V9, $VP1), o($V9, $VQ1, {
      46: 556,
      47: $V72
    }), o($V81, $V91, {
      29: 557,
      48: 558,
      49: $V82
    }), o($V81, $VR1), o($Va1, $VS1), o($Vx, $Vg, {
      28: 559,
      50: 560,
      36: 561,
      39: $Vy
    }), o($Vx, $Vg, {
      50: 562,
      36: 563,
      39: $Vy
    }), o($V81, $Vx3), o($Va1, $Vy3), o($Va1, $Vz3), o($Va1, $VA3), {
      66: [1, 564]
    }, o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), o($Vw2, $Vv2, {
      80: 345,
      188: 346,
      79: 565,
      186: $Vx2
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 566,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 345,
      188: 346,
      79: 567,
      186: $Vx2
    }), o($Vo1, $Vz2, {
      95: 179,
      91: 568,
      97: $Vj1,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VB3), {
      38: 569,
      41: 570,
      44: 334,
      45: 335,
      46: 336,
      47: $Vs2,
      48: 337,
      49: $Vt2,
      66: $Vc1
    }, o($VC, $VD, {
      61: 571,
      63: 572,
      68: 573,
      40: 574,
      74: 575,
      114: 576,
      47: $Vd1,
      49: $Vd1,
      66: $Vd1,
      75: $Vp2,
      76: $Vq2,
      77: $Vr2
    }), o($VC3, $Ve1), o($VC3, $Vf1, {
      64: 577,
      60: 578,
      69: 579,
      88: 580,
      90: 581,
      91: 585,
      95: 586,
      92: [1, 582],
      93: [1, 583],
      94: [1, 584],
      97: $VD3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 588,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VC3, $Vl1), o($VE3, $Vn1, {
      78: 589
    }), o($VF3, $Vn1, {
      78: 590
    }), o($VG3, $Vn1, {
      78: 591
    }), o($VH3, $Vr1, {
      89: 592
    }), o($VE3, $Vs1, {
      95: 321,
      91: 593,
      97: $Vo2,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VI3, $Vu1, {
      82: 594
    }), o($VI3, $Vu1, {
      82: 595
    }), o($VI3, $Vu1, {
      82: 596
    }), o($VF3, $Vv1, {
      101: 325,
      103: 326,
      87: 597,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), {
      115: [1, 598],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VH3, $VA1), o($VH3, $VB1), o($VH3, $VC1), o($VH3, $VD1), o($VI3, $VE1), o($VF1, $VG1, {
      158: 599
    }), o($VJ3, $VI1), {
      96: [1, 600]
    }, o($VH3, $VJ1), o($VI3, $Vq), o($VI3, $Vr), {
      96: [1, 602],
      102: 601,
      104: [1, 603],
      105: [1, 604],
      106: 605,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 606]
    }, o($VI3, $Vt), o($VI3, $Vu), {
      38: 607,
      41: 570,
      44: 334,
      45: 335,
      46: 336,
      47: $Vs2,
      48: 337,
      49: $Vt2,
      66: $Vc1
    }, o($VC3, $V11), o($VC3, $V21), {
      19: [1, 611],
      21: [1, 615],
      22: 609,
      32: 608,
      196: 610,
      210: 612,
      211: [1, 614],
      212: [1, 613]
    }, {
      66: $VP1
    }, {
      46: 616,
      47: $Vs2,
      66: $VQ1
    }, o($VK3, $V91, {
      29: 617,
      48: 618,
      49: $Vt2
    }), o($VK3, $VR1), o($VC3, $VS1), o($Vx, $Vg, {
      28: 619,
      50: 620,
      36: 621,
      39: $Vy
    }), o($Vx, $Vg, {
      50: 622,
      36: 623,
      39: $Vy
    }), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 624,
      189: [1, 625]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 626,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 633,
      189: [1, 634]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 635,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 636,
      189: [1, 637]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 638,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 639]
    }, o($Vt1, $VJ1), {
      96: [1, 641],
      102: 640,
      104: [1, 642],
      105: [1, 643],
      106: 644,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 645]
    }, {
      117: [1, 646]
    }, {
      117: [2, 138]
    }, {
      117: $VZ3
    }, {
      117: $V_3,
      129: 647,
      130: 648,
      131: $V$3
    }, {
      117: $V04
    }, o($V14, $V24), o($V14, $V34), o($V14, $V44, {
      135: 650,
      138: 651,
      139: 654,
      136: $V54,
      137: $V64
    }), o($V74, $V84, {
      141: 655,
      146: 656,
      147: 657,
      150: 658,
      151: 660,
      65: [1, 659],
      156: $V94
    }), o($Va4, $Vb4), o($VG2, [2, 164]), {
      19: [1, 665],
      21: [1, 669],
      22: 663,
      145: 662,
      196: 664,
      210: 666,
      211: [1, 668],
      212: [1, 667]
    }, {
      19: [1, 673],
      21: [1, 677],
      22: 671,
      145: 670,
      196: 672,
      210: 674,
      211: [1, 676],
      212: [1, 675]
    }, o($VC, [2, 261], {
      22: 375,
      196: 376,
      210: 378,
      32: 678,
      19: $VL2,
      21: $VM2,
      211: $VN2,
      212: $VO2
    }), o($Vc4, [2, 264]), o($Vc4, $Vl), o($Vc4, $Vm), o($Vc4, $Vq), o($Vc4, $Vr), o($Vc4, $Vs), o($Vc4, $Vt), o($Vc4, $Vu), o($VC, [2, 139], {
      22: 384,
      210: 387,
      125: 679,
      19: $VP2,
      21: $VQ2,
      195: $VR2,
      211: $VS2
    }), o($Vd4, [2, 140]), o($Vd4, $Ve4), o($Vd4, $Vf4), o($Vd4, $Vq), o($Vd4, $Vr), o($Vd4, $Vt), o($Vd4, $Vu), o($Vt1, $Vg4), o($VF1, [2, 180]), o($VF1, [2, 181]), o($VF1, [2, 182]), o($VF1, [2, 183]), {
      164: 680,
      165: 681,
      166: 684,
      167: 682,
      168: 685,
      169: 683,
      170: 686,
      175: [1, 687]
    }, o($VF1, [2, 198], {
      171: 688,
      173: 689,
      174: [1, 690]
    }), o($VF1, [2, 207], {
      178: 691,
      180: 692,
      174: [1, 693]
    }), o($VF1, [2, 215], {
      182: 694,
      183: 695,
      174: $Vh4
    }), {
      174: $Vh4,
      183: 697
    }, o($Vi4, $Vq), o($Vi4, $Vr), o($Vi4, $Vj4), o($Vi4, $Vk4), o($Vi4, $Vl4), o($Vi4, $Vt), o($Vi4, $Vu), o($Vi4, $Vm4), o($Vi4, $Vn4, {
      198: 698,
      199: 699,
      107: [1, 700]
    }), o($Vi4, $Vo4), o($Vi4, $Vp4), o($Vi4, $Vq4), o($Vi4, $Vr4), o($Vi4, $Vs4), o($Vi4, $Vt4), o($Vi4, $Vu4), o($Vi4, $Vv4), o($Vi4, $Vw4), o($Vx4, $Vg3), o($Vx4, $Vh3), o($Vx4, $Vi3), o($Vx4, $Vj3), {
      19: [1, 703],
      21: [1, 706],
      22: 702,
      83: 701,
      210: 704,
      211: [1, 705]
    }, o($V81, $Va2, {
      48: 707,
      49: [1, 708]
    }), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 709,
      63: 710,
      68: 711,
      40: 712,
      74: 713,
      114: 717,
      75: [1, 714],
      76: [1, 715],
      77: [1, 716],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 718,
      60: 719,
      69: 720,
      88: 721,
      90: 722,
      91: 726,
      95: 727,
      92: [1, 723],
      93: [1, 724],
      94: [1, 725],
      97: $Vy4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 729,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 730
    }), o($Vo1, $Vn1, {
      78: 731
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 732
    }), o($Vm1, $Vs1, {
      95: 452,
      91: 733,
      97: $Vq3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 734
    }), o($Vt1, $Vu1, {
      82: 735
    }), o($Vt1, $Vu1, {
      82: 736
    }), o($Vo1, $Vv1, {
      101: 456,
      103: 457,
      87: 737,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 738
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 742],
      21: [1, 746],
      22: 740,
      32: 739,
      196: 741,
      210: 743,
      211: [1, 745],
      212: [1, 744]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 747
    }), o($VH1, $VI1), {
      115: [1, 748],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 749]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 751],
      102: 750,
      104: [1, 752],
      105: [1, 753],
      106: 754,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 755]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 756,
      63: 757,
      68: 758,
      40: 759,
      74: 760,
      114: 764,
      75: [1, 761],
      76: [1, 762],
      77: [1, 763],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 765,
      60: 766,
      69: 767,
      88: 768,
      90: 769,
      91: 773,
      95: 774,
      92: [1, 770],
      93: [1, 771],
      94: [1, 772],
      97: $Vz4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 776,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 777
    }), o($Vo1, $Vn1, {
      78: 778
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 779
    }), o($Vm1, $Vs1, {
      95: 488,
      91: 780,
      97: $Vs3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 781
    }), o($Vt1, $Vu1, {
      82: 782
    }), o($Vt1, $Vu1, {
      82: 783
    }), o($Vo1, $Vv1, {
      101: 492,
      103: 493,
      87: 784,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 785
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 789],
      21: [1, 793],
      22: 787,
      32: 786,
      196: 788,
      210: 790,
      211: [1, 792],
      212: [1, 791]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 794
    }), o($VH1, $VI1), {
      115: [1, 795],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 796]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 798],
      102: 797,
      104: [1, 799],
      105: [1, 800],
      106: 801,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 802]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($V9, $V92, {
      46: 803,
      47: $V72
    }), o($V81, $Va2, {
      48: 804,
      49: $V82
    }), o($Va1, $Vb2), o($Va1, $Vd1, {
      63: 512,
      68: 513,
      40: 514,
      74: 515,
      114: 516,
      61: 805,
      75: $V42,
      76: $V52,
      77: $V62,
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      60: 518,
      69: 519,
      88: 520,
      90: 521,
      91: 525,
      95: 526,
      64: 806,
      92: $Vt3,
      93: $Vu3,
      94: $Vv3,
      97: $Vw3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 807,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 811],
      21: [1, 815],
      22: 809,
      32: 808,
      196: 810,
      210: 812,
      211: [1, 814],
      212: [1, 813]
    }, o($V9, $Vh2), o($V9, $Vi2), o($Va1, $Vj2), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 816
    }), {
      115: [1, 817],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $Vl2), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 818
    }), o($Vn2, $Vr1, {
      89: 819
    }), o($Vo1, $Vs1, {
      95: 526,
      91: 820,
      97: $Vw3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 821]
    }, o($Vn2, $VJ1), {
      66: [1, 822]
    }, o($Vu2, $Vv2, {
      79: 823,
      80: 824,
      188: 825,
      186: [1, 826]
    }), o($Vw2, $Vv2, {
      79: 827,
      80: 828,
      188: 829,
      186: $VA4
    }), o($Vy2, $Vv2, {
      79: 831,
      80: 832,
      188: 833,
      186: [1, 834]
    }), o($Vm1, $Vz2, {
      95: 259,
      91: 835,
      97: $V12,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 836,
      91: 837,
      87: 838,
      95: 839,
      101: 841,
      103: 842,
      97: $VB4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 836,
      91: 837,
      87: 838,
      95: 839,
      101: 841,
      103: 842,
      97: $VB4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 836,
      91: 837,
      87: 838,
      95: 839,
      101: 841,
      103: 842,
      97: $VB4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 843,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 844],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 845]
    }, o($VH1, $Vk3), o($V9, $Vl3), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($V81, $Vm3), o($V9, $Vn3, {
      46: 803,
      47: $V72
    }), o($Va1, $Vo3), o($V81, $Vp3), o($Va1, $Vb1, {
      54: 846
    }), o($VC, $VD, {
      58: 847,
      60: 848,
      62: 849,
      63: 850,
      69: 853,
      71: 854,
      68: 855,
      40: 856,
      88: 857,
      90: 858,
      83: 860,
      84: 861,
      85: 862,
      74: 863,
      91: 870,
      22: 871,
      87: 873,
      114: 874,
      95: 875,
      210: 878,
      101: 879,
      103: 880,
      19: [1, 877],
      21: [1, 882],
      65: [1, 851],
      67: [1, 852],
      75: [1, 864],
      76: [1, 865],
      77: [1, 866],
      81: [1, 859],
      92: [1, 867],
      93: [1, 868],
      94: [1, 869],
      97: $VC4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 872],
      211: [1, 881]
    }), o($Va1, $Vr3), o($VC, $VD, {
      58: 883,
      60: 884,
      62: 885,
      63: 886,
      69: 889,
      71: 890,
      68: 891,
      40: 892,
      88: 893,
      90: 894,
      83: 896,
      84: 897,
      85: 898,
      74: 899,
      91: 906,
      22: 907,
      87: 909,
      114: 910,
      95: 911,
      210: 914,
      101: 915,
      103: 916,
      19: [1, 913],
      21: [1, 918],
      65: [1, 887],
      67: [1, 888],
      75: [1, 900],
      76: [1, 901],
      77: [1, 902],
      81: [1, 895],
      92: [1, 903],
      93: [1, 904],
      94: [1, 905],
      97: $VD4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 908],
      211: [1, 917]
    }), o($Va1, $VE4), o($Va1, $VU3), {
      117: [1, 919]
    }, o($Va1, $VM3), o($Vn2, $VV3), {
      66: $Vh2
    }, {
      66: $Vi2
    }, o($VC3, $Vj2), o($VC3, $Vk2), o($VC3, $Vf2), o($VC3, $Vg2), o($VF3, $Vn1, {
      78: 920
    }), {
      115: [1, 921],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VC3, $Vl2), o($VC3, $Vm2), o($VF3, $Vn1, {
      78: 922
    }), o($VF4, $Vr1, {
      89: 923
    }), o($VF3, $Vs1, {
      95: 586,
      91: 924,
      97: $VD3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA1), o($VF4, $VB1), o($VF4, $VC1), o($VF4, $VD1), {
      96: [1, 925]
    }, o($VF4, $VJ1), {
      66: [1, 926]
    }, o($VG4, $Vv2, {
      79: 927,
      80: 928,
      188: 929,
      186: [1, 930]
    }), o($VH4, $Vv2, {
      79: 931,
      80: 932,
      188: 933,
      186: $VI4
    }), o($VJ4, $Vv2, {
      79: 935,
      80: 936,
      188: 937,
      186: [1, 938]
    }), o($VE3, $Vz2, {
      95: 321,
      91: 939,
      97: $Vo2,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VH3, $VA2), o($VF3, $VB2, {
      86: 940,
      91: 941,
      87: 942,
      95: 943,
      101: 945,
      103: 946,
      97: $VK4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VD2, {
      86: 940,
      91: 941,
      87: 942,
      95: 943,
      101: 945,
      103: 946,
      97: $VK4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VE2, {
      86: 940,
      91: 941,
      87: 942,
      95: 943,
      101: 945,
      103: 946,
      97: $VK4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VJ3, $VF2), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 947,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 948],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VH3, $Vb3), o($VJ3, $Vc3), o($VJ3, $Vd3), o($VJ3, $Ve3), o($VJ3, $Vf3), {
      107: [1, 949]
    }, o($VJ3, $Vk3), {
      66: $Vl3
    }, o($VC3, $VT1), o($VC3, $Vl), o($VC3, $Vm), o($VC3, $Vq), o($VC3, $Vr), o($VC3, $Vs), o($VC3, $Vt), o($VC3, $Vu), o($VK3, $Vm3), {
      46: 950,
      47: $Vs2,
      66: $Vn3
    }, o($VC3, $Vo3), o($VK3, $Vp3), o($VC3, $Vb1, {
      54: 951
    }), o($VC, $VD, {
      58: 952,
      60: 953,
      62: 954,
      63: 955,
      69: 958,
      71: 959,
      68: 960,
      40: 961,
      88: 962,
      90: 963,
      83: 965,
      84: 966,
      85: 967,
      74: 968,
      91: 975,
      22: 976,
      87: 978,
      114: 979,
      95: 980,
      210: 983,
      101: 984,
      103: 985,
      19: [1, 982],
      21: [1, 987],
      65: [1, 956],
      67: [1, 957],
      75: [1, 969],
      76: [1, 970],
      77: [1, 971],
      81: [1, 964],
      92: [1, 972],
      93: [1, 973],
      94: [1, 974],
      97: $VL4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 977],
      211: [1, 986]
    }), o($VC3, $Vr3), o($VC, $VD, {
      58: 988,
      60: 989,
      62: 990,
      63: 991,
      69: 994,
      71: 995,
      68: 996,
      40: 997,
      88: 998,
      90: 999,
      83: 1001,
      84: 1002,
      85: 1003,
      74: 1004,
      91: 1011,
      22: 1012,
      87: 1014,
      114: 1015,
      95: 1016,
      210: 1019,
      101: 1020,
      103: 1021,
      19: [1, 1018],
      21: [1, 1023],
      65: [1, 992],
      67: [1, 993],
      75: [1, 1005],
      76: [1, 1006],
      77: [1, 1007],
      81: [1, 1000],
      92: [1, 1008],
      93: [1, 1009],
      94: [1, 1010],
      97: $VM4,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 1013],
      211: [1, 1022]
    }), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1024,
      210: 52,
      211: $Vp
    }, {
      19: $VO4,
      21: $VP4,
      22: 1026,
      96: [1, 1037],
      104: [1, 1038],
      105: [1, 1039],
      106: 1036,
      177: 1027,
      187: 1025,
      192: 1030,
      193: 1031,
      194: 1032,
      197: 1035,
      200: [1, 1040],
      201: [1, 1041],
      202: [1, 1046],
      203: [1, 1047],
      204: [1, 1048],
      205: [1, 1049],
      206: [1, 1042],
      207: [1, 1043],
      208: [1, 1044],
      209: [1, 1045],
      210: 1029,
      211: $VQ4
    }, o($VR4, $Ve4), o($VR4, $Vf4), o($VR4, $Vq), o($VR4, $Vr), o($VR4, $Vt), o($VR4, $Vu), o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1050,
      210: 52,
      211: $Vp
    }, {
      19: $VS4,
      21: $VT4,
      22: 1052,
      96: [1, 1063],
      104: [1, 1064],
      105: [1, 1065],
      106: 1062,
      177: 1053,
      187: 1051,
      192: 1056,
      193: 1057,
      194: 1058,
      197: 1061,
      200: [1, 1066],
      201: [1, 1067],
      202: [1, 1072],
      203: [1, 1073],
      204: [1, 1074],
      205: [1, 1075],
      206: [1, 1068],
      207: [1, 1069],
      208: [1, 1070],
      209: [1, 1071],
      210: 1055,
      211: $VU4
    }, o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1076,
      210: 52,
      211: $Vp
    }, {
      19: $VV4,
      21: $VW4,
      22: 1078,
      96: [1, 1089],
      104: [1, 1090],
      105: [1, 1091],
      106: 1088,
      177: 1079,
      187: 1077,
      192: 1082,
      193: 1083,
      194: 1084,
      197: 1087,
      200: [1, 1092],
      201: [1, 1093],
      202: [1, 1098],
      203: [1, 1099],
      204: [1, 1100],
      205: [1, 1101],
      206: [1, 1094],
      207: [1, 1095],
      208: [1, 1096],
      209: [1, 1097],
      210: 1081,
      211: $VX4
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 1102]
    }, o($Vt1, $Vk3), o($Vp1, $VY4), {
      117: $VZ4,
      130: 1103,
      131: $V$3
    }, o($V14, $V_4), o($VG2, $VH2, {
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      127: 1104,
      144: $VJ2,
      185: $VK2
    }), o($V14, $V$4), o($V14, $V44, {
      135: 1105,
      139: 1106,
      136: $V54,
      137: $V64
    }), o($VG2, $VH2, {
      140: 368,
      142: 369,
      143: 370,
      134: 1107,
      117: $V05,
      131: $V05,
      144: $VJ2,
      185: $VK2
    }), o($VG2, $VH2, {
      140: 368,
      142: 369,
      143: 370,
      134: 1108,
      117: $V15,
      131: $V15,
      144: $VJ2,
      185: $VK2
    }), o($Va4, $V25), o($Va4, $V35), o($Va4, $V45), o($Va4, $V55), {
      19: $V65,
      21: $V75,
      22: 1110,
      125: 1109,
      195: $V85,
      210: 1113,
      211: $V95
    }, o($VG2, $VH2, {
      143: 370,
      122: 1116,
      126: 1117,
      127: 1118,
      128: 1119,
      132: 1120,
      133: 1121,
      134: 1122,
      140: 1123,
      142: 1124,
      144: $VJ2,
      185: $Va5
    }), o($V74, [2, 172]), o($V74, [2, 177]), o($Va4, $Vb5), o($Va4, $Vc5), o($Va4, $Vd5), o($Va4, $Vq), o($Va4, $Vr), o($Va4, $Vs), o($Va4, $Vt), o($Va4, $Vu), o($VG2, [2, 162]), o($VG2, $Vc5), o($VG2, $Vd5), o($VG2, $Vq), o($VG2, $Vr), o($VG2, $Vs), o($VG2, $Vt), o($VG2, $Vu), o($Vc4, [2, 265]), o($Vd4, [2, 141]), o($VF1, [2, 184]), o($VF1, [2, 191], {
      166: 1126,
      175: $Ve5
    }), o($VF1, [2, 192], {
      168: 1128,
      175: $Vf5
    }), o($VF1, [2, 193], {
      170: 1130,
      175: $Vg5
    }), o($Vh5, [2, 185]), o($Vh5, [2, 187]), o($Vh5, [2, 189]), {
      19: $Vi5,
      21: $Vj5,
      22: 1132,
      96: $Vk5,
      104: $Vl5,
      105: $Vm5,
      106: 1143,
      177: 1133,
      181: $Vn5,
      192: 1137,
      193: 1138,
      194: 1139,
      197: 1142,
      200: $Vo5,
      201: $Vp5,
      202: $Vq5,
      203: $Vr5,
      204: $Vs5,
      205: $Vt5,
      206: $Vu5,
      207: $Vv5,
      208: $Vw5,
      209: $Vx5,
      210: 1136,
      211: $Vy5
    }, o($VF1, [2, 194]), o($VF1, [2, 199]), o($Vh5, [2, 195], {
      172: 1157
    }), o($VF1, [2, 203]), o($VF1, [2, 208]), o($Vh5, [2, 204], {
      179: 1158
    }), o($VF1, [2, 210]), o($VF1, [2, 216]), o($Vh5, [2, 212], {
      184: 1159
    }), o($VF1, [2, 211]), o($Vi4, $Vz5), o($Vi4, $VA5), {
      19: $VU2,
      21: $VV2,
      22: 1161,
      83: 1160,
      210: 401,
      211: $Va3
    }, o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Va1, $Vy3), o($Vx, $Vg, {
      50: 1162,
      36: 1163,
      39: $Vy
    }), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 1164
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 1168],
      21: [1, 1172],
      22: 1166,
      32: 1165,
      196: 1167,
      210: 1169,
      211: [1, 1171],
      212: [1, 1170]
    }, {
      115: [1, 1173],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 1174
    }), o($Vn2, $Vr1, {
      89: 1175
    }), o($Vo1, $Vs1, {
      95: 727,
      91: 1176,
      97: $Vy4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 1177]
    }, o($Vn2, $VJ1), {
      66: [1, 1178]
    }, o($Vu2, $Vv2, {
      79: 1179,
      80: 1180,
      188: 1181,
      186: [1, 1182]
    }), o($Vw2, $Vv2, {
      79: 1183,
      80: 1184,
      188: 1185,
      186: $VC5
    }), o($Vm1, $Vz2, {
      95: 452,
      91: 1187,
      97: $Vq3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 1188,
      91: 1189,
      87: 1190,
      95: 1191,
      101: 1193,
      103: 1194,
      97: $VD5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 1188,
      91: 1189,
      87: 1190,
      95: 1191,
      101: 1193,
      103: 1194,
      97: $VD5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 1188,
      91: 1189,
      87: 1190,
      95: 1191,
      101: 1193,
      103: 1194,
      97: $VD5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 1195,
      80: 1196,
      188: 1197,
      186: [1, 1198]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1199],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1200,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 1201]
    }, o($VH1, $Vk3), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 1202
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 1206],
      21: [1, 1210],
      22: 1204,
      32: 1203,
      196: 1205,
      210: 1207,
      211: [1, 1209],
      212: [1, 1208]
    }, {
      115: [1, 1211],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 1212
    }), o($Vn2, $Vr1, {
      89: 1213
    }), o($Vo1, $Vs1, {
      95: 774,
      91: 1214,
      97: $Vz4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 1215]
    }, o($Vn2, $VJ1), {
      66: [1, 1216]
    }, o($Vu2, $Vv2, {
      79: 1217,
      80: 1218,
      188: 1219,
      186: [1, 1220]
    }), o($Vw2, $Vv2, {
      79: 1221,
      80: 1222,
      188: 1223,
      186: $VE5
    }), o($Vm1, $Vz2, {
      95: 488,
      91: 1225,
      97: $Vs3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 1226,
      91: 1227,
      87: 1228,
      95: 1229,
      101: 1231,
      103: 1232,
      97: $VF5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 1226,
      91: 1227,
      87: 1228,
      95: 1229,
      101: 1231,
      103: 1232,
      97: $VF5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 1226,
      91: 1227,
      87: 1228,
      95: 1229,
      101: 1231,
      103: 1232,
      97: $VF5,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 1233,
      80: 1234,
      188: 1235,
      186: [1, 1236]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1237],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1238,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 1239]
    }, o($VH1, $Vk3), o($V81, $Vx3), o($Va1, $Vy3), o($Va1, $Vz3), o($Va1, $VA3), {
      66: [1, 1240]
    }, o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), o($Vw2, $Vv2, {
      80: 828,
      188: 829,
      79: 1241,
      186: $VA4
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1242,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 828,
      188: 829,
      79: 1243,
      186: $VA4
    }), o($Vo1, $Vz2, {
      95: 526,
      91: 1244,
      97: $Vw3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VB3), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 1245,
      189: [1, 1246]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1247,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 1248,
      189: [1, 1249]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1250,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 1251,
      189: [1, 1252]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1253,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 1254]
    }, o($Vt1, $VJ1), {
      96: [1, 1256],
      102: 1255,
      104: [1, 1257],
      105: [1, 1258],
      106: 1259,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1260]
    }, {
      117: [1, 1261]
    }, o($Vt1, $Vg4), {
      19: [1, 1264],
      21: [1, 1267],
      22: 1263,
      83: 1262,
      210: 1265,
      211: [1, 1266]
    }, o($V81, $Va2, {
      48: 1268,
      49: [1, 1269]
    }), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 1270,
      63: 1271,
      68: 1272,
      40: 1273,
      74: 1274,
      114: 1278,
      75: [1, 1275],
      76: [1, 1276],
      77: [1, 1277],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 1279,
      60: 1280,
      69: 1281,
      88: 1282,
      90: 1283,
      91: 1287,
      95: 1288,
      92: [1, 1284],
      93: [1, 1285],
      94: [1, 1286],
      97: $VG5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 1290,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 1291
    }), o($Vo1, $Vn1, {
      78: 1292
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 1293
    }), o($Vm1, $Vs1, {
      95: 875,
      91: 1294,
      97: $VC4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 1295
    }), o($Vt1, $Vu1, {
      82: 1296
    }), o($Vt1, $Vu1, {
      82: 1297
    }), o($Vo1, $Vv1, {
      101: 879,
      103: 880,
      87: 1298,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 1299
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 1303],
      21: [1, 1307],
      22: 1301,
      32: 1300,
      196: 1302,
      210: 1304,
      211: [1, 1306],
      212: [1, 1305]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 1308
    }), o($VH1, $VI1), {
      115: [1, 1309],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 1310]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 1312],
      102: 1311,
      104: [1, 1313],
      105: [1, 1314],
      106: 1315,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1316]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 1317,
      63: 1318,
      68: 1319,
      40: 1320,
      74: 1321,
      114: 1325,
      75: [1, 1322],
      76: [1, 1323],
      77: [1, 1324],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 1326,
      60: 1327,
      69: 1328,
      88: 1329,
      90: 1330,
      91: 1334,
      95: 1335,
      92: [1, 1331],
      93: [1, 1332],
      94: [1, 1333],
      97: $VH5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 1337,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 1338
    }), o($Vo1, $Vn1, {
      78: 1339
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 1340
    }), o($Vm1, $Vs1, {
      95: 911,
      91: 1341,
      97: $VD4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 1342
    }), o($Vt1, $Vu1, {
      82: 1343
    }), o($Vt1, $Vu1, {
      82: 1344
    }), o($Vo1, $Vv1, {
      101: 915,
      103: 916,
      87: 1345,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 1346
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 1350],
      21: [1, 1354],
      22: 1348,
      32: 1347,
      196: 1349,
      210: 1351,
      211: [1, 1353],
      212: [1, 1352]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 1355
    }), o($VH1, $VI1), {
      115: [1, 1356],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 1357]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 1359],
      102: 1358,
      104: [1, 1360],
      105: [1, 1361],
      106: 1362,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1363]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($Vo1, $VY4), o($VH4, $Vv2, {
      80: 932,
      188: 933,
      79: 1364,
      186: $VI4
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1365,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH4, $Vv2, {
      80: 932,
      188: 933,
      79: 1366,
      186: $VI4
    }), o($VF3, $Vz2, {
      95: 586,
      91: 1367,
      97: $VD3,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA2), o($VF4, $Vb3), o($VC3, $VB3), o($VI5, $VM3), o($VE3, $VN3), o($VI5, $VO3, {
      31: 1368,
      189: [1, 1369]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1370,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VC3, $VT3), o($VF3, $VN3), o($VC3, $VO3, {
      31: 1371,
      189: [1, 1372]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1373,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VJ5, $VU3), o($VG3, $VN3), o($VJ5, $VO3, {
      31: 1374,
      189: [1, 1375]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1376,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VH3, $VV3), o($VI3, $VW3), o($VI3, $VX3), o($VI3, $VY3), {
      96: [1, 1377]
    }, o($VI3, $VJ1), {
      96: [1, 1379],
      102: 1378,
      104: [1, 1380],
      105: [1, 1381],
      106: 1382,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1383]
    }, {
      117: [1, 1384]
    }, o($VI3, $Vg4), {
      19: [1, 1387],
      21: [1, 1390],
      22: 1386,
      83: 1385,
      210: 1388,
      211: [1, 1389]
    }, o($VK3, $Vx3), o($VK3, $Va2, {
      48: 1391,
      49: [1, 1392]
    }), o($VC3, $Vb2), o($VC, $VD, {
      61: 1393,
      63: 1394,
      68: 1395,
      40: 1396,
      74: 1397,
      114: 1401,
      47: $Vd1,
      49: $Vd1,
      66: $Vd1,
      75: [1, 1398],
      76: [1, 1399],
      77: [1, 1400]
    }), o($VC3, $Vc2), o($VC3, $Vf1, {
      64: 1402,
      60: 1403,
      69: 1404,
      88: 1405,
      90: 1406,
      91: 1410,
      95: 1411,
      92: [1, 1407],
      93: [1, 1408],
      94: [1, 1409],
      97: $VK5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 1413,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VC3, $Vd2), o($VE3, $Vn1, {
      78: 1414
    }), o($VF3, $Vn1, {
      78: 1415
    }), o($VJ5, $Vf2), o($VJ5, $Vg2), o($VH3, $Vr1, {
      89: 1416
    }), o($VE3, $Vs1, {
      95: 980,
      91: 1417,
      97: $VL4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VI3, $Vu1, {
      82: 1418
    }), o($VI3, $Vu1, {
      82: 1419
    }), o($VI3, $Vu1, {
      82: 1420
    }), o($VF3, $Vv1, {
      101: 984,
      103: 985,
      87: 1421,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VG3, $Vn1, {
      78: 1422
    }), o($VJ5, $V11), o($VJ5, $V21), {
      19: [1, 1426],
      21: [1, 1430],
      22: 1424,
      32: 1423,
      196: 1425,
      210: 1427,
      211: [1, 1429],
      212: [1, 1428]
    }, o($VH3, $VA1), o($VH3, $VB1), o($VH3, $VC1), o($VH3, $VD1), o($VI3, $VE1), o($VF1, $VG1, {
      158: 1431
    }), o($VJ3, $VI1), {
      115: [1, 1432],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 1433]
    }, o($VH3, $VJ1), o($VI3, $Vq), o($VI3, $Vr), {
      96: [1, 1435],
      102: 1434,
      104: [1, 1436],
      105: [1, 1437],
      106: 1438,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1439]
    }, o($VI3, $Vt), o($VI3, $Vu), o($VC3, $Vb2), o($VC, $VD, {
      61: 1440,
      63: 1441,
      68: 1442,
      40: 1443,
      74: 1444,
      114: 1448,
      47: $Vd1,
      49: $Vd1,
      66: $Vd1,
      75: [1, 1445],
      76: [1, 1446],
      77: [1, 1447]
    }), o($VC3, $Vc2), o($VC3, $Vf1, {
      64: 1449,
      60: 1450,
      69: 1451,
      88: 1452,
      90: 1453,
      91: 1457,
      95: 1458,
      92: [1, 1454],
      93: [1, 1455],
      94: [1, 1456],
      97: $VL5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 1460,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VC3, $Vd2), o($VE3, $Vn1, {
      78: 1461
    }), o($VF3, $Vn1, {
      78: 1462
    }), o($VJ5, $Vf2), o($VJ5, $Vg2), o($VH3, $Vr1, {
      89: 1463
    }), o($VE3, $Vs1, {
      95: 1016,
      91: 1464,
      97: $VM4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VI3, $Vu1, {
      82: 1465
    }), o($VI3, $Vu1, {
      82: 1466
    }), o($VI3, $Vu1, {
      82: 1467
    }), o($VF3, $Vv1, {
      101: 1020,
      103: 1021,
      87: 1468,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VG3, $Vn1, {
      78: 1469
    }), o($VJ5, $V11), o($VJ5, $V21), {
      19: [1, 1473],
      21: [1, 1477],
      22: 1471,
      32: 1470,
      196: 1472,
      210: 1474,
      211: [1, 1476],
      212: [1, 1475]
    }, o($VH3, $VA1), o($VH3, $VB1), o($VH3, $VC1), o($VH3, $VD1), o($VI3, $VE1), o($VF1, $VG1, {
      158: 1478
    }), o($VJ3, $VI1), {
      115: [1, 1479],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 1480]
    }, o($VH3, $VJ1), o($VI3, $Vq), o($VI3, $Vr), {
      96: [1, 1482],
      102: 1481,
      104: [1, 1483],
      105: [1, 1484],
      106: 1485,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1486]
    }, o($VI3, $Vt), o($VI3, $Vu), {
      189: [1, 1489],
      190: 1487,
      191: [1, 1488]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 1490,
      199: 1491,
      107: [1, 1492]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 1495],
      190: 1493,
      191: [1, 1494]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 1496,
      199: 1497,
      107: [1, 1498]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      189: [1, 1501],
      190: 1499,
      191: [1, 1500]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 1502,
      199: 1503,
      107: [1, 1504]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), {
      19: [1, 1507],
      21: [1, 1510],
      22: 1506,
      83: 1505,
      210: 1508,
      211: [1, 1509]
    }, o($V14, $VS5), o($V14, $VT5), o($V14, $VU5), o($Va4, $VV5), o($Va4, $VW5), o($Va4, $VX5), o($Vx, $Vg, {
      42: 1511,
      43: 1512,
      51: 1513,
      55: 1514,
      36: 1515,
      39: $Vy
    }), o($VY5, $Ve4), o($VY5, $Vf4), o($VY5, $Vq), o($VY5, $Vr), o($VY5, $Vt), o($VY5, $Vu), {
      66: [1, 1516]
    }, {
      66: $VZ3
    }, {
      66: $V_3,
      129: 1517,
      130: 1518,
      131: $VZ5
    }, {
      66: $V04
    }, o($V_5, $V24), o($V_5, $V34), o($V_5, $V44, {
      135: 1520,
      138: 1521,
      139: 1524,
      136: $V$5,
      137: $V06
    }), o($V74, $V84, {
      151: 660,
      141: 1525,
      146: 1526,
      147: 1527,
      150: 1528,
      65: [1, 1529],
      156: $V94
    }), o($V16, $Vb4), {
      19: [1, 1533],
      21: [1, 1537],
      22: 1531,
      145: 1530,
      196: 1532,
      210: 1534,
      211: [1, 1536],
      212: [1, 1535]
    }, o($Vh5, [2, 186]), {
      19: $Vi5,
      21: $Vj5,
      22: 1132,
      210: 1136,
      211: $Vy5
    }, o($Vh5, [2, 188]), {
      96: $Vk5,
      104: $Vl5,
      105: $Vm5,
      106: 1143,
      177: 1133,
      192: 1137,
      193: 1138,
      194: 1139,
      197: 1142,
      200: $Vo5,
      201: $Vp5,
      202: $Vq5,
      203: $Vr5,
      204: $Vs5,
      205: $Vt5,
      206: $Vu5,
      207: $Vv5,
      208: $Vw5,
      209: $Vx5
    }, o($Vh5, [2, 190]), {
      181: $Vn5
    }, o($Vh5, $V26, {
      176: 1538,
      174: $V36
    }), o($Vh5, $V26, {
      176: 1540,
      174: $V36
    }), o($Vh5, $V26, {
      176: 1541,
      174: $V36
    }), o($V46, $Vq), o($V46, $Vr), o($V46, $Vj4), o($V46, $Vk4), o($V46, $Vl4), o($V46, $Vt), o($V46, $Vu), o($V46, $Vm4), o($V46, $Vn4, {
      198: 1542,
      199: 1543,
      107: [1, 1544]
    }), o($V46, $Vo4), o($V46, $Vp4), o($V46, $Vq4), o($V46, $Vr4), o($V46, $Vs4), o($V46, $Vt4), o($V46, $Vu4), o($V46, $Vv4), o($V46, $Vw4), o($V56, $Vg3), o($V56, $Vh3), o($V56, $Vi3), o($V56, $Vj3), o($VF1, [2, 197], {
      166: 1545,
      175: $Ve5
    }), o($VF1, [2, 206], {
      168: 1546,
      175: $Vf5
    }), o($VF1, [2, 214], {
      170: 1547,
      175: $Vg5
    }), o($Vi4, $V66), o($Vi4, $VE1), o($Va1, $Vr3), o($VC, $VD, {
      58: 1548,
      60: 1549,
      62: 1550,
      63: 1551,
      69: 1554,
      71: 1555,
      68: 1556,
      40: 1557,
      88: 1558,
      90: 1559,
      83: 1561,
      84: 1562,
      85: 1563,
      74: 1564,
      91: 1571,
      22: 1572,
      87: 1574,
      114: 1575,
      95: 1576,
      210: 1579,
      101: 1580,
      103: 1581,
      19: [1, 1578],
      21: [1, 1583],
      65: [1, 1552],
      67: [1, 1553],
      75: [1, 1565],
      76: [1, 1566],
      77: [1, 1567],
      81: [1, 1560],
      92: [1, 1568],
      93: [1, 1569],
      94: [1, 1570],
      97: $V76,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 1573],
      211: [1, 1582]
    }), o($Vw2, $Vv2, {
      80: 1184,
      188: 1185,
      79: 1584,
      186: $VC5
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1585,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 1184,
      188: 1185,
      79: 1586,
      186: $VC5
    }), o($Vo1, $Vz2, {
      95: 727,
      91: 1587,
      97: $Vy4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 1588,
      189: [1, 1589]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1590,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 1591,
      189: [1, 1592]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1593,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 1594]
    }, o($Vt1, $VJ1), {
      96: [1, 1596],
      102: 1595,
      104: [1, 1597],
      105: [1, 1598],
      106: 1599,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1600]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 1601,
      189: [1, 1602]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1603,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 1604]
    }, {
      19: [1, 1607],
      21: [1, 1610],
      22: 1606,
      83: 1605,
      210: 1608,
      211: [1, 1609]
    }, o($Vw2, $Vv2, {
      80: 1222,
      188: 1223,
      79: 1611,
      186: $VE5
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1612,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 1222,
      188: 1223,
      79: 1613,
      186: $VE5
    }), o($Vo1, $Vz2, {
      95: 774,
      91: 1614,
      97: $Vz4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 1615,
      189: [1, 1616]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1617,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 1618,
      189: [1, 1619]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1620,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 1621]
    }, o($Vt1, $VJ1), {
      96: [1, 1623],
      102: 1622,
      104: [1, 1624],
      105: [1, 1625],
      106: 1626,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 1627]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 1628,
      189: [1, 1629]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 1630,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 1631]
    }, {
      19: [1, 1634],
      21: [1, 1637],
      22: 1633,
      83: 1632,
      210: 1635,
      211: [1, 1636]
    }, o($Va1, $VE4), o($Va1, $VU3), {
      117: [1, 1638]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1639,
      210: 52,
      211: $Vp
    }, {
      19: $V86,
      21: $V96,
      22: 1641,
      96: [1, 1652],
      104: [1, 1653],
      105: [1, 1654],
      106: 1651,
      177: 1642,
      187: 1640,
      192: 1645,
      193: 1646,
      194: 1647,
      197: 1650,
      200: [1, 1655],
      201: [1, 1656],
      202: [1, 1661],
      203: [1, 1662],
      204: [1, 1663],
      205: [1, 1664],
      206: [1, 1657],
      207: [1, 1658],
      208: [1, 1659],
      209: [1, 1660],
      210: 1644,
      211: $Va6
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1665,
      210: 52,
      211: $Vp
    }, {
      19: $Vb6,
      21: $Vc6,
      22: 1667,
      96: [1, 1678],
      104: [1, 1679],
      105: [1, 1680],
      106: 1677,
      177: 1668,
      187: 1666,
      192: 1671,
      193: 1672,
      194: 1673,
      197: 1676,
      200: [1, 1681],
      201: [1, 1682],
      202: [1, 1687],
      203: [1, 1688],
      204: [1, 1689],
      205: [1, 1690],
      206: [1, 1683],
      207: [1, 1684],
      208: [1, 1685],
      209: [1, 1686],
      210: 1670,
      211: $Vd6
    }, o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1691,
      210: 52,
      211: $Vp
    }, {
      19: $Ve6,
      21: $Vf6,
      22: 1693,
      96: [1, 1704],
      104: [1, 1705],
      105: [1, 1706],
      106: 1703,
      177: 1694,
      187: 1692,
      192: 1697,
      193: 1698,
      194: 1699,
      197: 1702,
      200: [1, 1707],
      201: [1, 1708],
      202: [1, 1713],
      203: [1, 1714],
      204: [1, 1715],
      205: [1, 1716],
      206: [1, 1709],
      207: [1, 1710],
      208: [1, 1711],
      209: [1, 1712],
      210: 1696,
      211: $Vg6
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 1717]
    }, o($Vt1, $Vk3), o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Va1, $Vy3), o($Vx, $Vg, {
      50: 1718,
      36: 1719,
      39: $Vy
    }), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 1720
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 1724],
      21: [1, 1728],
      22: 1722,
      32: 1721,
      196: 1723,
      210: 1725,
      211: [1, 1727],
      212: [1, 1726]
    }, {
      115: [1, 1729],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 1730
    }), o($Vn2, $Vr1, {
      89: 1731
    }), o($Vo1, $Vs1, {
      95: 1288,
      91: 1732,
      97: $VG5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 1733]
    }, o($Vn2, $VJ1), {
      66: [1, 1734]
    }, o($Vu2, $Vv2, {
      79: 1735,
      80: 1736,
      188: 1737,
      186: [1, 1738]
    }), o($Vw2, $Vv2, {
      79: 1739,
      80: 1740,
      188: 1741,
      186: $Vh6
    }), o($Vm1, $Vz2, {
      95: 875,
      91: 1743,
      97: $VC4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 1744,
      91: 1745,
      87: 1746,
      95: 1747,
      101: 1749,
      103: 1750,
      97: $Vi6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 1744,
      91: 1745,
      87: 1746,
      95: 1747,
      101: 1749,
      103: 1750,
      97: $Vi6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 1744,
      91: 1745,
      87: 1746,
      95: 1747,
      101: 1749,
      103: 1750,
      97: $Vi6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 1751,
      80: 1752,
      188: 1753,
      186: [1, 1754]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1755],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1756,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 1757]
    }, o($VH1, $Vk3), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 1758
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 1762],
      21: [1, 1766],
      22: 1760,
      32: 1759,
      196: 1761,
      210: 1763,
      211: [1, 1765],
      212: [1, 1764]
    }, {
      115: [1, 1767],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 1768
    }), o($Vn2, $Vr1, {
      89: 1769
    }), o($Vo1, $Vs1, {
      95: 1335,
      91: 1770,
      97: $VH5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 1771]
    }, o($Vn2, $VJ1), {
      66: [1, 1772]
    }, o($Vu2, $Vv2, {
      79: 1773,
      80: 1774,
      188: 1775,
      186: [1, 1776]
    }), o($Vw2, $Vv2, {
      79: 1777,
      80: 1778,
      188: 1779,
      186: $Vj6
    }), o($Vm1, $Vz2, {
      95: 911,
      91: 1781,
      97: $VD4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 1782,
      91: 1783,
      87: 1784,
      95: 1785,
      101: 1787,
      103: 1788,
      97: $Vk6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 1782,
      91: 1783,
      87: 1784,
      95: 1785,
      101: 1787,
      103: 1788,
      97: $Vk6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 1782,
      91: 1783,
      87: 1784,
      95: 1785,
      101: 1787,
      103: 1788,
      97: $Vk6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 1789,
      80: 1790,
      188: 1791,
      186: [1, 1792]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1793],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1794,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 1795]
    }, o($VH1, $Vk3), o($VC3, $VU3), {
      117: [1, 1796]
    }, o($VC3, $VM3), o($VF4, $VV3), o($VG4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1797,
      210: 52,
      211: $Vp
    }, {
      19: $Vl6,
      21: $Vm6,
      22: 1799,
      96: [1, 1810],
      104: [1, 1811],
      105: [1, 1812],
      106: 1809,
      177: 1800,
      187: 1798,
      192: 1803,
      193: 1804,
      194: 1805,
      197: 1808,
      200: [1, 1813],
      201: [1, 1814],
      202: [1, 1819],
      203: [1, 1820],
      204: [1, 1821],
      205: [1, 1822],
      206: [1, 1815],
      207: [1, 1816],
      208: [1, 1817],
      209: [1, 1818],
      210: 1802,
      211: $Vn6
    }, o($VH4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1823,
      210: 52,
      211: $Vp
    }, {
      19: $Vo6,
      21: $Vp6,
      22: 1825,
      96: [1, 1836],
      104: [1, 1837],
      105: [1, 1838],
      106: 1835,
      177: 1826,
      187: 1824,
      192: 1829,
      193: 1830,
      194: 1831,
      197: 1834,
      200: [1, 1839],
      201: [1, 1840],
      202: [1, 1845],
      203: [1, 1846],
      204: [1, 1847],
      205: [1, 1848],
      206: [1, 1841],
      207: [1, 1842],
      208: [1, 1843],
      209: [1, 1844],
      210: 1828,
      211: $Vq6
    }, o($VJ4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 1849,
      210: 52,
      211: $Vp
    }, {
      19: $Vr6,
      21: $Vs6,
      22: 1851,
      96: [1, 1862],
      104: [1, 1863],
      105: [1, 1864],
      106: 1861,
      177: 1852,
      187: 1850,
      192: 1855,
      193: 1856,
      194: 1857,
      197: 1860,
      200: [1, 1865],
      201: [1, 1866],
      202: [1, 1871],
      203: [1, 1872],
      204: [1, 1873],
      205: [1, 1874],
      206: [1, 1867],
      207: [1, 1868],
      208: [1, 1869],
      209: [1, 1870],
      210: 1854,
      211: $Vt6
    }, o($VI3, $Vb3), o($VI3, $Vc3), o($VI3, $Vd3), o($VI3, $Ve3), o($VI3, $Vf3), {
      107: [1, 1875]
    }, o($VI3, $Vk3), o($VG3, $VY4), o($VJ3, $VB5), o($VJ3, $VE1), o($VJ3, $Vq), o($VJ3, $Vr), o($VJ3, $Vt), o($VJ3, $Vu), o($VC3, $Vy3), o($Vx, $Vg, {
      50: 1876,
      36: 1877,
      39: $Vy
    }), o($VC3, $Vz3), o($VC3, $Vk2), o($VC3, $Vf2), o($VC3, $Vg2), o($VF3, $Vn1, {
      78: 1878
    }), o($VC3, $V11), o($VC3, $V21), {
      19: [1, 1882],
      21: [1, 1886],
      22: 1880,
      32: 1879,
      196: 1881,
      210: 1883,
      211: [1, 1885],
      212: [1, 1884]
    }, {
      115: [1, 1887],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VC3, $VA3), o($VC3, $Vm2), o($VF3, $Vn1, {
      78: 1888
    }), o($VF4, $Vr1, {
      89: 1889
    }), o($VF3, $Vs1, {
      95: 1411,
      91: 1890,
      97: $VK5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA1), o($VF4, $VB1), o($VF4, $VC1), o($VF4, $VD1), {
      96: [1, 1891]
    }, o($VF4, $VJ1), {
      66: [1, 1892]
    }, o($VG4, $Vv2, {
      79: 1893,
      80: 1894,
      188: 1895,
      186: [1, 1896]
    }), o($VH4, $Vv2, {
      79: 1897,
      80: 1898,
      188: 1899,
      186: $Vu6
    }), o($VE3, $Vz2, {
      95: 980,
      91: 1901,
      97: $VL4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VH3, $VA2), o($VF3, $VB2, {
      86: 1902,
      91: 1903,
      87: 1904,
      95: 1905,
      101: 1907,
      103: 1908,
      97: $Vv6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VD2, {
      86: 1902,
      91: 1903,
      87: 1904,
      95: 1905,
      101: 1907,
      103: 1908,
      97: $Vv6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VE2, {
      86: 1902,
      91: 1903,
      87: 1904,
      95: 1905,
      101: 1907,
      103: 1908,
      97: $Vv6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VJ3, $VF2), o($VJ4, $Vv2, {
      79: 1909,
      80: 1910,
      188: 1911,
      186: [1, 1912]
    }), o($VJ5, $VT1), o($VJ5, $Vl), o($VJ5, $Vm), o($VJ5, $Vq), o($VJ5, $Vr), o($VJ5, $Vs), o($VJ5, $Vt), o($VJ5, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1913],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1914,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH3, $Vb3), o($VJ3, $Vc3), o($VJ3, $Vd3), o($VJ3, $Ve3), o($VJ3, $Vf3), {
      107: [1, 1915]
    }, o($VJ3, $Vk3), o($VC3, $Vz3), o($VC3, $Vk2), o($VC3, $Vf2), o($VC3, $Vg2), o($VF3, $Vn1, {
      78: 1916
    }), o($VC3, $V11), o($VC3, $V21), {
      19: [1, 1920],
      21: [1, 1924],
      22: 1918,
      32: 1917,
      196: 1919,
      210: 1921,
      211: [1, 1923],
      212: [1, 1922]
    }, {
      115: [1, 1925],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VC3, $VA3), o($VC3, $Vm2), o($VF3, $Vn1, {
      78: 1926
    }), o($VF4, $Vr1, {
      89: 1927
    }), o($VF3, $Vs1, {
      95: 1458,
      91: 1928,
      97: $VL5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA1), o($VF4, $VB1), o($VF4, $VC1), o($VF4, $VD1), {
      96: [1, 1929]
    }, o($VF4, $VJ1), {
      66: [1, 1930]
    }, o($VG4, $Vv2, {
      79: 1931,
      80: 1932,
      188: 1933,
      186: [1, 1934]
    }), o($VH4, $Vv2, {
      79: 1935,
      80: 1936,
      188: 1937,
      186: $Vw6
    }), o($VE3, $Vz2, {
      95: 1016,
      91: 1939,
      97: $VM4,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VH3, $VA2), o($VF3, $VB2, {
      86: 1940,
      91: 1941,
      87: 1942,
      95: 1943,
      101: 1945,
      103: 1946,
      97: $Vx6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VD2, {
      86: 1940,
      91: 1941,
      87: 1942,
      95: 1943,
      101: 1945,
      103: 1946,
      97: $Vx6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VE2, {
      86: 1940,
      91: 1941,
      87: 1942,
      95: 1943,
      101: 1945,
      103: 1946,
      97: $Vx6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VJ3, $VF2), o($VJ4, $Vv2, {
      79: 1947,
      80: 1948,
      188: 1949,
      186: [1, 1950]
    }), o($VJ5, $VT1), o($VJ5, $Vl), o($VJ5, $Vm), o($VJ5, $Vq), o($VJ5, $Vr), o($VJ5, $Vs), o($VJ5, $Vt), o($VJ5, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 1951],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 1952,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH3, $Vb3), o($VJ3, $Vc3), o($VJ3, $Vd3), o($VJ3, $Ve3), o($VJ3, $Vf3), {
      107: [1, 1953]
    }, o($VJ3, $Vk3), o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VO4,
      21: $VP4,
      22: 1955,
      83: 1954,
      210: 1029,
      211: $VQ4
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VS4,
      21: $VT4,
      22: 1957,
      83: 1956,
      210: 1055,
      211: $VU4
    }, o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $VV4,
      21: $VW4,
      22: 1959,
      83: 1958,
      210: 1081,
      211: $VX4
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy6, $Vz6, {
      148: 1960,
      149: 1961,
      152: $VA6,
      153: $VB6,
      154: $VC6,
      155: $VD6
    }), o($VE6, $VF6), o($VG6, $VH6, {
      52: 1966
    }), o($VI6, $VJ6, {
      56: 1967
    }), o($VC, $VD, {
      59: 1968,
      69: 1969,
      71: 1970,
      72: 1971,
      88: 1974,
      90: 1975,
      83: 1977,
      84: 1978,
      85: 1979,
      74: 1980,
      40: 1981,
      91: 1985,
      22: 1986,
      87: 1988,
      114: 1989,
      95: 1993,
      210: 1996,
      101: 1997,
      103: 1998,
      19: [1, 1995],
      21: [1, 2000],
      65: [1, 1972],
      67: [1, 1973],
      75: [1, 1990],
      76: [1, 1991],
      77: [1, 1992],
      81: [1, 1976],
      92: [1, 1982],
      93: [1, 1983],
      94: [1, 1984],
      97: $VK6,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 1987],
      211: [1, 1999]
    }), o($Vy6, $Vz6, {
      149: 1961,
      148: 2001,
      152: $VA6,
      153: $VB6,
      154: $VC6,
      155: $VD6
    }), {
      66: $VZ4,
      130: 2002,
      131: $VZ5
    }, o($V_5, $V_4), o($VG2, $VH2, {
      143: 370,
      132: 1120,
      133: 1121,
      134: 1122,
      140: 1123,
      142: 1124,
      127: 2003,
      144: $VJ2,
      185: $Va5
    }), o($V_5, $V$4), o($V_5, $V44, {
      135: 2004,
      139: 2005,
      136: $V$5,
      137: $V06
    }), o($VG2, $VH2, {
      143: 370,
      140: 1123,
      142: 1124,
      134: 2006,
      66: $V05,
      131: $V05,
      144: $VJ2,
      185: $Va5
    }), o($VG2, $VH2, {
      143: 370,
      140: 1123,
      142: 1124,
      134: 2007,
      66: $V15,
      131: $V15,
      144: $VJ2,
      185: $Va5
    }), o($V16, $V25), o($V16, $V35), o($V16, $V45), o($V16, $V55), {
      19: $V65,
      21: $V75,
      22: 1110,
      125: 2008,
      195: $V85,
      210: 1113,
      211: $V95
    }, o($VG2, $VH2, {
      143: 370,
      126: 1117,
      127: 1118,
      128: 1119,
      132: 1120,
      133: 1121,
      134: 1122,
      140: 1123,
      142: 1124,
      122: 2009,
      144: $VJ2,
      185: $Va5
    }), o($V16, $Vb5), o($V16, $Vc5), o($V16, $Vd5), o($V16, $Vq), o($V16, $Vr), o($V16, $Vs), o($V16, $Vt), o($V16, $Vu), o($Vh5, [2, 200]), o($Vh5, [2, 202]), o($Vh5, [2, 209]), o($Vh5, [2, 217]), o($V46, $Vz5), o($V46, $VA5), {
      19: $Vi5,
      21: $Vj5,
      22: 2011,
      83: 2010,
      210: 1136,
      211: $Vy5
    }, o($Vh5, [2, 196]), o($Vh5, [2, 205]), o($Vh5, [2, 213]), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 2012,
      63: 2013,
      68: 2014,
      40: 2015,
      74: 2016,
      114: 2020,
      75: [1, 2017],
      76: [1, 2018],
      77: [1, 2019],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 2021,
      60: 2022,
      69: 2023,
      88: 2024,
      90: 2025,
      91: 2029,
      95: 2030,
      92: [1, 2026],
      93: [1, 2027],
      94: [1, 2028],
      97: $VL6,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 2032,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 2033
    }), o($Vo1, $Vn1, {
      78: 2034
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 2035
    }), o($Vm1, $Vs1, {
      95: 1576,
      91: 2036,
      97: $V76,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 2037
    }), o($Vt1, $Vu1, {
      82: 2038
    }), o($Vt1, $Vu1, {
      82: 2039
    }), o($Vo1, $Vv1, {
      101: 1580,
      103: 1581,
      87: 2040,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 2041
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 2045],
      21: [1, 2049],
      22: 2043,
      32: 2042,
      196: 2044,
      210: 2046,
      211: [1, 2048],
      212: [1, 2047]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 2050
    }), o($VH1, $VI1), {
      115: [1, 2051],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 2052]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 2054],
      102: 2053,
      104: [1, 2055],
      105: [1, 2056],
      106: 2057,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2058]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($Va1, $VU3), {
      117: [1, 2059]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2060,
      210: 52,
      211: $Vp
    }, {
      19: $VM6,
      21: $VN6,
      22: 2062,
      96: [1, 2073],
      104: [1, 2074],
      105: [1, 2075],
      106: 2072,
      177: 2063,
      187: 2061,
      192: 2066,
      193: 2067,
      194: 2068,
      197: 2071,
      200: [1, 2076],
      201: [1, 2077],
      202: [1, 2082],
      203: [1, 2083],
      204: [1, 2084],
      205: [1, 2085],
      206: [1, 2078],
      207: [1, 2079],
      208: [1, 2080],
      209: [1, 2081],
      210: 2065,
      211: $VO6
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2086,
      210: 52,
      211: $Vp
    }, {
      19: $VP6,
      21: $VQ6,
      22: 2088,
      96: [1, 2099],
      104: [1, 2100],
      105: [1, 2101],
      106: 2098,
      177: 2089,
      187: 2087,
      192: 2092,
      193: 2093,
      194: 2094,
      197: 2097,
      200: [1, 2102],
      201: [1, 2103],
      202: [1, 2108],
      203: [1, 2109],
      204: [1, 2110],
      205: [1, 2111],
      206: [1, 2104],
      207: [1, 2105],
      208: [1, 2106],
      209: [1, 2107],
      210: 2091,
      211: $VR6
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 2112]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2113,
      210: 52,
      211: $Vp
    }, {
      19: $VS6,
      21: $VT6,
      22: 2115,
      96: [1, 2126],
      104: [1, 2127],
      105: [1, 2128],
      106: 2125,
      177: 2116,
      187: 2114,
      192: 2119,
      193: 2120,
      194: 2121,
      197: 2124,
      200: [1, 2129],
      201: [1, 2130],
      202: [1, 2135],
      203: [1, 2136],
      204: [1, 2137],
      205: [1, 2138],
      206: [1, 2131],
      207: [1, 2132],
      208: [1, 2133],
      209: [1, 2134],
      210: 2118,
      211: $VU6
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Va1, $VU3), {
      117: [1, 2139]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2140,
      210: 52,
      211: $Vp
    }, {
      19: $VV6,
      21: $VW6,
      22: 2142,
      96: [1, 2153],
      104: [1, 2154],
      105: [1, 2155],
      106: 2152,
      177: 2143,
      187: 2141,
      192: 2146,
      193: 2147,
      194: 2148,
      197: 2151,
      200: [1, 2156],
      201: [1, 2157],
      202: [1, 2162],
      203: [1, 2163],
      204: [1, 2164],
      205: [1, 2165],
      206: [1, 2158],
      207: [1, 2159],
      208: [1, 2160],
      209: [1, 2161],
      210: 2145,
      211: $VX6
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2166,
      210: 52,
      211: $Vp
    }, {
      19: $VY6,
      21: $VZ6,
      22: 2168,
      96: [1, 2179],
      104: [1, 2180],
      105: [1, 2181],
      106: 2178,
      177: 2169,
      187: 2167,
      192: 2172,
      193: 2173,
      194: 2174,
      197: 2177,
      200: [1, 2182],
      201: [1, 2183],
      202: [1, 2188],
      203: [1, 2189],
      204: [1, 2190],
      205: [1, 2191],
      206: [1, 2184],
      207: [1, 2185],
      208: [1, 2186],
      209: [1, 2187],
      210: 2171,
      211: $V_6
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 2192]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2193,
      210: 52,
      211: $Vp
    }, {
      19: $V$6,
      21: $V07,
      22: 2195,
      96: [1, 2206],
      104: [1, 2207],
      105: [1, 2208],
      106: 2205,
      177: 2196,
      187: 2194,
      192: 2199,
      193: 2200,
      194: 2201,
      197: 2204,
      200: [1, 2209],
      201: [1, 2210],
      202: [1, 2215],
      203: [1, 2216],
      204: [1, 2217],
      205: [1, 2218],
      206: [1, 2211],
      207: [1, 2212],
      208: [1, 2213],
      209: [1, 2214],
      210: 2198,
      211: $V17
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Vo1, $VY4), {
      189: [1, 2221],
      190: 2219,
      191: [1, 2220]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 2222,
      199: 2223,
      107: [1, 2224]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 2227],
      190: 2225,
      191: [1, 2226]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 2228,
      199: 2229,
      107: [1, 2230]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      189: [1, 2233],
      190: 2231,
      191: [1, 2232]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 2234,
      199: 2235,
      107: [1, 2236]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), {
      19: [1, 2239],
      21: [1, 2242],
      22: 2238,
      83: 2237,
      210: 2240,
      211: [1, 2241]
    }, o($Va1, $Vr3), o($VC, $VD, {
      58: 2243,
      60: 2244,
      62: 2245,
      63: 2246,
      69: 2249,
      71: 2250,
      68: 2251,
      40: 2252,
      88: 2253,
      90: 2254,
      83: 2256,
      84: 2257,
      85: 2258,
      74: 2259,
      91: 2266,
      22: 2267,
      87: 2269,
      114: 2270,
      95: 2271,
      210: 2274,
      101: 2275,
      103: 2276,
      19: [1, 2273],
      21: [1, 2278],
      65: [1, 2247],
      67: [1, 2248],
      75: [1, 2260],
      76: [1, 2261],
      77: [1, 2262],
      81: [1, 2255],
      92: [1, 2263],
      93: [1, 2264],
      94: [1, 2265],
      97: $V27,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 2268],
      211: [1, 2277]
    }), o($Vw2, $Vv2, {
      80: 1740,
      188: 1741,
      79: 2279,
      186: $Vh6
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 2280,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 1740,
      188: 1741,
      79: 2281,
      186: $Vh6
    }), o($Vo1, $Vz2, {
      95: 1288,
      91: 2282,
      97: $VG5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 2283,
      189: [1, 2284]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2285,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 2286,
      189: [1, 2287]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2288,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 2289]
    }, o($Vt1, $VJ1), {
      96: [1, 2291],
      102: 2290,
      104: [1, 2292],
      105: [1, 2293],
      106: 2294,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2295]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 2296,
      189: [1, 2297]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2298,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 2299]
    }, {
      19: [1, 2302],
      21: [1, 2305],
      22: 2301,
      83: 2300,
      210: 2303,
      211: [1, 2304]
    }, o($Vw2, $Vv2, {
      80: 1778,
      188: 1779,
      79: 2306,
      186: $Vj6
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 2307,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 1778,
      188: 1779,
      79: 2308,
      186: $Vj6
    }), o($Vo1, $Vz2, {
      95: 1335,
      91: 2309,
      97: $VH5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 2310,
      189: [1, 2311]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2312,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 2313,
      189: [1, 2314]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2315,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 2316]
    }, o($Vt1, $VJ1), {
      96: [1, 2318],
      102: 2317,
      104: [1, 2319],
      105: [1, 2320],
      106: 2321,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2322]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 2323,
      189: [1, 2324]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2325,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 2326]
    }, {
      19: [1, 2329],
      21: [1, 2332],
      22: 2328,
      83: 2327,
      210: 2330,
      211: [1, 2331]
    }, o($VF3, $VY4), {
      189: [1, 2335],
      190: 2333,
      191: [1, 2334]
    }, o($VE3, $VM5), o($VE3, $VN5), o($VE3, $VO5), o($VE3, $Vq), o($VE3, $Vr), o($VE3, $Vj4), o($VE3, $Vk4), o($VE3, $Vl4), o($VE3, $Vt), o($VE3, $Vu), o($VE3, $Vm4), o($VE3, $Vn4, {
      198: 2336,
      199: 2337,
      107: [1, 2338]
    }), o($VE3, $Vo4), o($VE3, $Vp4), o($VE3, $Vq4), o($VE3, $Vr4), o($VE3, $Vs4), o($VE3, $Vt4), o($VE3, $Vu4), o($VE3, $Vv4), o($VE3, $Vw4), o($V37, $Vg3), o($V37, $Vh3), o($V37, $Vi3), o($V37, $Vj3), {
      189: [1, 2341],
      190: 2339,
      191: [1, 2340]
    }, o($VF3, $VM5), o($VF3, $VN5), o($VF3, $VO5), o($VF3, $Vq), o($VF3, $Vr), o($VF3, $Vj4), o($VF3, $Vk4), o($VF3, $Vl4), o($VF3, $Vt), o($VF3, $Vu), o($VF3, $Vm4), o($VF3, $Vn4, {
      198: 2342,
      199: 2343,
      107: [1, 2344]
    }), o($VF3, $Vo4), o($VF3, $Vp4), o($VF3, $Vq4), o($VF3, $Vr4), o($VF3, $Vs4), o($VF3, $Vt4), o($VF3, $Vu4), o($VF3, $Vv4), o($VF3, $Vw4), o($V47, $Vg3), o($V47, $Vh3), o($V47, $Vi3), o($V47, $Vj3), {
      189: [1, 2347],
      190: 2345,
      191: [1, 2346]
    }, o($VG3, $VM5), o($VG3, $VN5), o($VG3, $VO5), o($VG3, $Vq), o($VG3, $Vr), o($VG3, $Vj4), o($VG3, $Vk4), o($VG3, $Vl4), o($VG3, $Vt), o($VG3, $Vu), o($VG3, $Vm4), o($VG3, $Vn4, {
      198: 2348,
      199: 2349,
      107: [1, 2350]
    }), o($VG3, $Vo4), o($VG3, $Vp4), o($VG3, $Vq4), o($VG3, $Vr4), o($VG3, $Vs4), o($VG3, $Vt4), o($VG3, $Vu4), o($VG3, $Vv4), o($VG3, $Vw4), o($V57, $Vg3), o($V57, $Vh3), o($V57, $Vi3), o($V57, $Vj3), {
      19: [1, 2353],
      21: [1, 2356],
      22: 2352,
      83: 2351,
      210: 2354,
      211: [1, 2355]
    }, o($VC3, $Vr3), o($VC, $VD, {
      58: 2357,
      60: 2358,
      62: 2359,
      63: 2360,
      69: 2363,
      71: 2364,
      68: 2365,
      40: 2366,
      88: 2367,
      90: 2368,
      83: 2370,
      84: 2371,
      85: 2372,
      74: 2373,
      91: 2380,
      22: 2381,
      87: 2383,
      114: 2384,
      95: 2385,
      210: 2388,
      101: 2389,
      103: 2390,
      19: [1, 2387],
      21: [1, 2392],
      65: [1, 2361],
      67: [1, 2362],
      75: [1, 2374],
      76: [1, 2375],
      77: [1, 2376],
      81: [1, 2369],
      92: [1, 2377],
      93: [1, 2378],
      94: [1, 2379],
      97: $V67,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 2382],
      211: [1, 2391]
    }), o($VH4, $Vv2, {
      80: 1898,
      188: 1899,
      79: 2393,
      186: $Vu6
    }), o($VC3, $VT1), o($VC3, $Vl), o($VC3, $Vm), o($VC3, $Vq), o($VC3, $Vr), o($VC3, $Vs), o($VC3, $Vt), o($VC3, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 2394,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH4, $Vv2, {
      80: 1898,
      188: 1899,
      79: 2395,
      186: $Vu6
    }), o($VF3, $Vz2, {
      95: 1411,
      91: 2396,
      97: $VK5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA2), o($VF4, $Vb3), o($VC3, $VE4), o($VI5, $VM3), o($VE3, $VN3), o($VI5, $VO3, {
      31: 2397,
      189: [1, 2398]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2399,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VC3, $VT3), o($VF3, $VN3), o($VC3, $VO3, {
      31: 2400,
      189: [1, 2401]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2402,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VH3, $VV3), o($VI3, $VW3), o($VI3, $VX3), o($VI3, $VY3), {
      96: [1, 2403]
    }, o($VI3, $VJ1), {
      96: [1, 2405],
      102: 2404,
      104: [1, 2406],
      105: [1, 2407],
      106: 2408,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2409]
    }, o($VJ5, $VU3), o($VG3, $VN3), o($VJ5, $VO3, {
      31: 2410,
      189: [1, 2411]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2412,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VI3, $Vg4), {
      117: [1, 2413]
    }, {
      19: [1, 2416],
      21: [1, 2419],
      22: 2415,
      83: 2414,
      210: 2417,
      211: [1, 2418]
    }, o($VH4, $Vv2, {
      80: 1936,
      188: 1937,
      79: 2420,
      186: $Vw6
    }), o($VC3, $VT1), o($VC3, $Vl), o($VC3, $Vm), o($VC3, $Vq), o($VC3, $Vr), o($VC3, $Vs), o($VC3, $Vt), o($VC3, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 2421,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH4, $Vv2, {
      80: 1936,
      188: 1937,
      79: 2422,
      186: $Vw6
    }), o($VF3, $Vz2, {
      95: 1458,
      91: 2423,
      97: $VL5,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA2), o($VF4, $Vb3), o($VC3, $VE4), o($VI5, $VM3), o($VE3, $VN3), o($VI5, $VO3, {
      31: 2424,
      189: [1, 2425]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2426,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VC3, $VT3), o($VF3, $VN3), o($VC3, $VO3, {
      31: 2427,
      189: [1, 2428]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2429,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VH3, $VV3), o($VI3, $VW3), o($VI3, $VX3), o($VI3, $VY3), {
      96: [1, 2430]
    }, o($VI3, $VJ1), {
      96: [1, 2432],
      102: 2431,
      104: [1, 2433],
      105: [1, 2434],
      106: 2435,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2436]
    }, o($VJ5, $VU3), o($VG3, $VN3), o($VJ5, $VO3, {
      31: 2437,
      189: [1, 2438]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 2439,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VI3, $Vg4), {
      117: [1, 2440]
    }, {
      19: [1, 2443],
      21: [1, 2446],
      22: 2442,
      83: 2441,
      210: 2444,
      211: [1, 2445]
    }, o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Vy6, $Vn1, {
      78: 2447
    }), o($Vy6, $V77), o($Vy6, $V87), o($Vy6, $V97), o($Vy6, $Va7), o($Vy6, $Vb7), o($VE6, $Vc7, {
      53: 2448,
      47: [1, 2449]
    }), o($VG6, $Vd7, {
      57: 2450,
      49: [1, 2451]
    }), o($VI6, $Ve7), o($VI6, $Vf7, {
      70: 2452,
      72: 2453,
      74: 2454,
      40: 2455,
      114: 2456,
      75: [1, 2457],
      76: [1, 2458],
      77: [1, 2459],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($VI6, $Vg7), o($VI6, $Vh7, {
      73: 2460,
      69: 2461,
      88: 2462,
      90: 2463,
      91: 2467,
      95: 2468,
      92: [1, 2464],
      93: [1, 2465],
      94: [1, 2466],
      97: $Vi7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 2470,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VI6, $Vj7), o($Vk7, $Vr1, {
      89: 2471
    }), o($Vl7, $Vs1, {
      95: 1993,
      91: 2472,
      97: $VK6,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vm7, $Vu1, {
      82: 2473
    }), o($Vm7, $Vu1, {
      82: 2474
    }), o($Vm7, $Vu1, {
      82: 2475
    }), o($VI6, $Vv1, {
      101: 1997,
      103: 1998,
      87: 2476,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vn7, $Vo7), o($Vn7, $Vp7), o($Vk7, $VA1), o($Vk7, $VB1), o($Vk7, $VC1), o($Vk7, $VD1), o($Vm7, $VE1), o($VF1, $VG1, {
      158: 2477
    }), o($Vq7, $VI1), {
      115: [1, 2478],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vn7, $V11), o($Vn7, $V21), {
      19: [1, 2482],
      21: [1, 2486],
      22: 2480,
      32: 2479,
      196: 2481,
      210: 2483,
      211: [1, 2485],
      212: [1, 2484]
    }, {
      96: [1, 2487]
    }, o($Vk7, $VJ1), o($Vm7, $Vq), o($Vm7, $Vr), {
      96: [1, 2489],
      102: 2488,
      104: [1, 2490],
      105: [1, 2491],
      106: 2492,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2493]
    }, o($Vm7, $Vt), o($Vm7, $Vu), o($Vy6, $Vn1, {
      78: 2494
    }), o($V_5, $VS5), o($V_5, $VT5), o($V_5, $VU5), o($V16, $VV5), o($V16, $VW5), o($V16, $VX5), o($Vx, $Vg, {
      42: 2495,
      43: 2496,
      51: 2497,
      55: 2498,
      36: 2499,
      39: $Vy
    }), {
      66: [1, 2500]
    }, o($V46, $V66), o($V46, $VE1), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 2501
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 2505],
      21: [1, 2509],
      22: 2503,
      32: 2502,
      196: 2504,
      210: 2506,
      211: [1, 2508],
      212: [1, 2507]
    }, {
      115: [1, 2510],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 2511
    }), o($Vn2, $Vr1, {
      89: 2512
    }), o($Vo1, $Vs1, {
      95: 2030,
      91: 2513,
      97: $VL6,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 2514]
    }, o($Vn2, $VJ1), {
      66: [1, 2515]
    }, o($Vu2, $Vv2, {
      79: 2516,
      80: 2517,
      188: 2518,
      186: [1, 2519]
    }), o($Vw2, $Vv2, {
      79: 2520,
      80: 2521,
      188: 2522,
      186: $Vr7
    }), o($Vm1, $Vz2, {
      95: 1576,
      91: 2524,
      97: $V76,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 2525,
      91: 2526,
      87: 2527,
      95: 2528,
      101: 2530,
      103: 2531,
      97: $Vs7,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 2525,
      91: 2526,
      87: 2527,
      95: 2528,
      101: 2530,
      103: 2531,
      97: $Vs7,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 2525,
      91: 2526,
      87: 2527,
      95: 2528,
      101: 2530,
      103: 2531,
      97: $Vs7,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 2532,
      80: 2533,
      188: 2534,
      186: [1, 2535]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 2536],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 2537,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 2538]
    }, o($VH1, $Vk3), o($Vo1, $VY4), {
      189: [1, 2541],
      190: 2539,
      191: [1, 2540]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 2542,
      199: 2543,
      107: [1, 2544]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 2547],
      190: 2545,
      191: [1, 2546]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 2548,
      199: 2549,
      107: [1, 2550]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 2553],
      21: [1, 2556],
      22: 2552,
      83: 2551,
      210: 2554,
      211: [1, 2555]
    }, {
      189: [1, 2559],
      190: 2557,
      191: [1, 2558]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 2560,
      199: 2561,
      107: [1, 2562]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($Vo1, $VY4), {
      189: [1, 2565],
      190: 2563,
      191: [1, 2564]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 2566,
      199: 2567,
      107: [1, 2568]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 2571],
      190: 2569,
      191: [1, 2570]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 2572,
      199: 2573,
      107: [1, 2574]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 2577],
      21: [1, 2580],
      22: 2576,
      83: 2575,
      210: 2578,
      211: [1, 2579]
    }, {
      189: [1, 2583],
      190: 2581,
      191: [1, 2582]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 2584,
      199: 2585,
      107: [1, 2586]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $V86,
      21: $V96,
      22: 2588,
      83: 2587,
      210: 1644,
      211: $Va6
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $Vb6,
      21: $Vc6,
      22: 2590,
      83: 2589,
      210: 1670,
      211: $Vd6
    }, o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $Ve6,
      21: $Vf6,
      22: 2592,
      83: 2591,
      210: 1696,
      211: $Vg6
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Va1, $Vb2), o($Va1, $Vd1, {
      61: 2593,
      63: 2594,
      68: 2595,
      40: 2596,
      74: 2597,
      114: 2601,
      75: [1, 2598],
      76: [1, 2599],
      77: [1, 2600],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Va1, $Vc2), o($Va1, $Vf1, {
      64: 2602,
      60: 2603,
      69: 2604,
      88: 2605,
      90: 2606,
      91: 2610,
      95: 2611,
      92: [1, 2607],
      93: [1, 2608],
      94: [1, 2609],
      97: $Vt7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 2613,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Va1, $Vd2), o($Vm1, $Vn1, {
      78: 2614
    }), o($Vo1, $Vn1, {
      78: 2615
    }), o($Ve2, $Vf2), o($Ve2, $Vg2), o($Vq1, $Vr1, {
      89: 2616
    }), o($Vm1, $Vs1, {
      95: 2271,
      91: 2617,
      97: $V27,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vt1, $Vu1, {
      82: 2618
    }), o($Vt1, $Vu1, {
      82: 2619
    }), o($Vt1, $Vu1, {
      82: 2620
    }), o($Vo1, $Vv1, {
      101: 2275,
      103: 2276,
      87: 2621,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vp1, $Vn1, {
      78: 2622
    }), o($Ve2, $V11), o($Ve2, $V21), {
      19: [1, 2626],
      21: [1, 2630],
      22: 2624,
      32: 2623,
      196: 2625,
      210: 2627,
      211: [1, 2629],
      212: [1, 2628]
    }, o($Vq1, $VA1), o($Vq1, $VB1), o($Vq1, $VC1), o($Vq1, $VD1), o($Vt1, $VE1), o($VF1, $VG1, {
      158: 2631
    }), o($VH1, $VI1), {
      115: [1, 2632],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 2633]
    }, o($Vq1, $VJ1), o($Vt1, $Vq), o($Vt1, $Vr), {
      96: [1, 2635],
      102: 2634,
      104: [1, 2636],
      105: [1, 2637],
      106: 2638,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2639]
    }, o($Vt1, $Vt), o($Vt1, $Vu), o($Va1, $VU3), {
      117: [1, 2640]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2641,
      210: 52,
      211: $Vp
    }, {
      19: $Vu7,
      21: $Vv7,
      22: 2643,
      96: [1, 2654],
      104: [1, 2655],
      105: [1, 2656],
      106: 2653,
      177: 2644,
      187: 2642,
      192: 2647,
      193: 2648,
      194: 2649,
      197: 2652,
      200: [1, 2657],
      201: [1, 2658],
      202: [1, 2663],
      203: [1, 2664],
      204: [1, 2665],
      205: [1, 2666],
      206: [1, 2659],
      207: [1, 2660],
      208: [1, 2661],
      209: [1, 2662],
      210: 2646,
      211: $Vw7
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2667,
      210: 52,
      211: $Vp
    }, {
      19: $Vx7,
      21: $Vy7,
      22: 2669,
      96: [1, 2680],
      104: [1, 2681],
      105: [1, 2682],
      106: 2679,
      177: 2670,
      187: 2668,
      192: 2673,
      193: 2674,
      194: 2675,
      197: 2678,
      200: [1, 2683],
      201: [1, 2684],
      202: [1, 2689],
      203: [1, 2690],
      204: [1, 2691],
      205: [1, 2692],
      206: [1, 2685],
      207: [1, 2686],
      208: [1, 2687],
      209: [1, 2688],
      210: 2672,
      211: $Vz7
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 2693]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2694,
      210: 52,
      211: $Vp
    }, {
      19: $VA7,
      21: $VB7,
      22: 2696,
      96: [1, 2707],
      104: [1, 2708],
      105: [1, 2709],
      106: 2706,
      177: 2697,
      187: 2695,
      192: 2700,
      193: 2701,
      194: 2702,
      197: 2705,
      200: [1, 2710],
      201: [1, 2711],
      202: [1, 2716],
      203: [1, 2717],
      204: [1, 2718],
      205: [1, 2719],
      206: [1, 2712],
      207: [1, 2713],
      208: [1, 2714],
      209: [1, 2715],
      210: 2699,
      211: $VC7
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Va1, $VU3), {
      117: [1, 2720]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2721,
      210: 52,
      211: $Vp
    }, {
      19: $VD7,
      21: $VE7,
      22: 2723,
      96: [1, 2734],
      104: [1, 2735],
      105: [1, 2736],
      106: 2733,
      177: 2724,
      187: 2722,
      192: 2727,
      193: 2728,
      194: 2729,
      197: 2732,
      200: [1, 2737],
      201: [1, 2738],
      202: [1, 2743],
      203: [1, 2744],
      204: [1, 2745],
      205: [1, 2746],
      206: [1, 2739],
      207: [1, 2740],
      208: [1, 2741],
      209: [1, 2742],
      210: 2726,
      211: $VF7
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2747,
      210: 52,
      211: $Vp
    }, {
      19: $VG7,
      21: $VH7,
      22: 2749,
      96: [1, 2760],
      104: [1, 2761],
      105: [1, 2762],
      106: 2759,
      177: 2750,
      187: 2748,
      192: 2753,
      193: 2754,
      194: 2755,
      197: 2758,
      200: [1, 2763],
      201: [1, 2764],
      202: [1, 2769],
      203: [1, 2770],
      204: [1, 2771],
      205: [1, 2772],
      206: [1, 2765],
      207: [1, 2766],
      208: [1, 2767],
      209: [1, 2768],
      210: 2752,
      211: $VI7
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 2773]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2774,
      210: 52,
      211: $Vp
    }, {
      19: $VJ7,
      21: $VK7,
      22: 2776,
      96: [1, 2787],
      104: [1, 2788],
      105: [1, 2789],
      106: 2786,
      177: 2777,
      187: 2775,
      192: 2780,
      193: 2781,
      194: 2782,
      197: 2785,
      200: [1, 2790],
      201: [1, 2791],
      202: [1, 2796],
      203: [1, 2797],
      204: [1, 2798],
      205: [1, 2799],
      206: [1, 2792],
      207: [1, 2793],
      208: [1, 2794],
      209: [1, 2795],
      210: 2779,
      211: $VL7
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($VG4, $VU1), o($VG4, $VV1), o($VG4, $VW1), o($VE3, $Vz5), o($VE3, $VA5), {
      19: $Vl6,
      21: $Vm6,
      22: 2801,
      83: 2800,
      210: 1802,
      211: $Vn6
    }, o($VH4, $VU1), o($VH4, $VV1), o($VH4, $VW1), o($VF3, $Vz5), o($VF3, $VA5), {
      19: $Vo6,
      21: $Vp6,
      22: 2803,
      83: 2802,
      210: 1828,
      211: $Vq6
    }, o($VJ4, $VU1), o($VJ4, $VV1), o($VJ4, $VW1), o($VG3, $Vz5), o($VG3, $VA5), {
      19: $Vr6,
      21: $Vs6,
      22: 2805,
      83: 2804,
      210: 1854,
      211: $Vt6
    }, o($VI3, $VB5), o($VI3, $VE1), o($VI3, $Vq), o($VI3, $Vr), o($VI3, $Vt), o($VI3, $Vu), o($VC3, $Vb2), o($VC, $VD, {
      61: 2806,
      63: 2807,
      68: 2808,
      40: 2809,
      74: 2810,
      114: 2814,
      47: $Vd1,
      49: $Vd1,
      66: $Vd1,
      75: [1, 2811],
      76: [1, 2812],
      77: [1, 2813]
    }), o($VC3, $Vc2), o($VC3, $Vf1, {
      64: 2815,
      60: 2816,
      69: 2817,
      88: 2818,
      90: 2819,
      91: 2823,
      95: 2824,
      92: [1, 2820],
      93: [1, 2821],
      94: [1, 2822],
      97: $VM7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 2826,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VC3, $Vd2), o($VE3, $Vn1, {
      78: 2827
    }), o($VF3, $Vn1, {
      78: 2828
    }), o($VJ5, $Vf2), o($VJ5, $Vg2), o($VH3, $Vr1, {
      89: 2829
    }), o($VE3, $Vs1, {
      95: 2385,
      91: 2830,
      97: $V67,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VI3, $Vu1, {
      82: 2831
    }), o($VI3, $Vu1, {
      82: 2832
    }), o($VI3, $Vu1, {
      82: 2833
    }), o($VF3, $Vv1, {
      101: 2389,
      103: 2390,
      87: 2834,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VG3, $Vn1, {
      78: 2835
    }), o($VJ5, $V11), o($VJ5, $V21), {
      19: [1, 2839],
      21: [1, 2843],
      22: 2837,
      32: 2836,
      196: 2838,
      210: 2840,
      211: [1, 2842],
      212: [1, 2841]
    }, o($VH3, $VA1), o($VH3, $VB1), o($VH3, $VC1), o($VH3, $VD1), o($VI3, $VE1), o($VF1, $VG1, {
      158: 2844
    }), o($VJ3, $VI1), {
      115: [1, 2845],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, {
      96: [1, 2846]
    }, o($VH3, $VJ1), o($VI3, $Vq), o($VI3, $Vr), {
      96: [1, 2848],
      102: 2847,
      104: [1, 2849],
      105: [1, 2850],
      106: 2851,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 2852]
    }, o($VI3, $Vt), o($VI3, $Vu), o($VC3, $VU3), {
      117: [1, 2853]
    }, o($VC3, $VM3), o($VF4, $VV3), o($VG4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2854,
      210: 52,
      211: $Vp
    }, {
      19: $VN7,
      21: $VO7,
      22: 2856,
      96: [1, 2867],
      104: [1, 2868],
      105: [1, 2869],
      106: 2866,
      177: 2857,
      187: 2855,
      192: 2860,
      193: 2861,
      194: 2862,
      197: 2865,
      200: [1, 2870],
      201: [1, 2871],
      202: [1, 2876],
      203: [1, 2877],
      204: [1, 2878],
      205: [1, 2879],
      206: [1, 2872],
      207: [1, 2873],
      208: [1, 2874],
      209: [1, 2875],
      210: 2859,
      211: $VP7
    }, o($VH4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2880,
      210: 52,
      211: $Vp
    }, {
      19: $VQ7,
      21: $VR7,
      22: 2882,
      96: [1, 2893],
      104: [1, 2894],
      105: [1, 2895],
      106: 2892,
      177: 2883,
      187: 2881,
      192: 2886,
      193: 2887,
      194: 2888,
      197: 2891,
      200: [1, 2896],
      201: [1, 2897],
      202: [1, 2902],
      203: [1, 2903],
      204: [1, 2904],
      205: [1, 2905],
      206: [1, 2898],
      207: [1, 2899],
      208: [1, 2900],
      209: [1, 2901],
      210: 2885,
      211: $VS7
    }, o($VI3, $Vb3), o($VI3, $Vc3), o($VI3, $Vd3), o($VI3, $Ve3), o($VI3, $Vf3), {
      107: [1, 2906]
    }, o($VI3, $Vk3), o($VJ4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2907,
      210: 52,
      211: $Vp
    }, {
      19: $VT7,
      21: $VU7,
      22: 2909,
      96: [1, 2920],
      104: [1, 2921],
      105: [1, 2922],
      106: 2919,
      177: 2910,
      187: 2908,
      192: 2913,
      193: 2914,
      194: 2915,
      197: 2918,
      200: [1, 2923],
      201: [1, 2924],
      202: [1, 2929],
      203: [1, 2930],
      204: [1, 2931],
      205: [1, 2932],
      206: [1, 2925],
      207: [1, 2926],
      208: [1, 2927],
      209: [1, 2928],
      210: 2912,
      211: $VV7
    }, o($VG3, $VY4), o($VJ3, $VB5), o($VJ3, $VE1), o($VJ3, $Vq), o($VJ3, $Vr), o($VJ3, $Vt), o($VJ3, $Vu), o($VC3, $VU3), {
      117: [1, 2933]
    }, o($VC3, $VM3), o($VF4, $VV3), o($VG4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2934,
      210: 52,
      211: $Vp
    }, {
      19: $VW7,
      21: $VX7,
      22: 2936,
      96: [1, 2947],
      104: [1, 2948],
      105: [1, 2949],
      106: 2946,
      177: 2937,
      187: 2935,
      192: 2940,
      193: 2941,
      194: 2942,
      197: 2945,
      200: [1, 2950],
      201: [1, 2951],
      202: [1, 2956],
      203: [1, 2957],
      204: [1, 2958],
      205: [1, 2959],
      206: [1, 2952],
      207: [1, 2953],
      208: [1, 2954],
      209: [1, 2955],
      210: 2939,
      211: $VY7
    }, o($VH4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2960,
      210: 52,
      211: $Vp
    }, {
      19: $VZ7,
      21: $V_7,
      22: 2962,
      96: [1, 2973],
      104: [1, 2974],
      105: [1, 2975],
      106: 2972,
      177: 2963,
      187: 2961,
      192: 2966,
      193: 2967,
      194: 2968,
      197: 2971,
      200: [1, 2976],
      201: [1, 2977],
      202: [1, 2982],
      203: [1, 2983],
      204: [1, 2984],
      205: [1, 2985],
      206: [1, 2978],
      207: [1, 2979],
      208: [1, 2980],
      209: [1, 2981],
      210: 2965,
      211: $V$7
    }, o($VI3, $Vb3), o($VI3, $Vc3), o($VI3, $Vd3), o($VI3, $Ve3), o($VI3, $Vf3), {
      107: [1, 2986]
    }, o($VI3, $Vk3), o($VJ4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 2987,
      210: 52,
      211: $Vp
    }, {
      19: $V08,
      21: $V18,
      22: 2989,
      96: [1, 3000],
      104: [1, 3001],
      105: [1, 3002],
      106: 2999,
      177: 2990,
      187: 2988,
      192: 2993,
      193: 2994,
      194: 2995,
      197: 2998,
      200: [1, 3003],
      201: [1, 3004],
      202: [1, 3009],
      203: [1, 3010],
      204: [1, 3011],
      205: [1, 3012],
      206: [1, 3005],
      207: [1, 3006],
      208: [1, 3007],
      209: [1, 3008],
      210: 2992,
      211: $V28
    }, o($VG3, $VY4), o($VJ3, $VB5), o($VJ3, $VE1), o($VJ3, $Vq), o($VJ3, $Vr), o($VJ3, $Vt), o($VJ3, $Vu), o($V38, $Vv2, {
      79: 3013,
      80: 3014,
      188: 3015,
      186: $V48
    }), o($VG6, $V58), o($Vx, $Vg, {
      51: 3017,
      55: 3018,
      36: 3019,
      39: $Vy
    }), o($VI6, $V68), o($Vx, $Vg, {
      55: 3020,
      36: 3021,
      39: $Vy
    }), o($VI6, $V78), o($VI6, $V88), o($VI6, $Vo7), o($VI6, $Vp7), {
      115: [1, 3022],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VI6, $V11), o($VI6, $V21), {
      19: [1, 3026],
      21: [1, 3030],
      22: 3024,
      32: 3023,
      196: 3025,
      210: 3027,
      211: [1, 3029],
      212: [1, 3028]
    }, o($VI6, $V98), o($VI6, $Va8), o($Vb8, $Vr1, {
      89: 3031
    }), o($VI6, $Vs1, {
      95: 2468,
      91: 3032,
      97: $Vi7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA1), o($Vb8, $VB1), o($Vb8, $VC1), o($Vb8, $VD1), {
      96: [1, 3033]
    }, o($Vb8, $VJ1), {
      66: [1, 3034]
    }, o($Vl7, $Vz2, {
      95: 1993,
      91: 3035,
      97: $VK6,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vk7, $VA2), o($VI6, $VB2, {
      86: 3036,
      91: 3037,
      87: 3038,
      95: 3039,
      101: 3041,
      103: 3042,
      97: $Vc8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VD2, {
      86: 3036,
      91: 3037,
      87: 3038,
      95: 3039,
      101: 3041,
      103: 3042,
      97: $Vc8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VE2, {
      86: 3036,
      91: 3037,
      87: 3038,
      95: 3039,
      101: 3041,
      103: 3042,
      97: $Vc8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vq7, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3043],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3044,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vn7, $VT1), o($Vn7, $Vl), o($Vn7, $Vm), o($Vn7, $Vq), o($Vn7, $Vr), o($Vn7, $Vs), o($Vn7, $Vt), o($Vn7, $Vu), o($Vk7, $Vb3), o($Vq7, $Vc3), o($Vq7, $Vd3), o($Vq7, $Ve3), o($Vq7, $Vf3), {
      107: [1, 3045]
    }, o($Vq7, $Vk3), o($V38, $Vv2, {
      80: 3014,
      188: 3015,
      79: 3046,
      186: $V48
    }), o($Vd8, $Vz6, {
      148: 3047,
      149: 3048,
      152: $Ve8,
      153: $Vf8,
      154: $Vg8,
      155: $Vh8
    }), o($Vi8, $VF6), o($Vj8, $VH6, {
      52: 3053
    }), o($Vk8, $VJ6, {
      56: 3054
    }), o($VC, $VD, {
      59: 3055,
      69: 3056,
      71: 3057,
      72: 3058,
      88: 3061,
      90: 3062,
      83: 3064,
      84: 3065,
      85: 3066,
      74: 3067,
      40: 3068,
      91: 3072,
      22: 3073,
      87: 3075,
      114: 3076,
      95: 3080,
      210: 3083,
      101: 3084,
      103: 3085,
      19: [1, 3082],
      21: [1, 3087],
      65: [1, 3059],
      67: [1, 3060],
      75: [1, 3077],
      76: [1, 3078],
      77: [1, 3079],
      81: [1, 3063],
      92: [1, 3069],
      93: [1, 3070],
      94: [1, 3071],
      97: $Vl8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 3074],
      211: [1, 3086]
    }), o($Vd8, $Vz6, {
      149: 3048,
      148: 3088,
      152: $Ve8,
      153: $Vf8,
      154: $Vg8,
      155: $Vh8
    }), o($Vw2, $Vv2, {
      80: 2521,
      188: 2522,
      79: 3089,
      186: $Vr7
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3090,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 2521,
      188: 2522,
      79: 3091,
      186: $Vr7
    }), o($Vo1, $Vz2, {
      95: 2030,
      91: 3092,
      97: $VL6,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 3093,
      189: [1, 3094]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3095,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 3096,
      189: [1, 3097]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3098,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 3099]
    }, o($Vt1, $VJ1), {
      96: [1, 3101],
      102: 3100,
      104: [1, 3102],
      105: [1, 3103],
      106: 3104,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3105]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 3106,
      189: [1, 3107]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3108,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 3109]
    }, {
      19: [1, 3112],
      21: [1, 3115],
      22: 3111,
      83: 3110,
      210: 3113,
      211: [1, 3114]
    }, o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VM6,
      21: $VN6,
      22: 3117,
      83: 3116,
      210: 2065,
      211: $VO6
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VP6,
      21: $VQ6,
      22: 3119,
      83: 3118,
      210: 2091,
      211: $VR6
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $VS6,
      21: $VT6,
      22: 3121,
      83: 3120,
      210: 2118,
      211: $VU6
    }, o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VV6,
      21: $VW6,
      22: 3123,
      83: 3122,
      210: 2145,
      211: $VX6
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VY6,
      21: $VZ6,
      22: 3125,
      83: 3124,
      210: 2171,
      211: $V_6
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $V$6,
      21: $V07,
      22: 3127,
      83: 3126,
      210: 2198,
      211: $V17
    }, o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Va1, $Vz3), o($Va1, $Vk2), o($Va1, $Vf2), o($Va1, $Vg2), o($Vo1, $Vn1, {
      78: 3128
    }), o($Va1, $V11), o($Va1, $V21), {
      19: [1, 3132],
      21: [1, 3136],
      22: 3130,
      32: 3129,
      196: 3131,
      210: 3133,
      211: [1, 3135],
      212: [1, 3134]
    }, {
      115: [1, 3137],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Va1, $VA3), o($Va1, $Vm2), o($Vo1, $Vn1, {
      78: 3138
    }), o($Vn2, $Vr1, {
      89: 3139
    }), o($Vo1, $Vs1, {
      95: 2611,
      91: 3140,
      97: $Vt7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA1), o($Vn2, $VB1), o($Vn2, $VC1), o($Vn2, $VD1), {
      96: [1, 3141]
    }, o($Vn2, $VJ1), {
      66: [1, 3142]
    }, o($Vu2, $Vv2, {
      79: 3143,
      80: 3144,
      188: 3145,
      186: [1, 3146]
    }), o($Vw2, $Vv2, {
      79: 3147,
      80: 3148,
      188: 3149,
      186: $Vm8
    }), o($Vm1, $Vz2, {
      95: 2271,
      91: 3151,
      97: $V27,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vq1, $VA2), o($Vo1, $VB2, {
      86: 3152,
      91: 3153,
      87: 3154,
      95: 3155,
      101: 3157,
      103: 3158,
      97: $Vn8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VD2, {
      86: 3152,
      91: 3153,
      87: 3154,
      95: 3155,
      101: 3157,
      103: 3158,
      97: $Vn8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vo1, $VE2, {
      86: 3152,
      91: 3153,
      87: 3154,
      95: 3155,
      101: 3157,
      103: 3158,
      97: $Vn8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VH1, $VF2), o($Vy2, $Vv2, {
      79: 3159,
      80: 3160,
      188: 3161,
      186: [1, 3162]
    }), o($Ve2, $VT1), o($Ve2, $Vl), o($Ve2, $Vm), o($Ve2, $Vq), o($Ve2, $Vr), o($Ve2, $Vs), o($Ve2, $Vt), o($Ve2, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3163],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3164,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vq1, $Vb3), o($VH1, $Vc3), o($VH1, $Vd3), o($VH1, $Ve3), o($VH1, $Vf3), {
      107: [1, 3165]
    }, o($VH1, $Vk3), o($Vo1, $VY4), {
      189: [1, 3168],
      190: 3166,
      191: [1, 3167]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 3169,
      199: 3170,
      107: [1, 3171]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 3174],
      190: 3172,
      191: [1, 3173]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 3175,
      199: 3176,
      107: [1, 3177]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 3180],
      21: [1, 3183],
      22: 3179,
      83: 3178,
      210: 3181,
      211: [1, 3182]
    }, {
      189: [1, 3186],
      190: 3184,
      191: [1, 3185]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 3187,
      199: 3188,
      107: [1, 3189]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($Vo1, $VY4), {
      189: [1, 3192],
      190: 3190,
      191: [1, 3191]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 3193,
      199: 3194,
      107: [1, 3195]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 3198],
      190: 3196,
      191: [1, 3197]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 3199,
      199: 3200,
      107: [1, 3201]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 3204],
      21: [1, 3207],
      22: 3203,
      83: 3202,
      210: 3205,
      211: [1, 3206]
    }, {
      189: [1, 3210],
      190: 3208,
      191: [1, 3209]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 3211,
      199: 3212,
      107: [1, 3213]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($VE3, $V66), o($VE3, $VE1), o($VF3, $V66), o($VF3, $VE1), o($VG3, $V66), o($VG3, $VE1), o($VC3, $Vz3), o($VC3, $Vk2), o($VC3, $Vf2), o($VC3, $Vg2), o($VF3, $Vn1, {
      78: 3214
    }), o($VC3, $V11), o($VC3, $V21), {
      19: [1, 3218],
      21: [1, 3222],
      22: 3216,
      32: 3215,
      196: 3217,
      210: 3219,
      211: [1, 3221],
      212: [1, 3220]
    }, {
      115: [1, 3223],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VC3, $VA3), o($VC3, $Vm2), o($VF3, $Vn1, {
      78: 3224
    }), o($VF4, $Vr1, {
      89: 3225
    }), o($VF3, $Vs1, {
      95: 2824,
      91: 3226,
      97: $VM7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA1), o($VF4, $VB1), o($VF4, $VC1), o($VF4, $VD1), {
      96: [1, 3227]
    }, o($VF4, $VJ1), {
      66: [1, 3228]
    }, o($VG4, $Vv2, {
      79: 3229,
      80: 3230,
      188: 3231,
      186: [1, 3232]
    }), o($VH4, $Vv2, {
      79: 3233,
      80: 3234,
      188: 3235,
      186: $Vo8
    }), o($VE3, $Vz2, {
      95: 2385,
      91: 3237,
      97: $V67,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VH3, $VA2), o($VF3, $VB2, {
      86: 3238,
      91: 3239,
      87: 3240,
      95: 3241,
      101: 3243,
      103: 3244,
      97: $Vp8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VD2, {
      86: 3238,
      91: 3239,
      87: 3240,
      95: 3241,
      101: 3243,
      103: 3244,
      97: $Vp8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VF3, $VE2, {
      86: 3238,
      91: 3239,
      87: 3240,
      95: 3241,
      101: 3243,
      103: 3244,
      97: $Vp8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VJ3, $VF2), o($VJ4, $Vv2, {
      79: 3245,
      80: 3246,
      188: 3247,
      186: [1, 3248]
    }), o($VJ5, $VT1), o($VJ5, $Vl), o($VJ5, $Vm), o($VJ5, $Vq), o($VJ5, $Vr), o($VJ5, $Vs), o($VJ5, $Vt), o($VJ5, $Vu), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3249],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3250,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH3, $Vb3), o($VJ3, $Vc3), o($VJ3, $Vd3), o($VJ3, $Ve3), o($VJ3, $Vf3), {
      107: [1, 3251]
    }, o($VJ3, $Vk3), o($VF3, $VY4), {
      189: [1, 3254],
      190: 3252,
      191: [1, 3253]
    }, o($VE3, $VM5), o($VE3, $VN5), o($VE3, $VO5), o($VE3, $Vq), o($VE3, $Vr), o($VE3, $Vj4), o($VE3, $Vk4), o($VE3, $Vl4), o($VE3, $Vt), o($VE3, $Vu), o($VE3, $Vm4), o($VE3, $Vn4, {
      198: 3255,
      199: 3256,
      107: [1, 3257]
    }), o($VE3, $Vo4), o($VE3, $Vp4), o($VE3, $Vq4), o($VE3, $Vr4), o($VE3, $Vs4), o($VE3, $Vt4), o($VE3, $Vu4), o($VE3, $Vv4), o($VE3, $Vw4), o($V37, $Vg3), o($V37, $Vh3), o($V37, $Vi3), o($V37, $Vj3), {
      189: [1, 3260],
      190: 3258,
      191: [1, 3259]
    }, o($VF3, $VM5), o($VF3, $VN5), o($VF3, $VO5), o($VF3, $Vq), o($VF3, $Vr), o($VF3, $Vj4), o($VF3, $Vk4), o($VF3, $Vl4), o($VF3, $Vt), o($VF3, $Vu), o($VF3, $Vm4), o($VF3, $Vn4, {
      198: 3261,
      199: 3262,
      107: [1, 3263]
    }), o($VF3, $Vo4), o($VF3, $Vp4), o($VF3, $Vq4), o($VF3, $Vr4), o($VF3, $Vs4), o($VF3, $Vt4), o($VF3, $Vu4), o($VF3, $Vv4), o($VF3, $Vw4), o($V47, $Vg3), o($V47, $Vh3), o($V47, $Vi3), o($V47, $Vj3), {
      19: [1, 3266],
      21: [1, 3269],
      22: 3265,
      83: 3264,
      210: 3267,
      211: [1, 3268]
    }, {
      189: [1, 3272],
      190: 3270,
      191: [1, 3271]
    }, o($VG3, $VM5), o($VG3, $VN5), o($VG3, $VO5), o($VG3, $Vq), o($VG3, $Vr), o($VG3, $Vj4), o($VG3, $Vk4), o($VG3, $Vl4), o($VG3, $Vt), o($VG3, $Vu), o($VG3, $Vm4), o($VG3, $Vn4, {
      198: 3273,
      199: 3274,
      107: [1, 3275]
    }), o($VG3, $Vo4), o($VG3, $Vp4), o($VG3, $Vq4), o($VG3, $Vr4), o($VG3, $Vs4), o($VG3, $Vt4), o($VG3, $Vu4), o($VG3, $Vv4), o($VG3, $Vw4), o($V57, $Vg3), o($V57, $Vh3), o($V57, $Vi3), o($V57, $Vj3), o($VF3, $VY4), {
      189: [1, 3278],
      190: 3276,
      191: [1, 3277]
    }, o($VE3, $VM5), o($VE3, $VN5), o($VE3, $VO5), o($VE3, $Vq), o($VE3, $Vr), o($VE3, $Vj4), o($VE3, $Vk4), o($VE3, $Vl4), o($VE3, $Vt), o($VE3, $Vu), o($VE3, $Vm4), o($VE3, $Vn4, {
      198: 3279,
      199: 3280,
      107: [1, 3281]
    }), o($VE3, $Vo4), o($VE3, $Vp4), o($VE3, $Vq4), o($VE3, $Vr4), o($VE3, $Vs4), o($VE3, $Vt4), o($VE3, $Vu4), o($VE3, $Vv4), o($VE3, $Vw4), o($V37, $Vg3), o($V37, $Vh3), o($V37, $Vi3), o($V37, $Vj3), {
      189: [1, 3284],
      190: 3282,
      191: [1, 3283]
    }, o($VF3, $VM5), o($VF3, $VN5), o($VF3, $VO5), o($VF3, $Vq), o($VF3, $Vr), o($VF3, $Vj4), o($VF3, $Vk4), o($VF3, $Vl4), o($VF3, $Vt), o($VF3, $Vu), o($VF3, $Vm4), o($VF3, $Vn4, {
      198: 3285,
      199: 3286,
      107: [1, 3287]
    }), o($VF3, $Vo4), o($VF3, $Vp4), o($VF3, $Vq4), o($VF3, $Vr4), o($VF3, $Vs4), o($VF3, $Vt4), o($VF3, $Vu4), o($VF3, $Vv4), o($VF3, $Vw4), o($V47, $Vg3), o($V47, $Vh3), o($V47, $Vi3), o($V47, $Vj3), {
      19: [1, 3290],
      21: [1, 3293],
      22: 3289,
      83: 3288,
      210: 3291,
      211: [1, 3292]
    }, {
      189: [1, 3296],
      190: 3294,
      191: [1, 3295]
    }, o($VG3, $VM5), o($VG3, $VN5), o($VG3, $VO5), o($VG3, $Vq), o($VG3, $Vr), o($VG3, $Vj4), o($VG3, $Vk4), o($VG3, $Vl4), o($VG3, $Vt), o($VG3, $Vu), o($VG3, $Vm4), o($VG3, $Vn4, {
      198: 3297,
      199: 3298,
      107: [1, 3299]
    }), o($VG3, $Vo4), o($VG3, $Vp4), o($VG3, $Vq4), o($VG3, $Vr4), o($VG3, $Vs4), o($VG3, $Vt4), o($VG3, $Vu4), o($VG3, $Vv4), o($VG3, $Vw4), o($V57, $Vg3), o($V57, $Vh3), o($V57, $Vi3), o($V57, $Vj3), o($Va4, $Vq8), o($Vy6, $VN3), o($Va4, $VO3, {
      31: 3300,
      189: [1, 3301]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3302,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VG6, $Vr8), o($VI6, $VJ6, {
      56: 3303
    }), o($VC, $VD, {
      59: 3304,
      69: 3305,
      71: 3306,
      72: 3307,
      88: 3310,
      90: 3311,
      83: 3313,
      84: 3314,
      85: 3315,
      74: 3316,
      40: 3317,
      91: 3321,
      22: 3322,
      87: 3324,
      114: 3325,
      95: 3329,
      210: 3332,
      101: 3333,
      103: 3334,
      19: [1, 3331],
      21: [1, 3336],
      65: [1, 3308],
      67: [1, 3309],
      75: [1, 3326],
      76: [1, 3327],
      77: [1, 3328],
      81: [1, 3312],
      92: [1, 3318],
      93: [1, 3319],
      94: [1, 3320],
      97: $Vs8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 3323],
      211: [1, 3335]
    }), o($VI6, $Vt8), o($VC, $VD, {
      59: 3337,
      69: 3338,
      71: 3339,
      72: 3340,
      88: 3343,
      90: 3344,
      83: 3346,
      84: 3347,
      85: 3348,
      74: 3349,
      40: 3350,
      91: 3354,
      22: 3355,
      87: 3357,
      114: 3358,
      95: 3362,
      210: 3365,
      101: 3366,
      103: 3367,
      19: [1, 3364],
      21: [1, 3369],
      65: [1, 3341],
      67: [1, 3342],
      75: [1, 3359],
      76: [1, 3360],
      77: [1, 3361],
      81: [1, 3345],
      92: [1, 3351],
      93: [1, 3352],
      94: [1, 3353],
      97: $Vu8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 3356],
      211: [1, 3368]
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3370,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VI6, $VT1), o($VI6, $Vl), o($VI6, $Vm), o($VI6, $Vq), o($VI6, $Vr), o($VI6, $Vs), o($VI6, $Vt), o($VI6, $Vu), o($VI6, $Vz2, {
      95: 2468,
      91: 3371,
      97: $Vi7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA2), o($Vb8, $Vb3), o($VI6, $Vv8), o($Vk7, $VV3), o($Vm7, $VW3), o($Vm7, $VX3), o($Vm7, $VY3), {
      96: [1, 3372]
    }, o($Vm7, $VJ1), {
      96: [1, 3374],
      102: 3373,
      104: [1, 3375],
      105: [1, 3376],
      106: 3377,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3378]
    }, o($Vm7, $Vg4), {
      117: [1, 3379]
    }, {
      19: [1, 3382],
      21: [1, 3385],
      22: 3381,
      83: 3380,
      210: 3383,
      211: [1, 3384]
    }, o($Va4, $Vw8), o($Vd8, $Vn1, {
      78: 3386
    }), o($Vd8, $V77), o($Vd8, $V87), o($Vd8, $V97), o($Vd8, $Va7), o($Vd8, $Vb7), o($Vi8, $Vc7, {
      53: 3387,
      47: [1, 3388]
    }), o($Vj8, $Vd7, {
      57: 3389,
      49: [1, 3390]
    }), o($Vk8, $Ve7), o($Vk8, $Vf7, {
      70: 3391,
      72: 3392,
      74: 3393,
      40: 3394,
      114: 3395,
      75: [1, 3396],
      76: [1, 3397],
      77: [1, 3398],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Vk8, $Vg7), o($Vk8, $Vh7, {
      73: 3399,
      69: 3400,
      88: 3401,
      90: 3402,
      91: 3406,
      95: 3407,
      92: [1, 3403],
      93: [1, 3404],
      94: [1, 3405],
      97: $Vx8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 3409,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Vk8, $Vj7), o($Vy8, $Vr1, {
      89: 3410
    }), o($Vz8, $Vs1, {
      95: 3080,
      91: 3411,
      97: $Vl8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VA8, $Vu1, {
      82: 3412
    }), o($VA8, $Vu1, {
      82: 3413
    }), o($VA8, $Vu1, {
      82: 3414
    }), o($Vk8, $Vv1, {
      101: 3084,
      103: 3085,
      87: 3415,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VB8, $Vo7), o($VB8, $Vp7), o($Vy8, $VA1), o($Vy8, $VB1), o($Vy8, $VC1), o($Vy8, $VD1), o($VA8, $VE1), o($VF1, $VG1, {
      158: 3416
    }), o($VC8, $VI1), {
      115: [1, 3417],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VB8, $V11), o($VB8, $V21), {
      19: [1, 3421],
      21: [1, 3425],
      22: 3419,
      32: 3418,
      196: 3420,
      210: 3422,
      211: [1, 3424],
      212: [1, 3423]
    }, {
      96: [1, 3426]
    }, o($Vy8, $VJ1), o($VA8, $Vq), o($VA8, $Vr), {
      96: [1, 3428],
      102: 3427,
      104: [1, 3429],
      105: [1, 3430],
      106: 3431,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3432]
    }, o($VA8, $Vt), o($VA8, $Vu), o($Vd8, $Vn1, {
      78: 3433
    }), o($Va1, $VU3), {
      117: [1, 3434]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3435,
      210: 52,
      211: $Vp
    }, {
      19: $VD8,
      21: $VE8,
      22: 3437,
      96: [1, 3448],
      104: [1, 3449],
      105: [1, 3450],
      106: 3447,
      177: 3438,
      187: 3436,
      192: 3441,
      193: 3442,
      194: 3443,
      197: 3446,
      200: [1, 3451],
      201: [1, 3452],
      202: [1, 3457],
      203: [1, 3458],
      204: [1, 3459],
      205: [1, 3460],
      206: [1, 3453],
      207: [1, 3454],
      208: [1, 3455],
      209: [1, 3456],
      210: 3440,
      211: $VF8
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3461,
      210: 52,
      211: $Vp
    }, {
      19: $VG8,
      21: $VH8,
      22: 3463,
      96: [1, 3474],
      104: [1, 3475],
      105: [1, 3476],
      106: 3473,
      177: 3464,
      187: 3462,
      192: 3467,
      193: 3468,
      194: 3469,
      197: 3472,
      200: [1, 3477],
      201: [1, 3478],
      202: [1, 3483],
      203: [1, 3484],
      204: [1, 3485],
      205: [1, 3486],
      206: [1, 3479],
      207: [1, 3480],
      208: [1, 3481],
      209: [1, 3482],
      210: 3466,
      211: $VI8
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 3487]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3488,
      210: 52,
      211: $Vp
    }, {
      19: $VJ8,
      21: $VK8,
      22: 3490,
      96: [1, 3501],
      104: [1, 3502],
      105: [1, 3503],
      106: 3500,
      177: 3491,
      187: 3489,
      192: 3494,
      193: 3495,
      194: 3496,
      197: 3499,
      200: [1, 3504],
      201: [1, 3505],
      202: [1, 3510],
      203: [1, 3511],
      204: [1, 3512],
      205: [1, 3513],
      206: [1, 3506],
      207: [1, 3507],
      208: [1, 3508],
      209: [1, 3509],
      210: 3493,
      211: $VL8
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Vw2, $Vv2, {
      80: 3148,
      188: 3149,
      79: 3514,
      186: $Vm8
    }), o($Va1, $VT1), o($Va1, $Vl), o($Va1, $Vm), o($Va1, $Vq), o($Va1, $Vr), o($Va1, $Vs), o($Va1, $Vt), o($Va1, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3515,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vw2, $Vv2, {
      80: 3148,
      188: 3149,
      79: 3516,
      186: $Vm8
    }), o($Vo1, $Vz2, {
      95: 2611,
      91: 3517,
      97: $Vt7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vn2, $VA2), o($Vn2, $Vb3), o($Va1, $VE4), o($VL3, $VM3), o($Vm1, $VN3), o($VL3, $VO3, {
      31: 3518,
      189: [1, 3519]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3520,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Va1, $VT3), o($Vo1, $VN3), o($Va1, $VO3, {
      31: 3521,
      189: [1, 3522]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3523,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vq1, $VV3), o($Vt1, $VW3), o($Vt1, $VX3), o($Vt1, $VY3), {
      96: [1, 3524]
    }, o($Vt1, $VJ1), {
      96: [1, 3526],
      102: 3525,
      104: [1, 3527],
      105: [1, 3528],
      106: 3529,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3530]
    }, o($Ve2, $VU3), o($Vp1, $VN3), o($Ve2, $VO3, {
      31: 3531,
      189: [1, 3532]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3533,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vt1, $Vg4), {
      117: [1, 3534]
    }, {
      19: [1, 3537],
      21: [1, 3540],
      22: 3536,
      83: 3535,
      210: 3538,
      211: [1, 3539]
    }, o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $Vu7,
      21: $Vv7,
      22: 3542,
      83: 3541,
      210: 2646,
      211: $Vw7
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $Vx7,
      21: $Vy7,
      22: 3544,
      83: 3543,
      210: 2672,
      211: $Vz7
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $VA7,
      21: $VB7,
      22: 3546,
      83: 3545,
      210: 2699,
      211: $VC7
    }, o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VD7,
      21: $VE7,
      22: 3548,
      83: 3547,
      210: 2726,
      211: $VF7
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VG7,
      21: $VH7,
      22: 3550,
      83: 3549,
      210: 2752,
      211: $VI7
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $VJ7,
      21: $VK7,
      22: 3552,
      83: 3551,
      210: 2779,
      211: $VL7
    }, o($VH4, $Vv2, {
      80: 3234,
      188: 3235,
      79: 3553,
      186: $Vo8
    }), o($VC3, $VT1), o($VC3, $Vl), o($VC3, $Vm), o($VC3, $Vq), o($VC3, $Vr), o($VC3, $Vs), o($VC3, $Vt), o($VC3, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3554,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VH4, $Vv2, {
      80: 3234,
      188: 3235,
      79: 3555,
      186: $Vo8
    }), o($VF3, $Vz2, {
      95: 2824,
      91: 3556,
      97: $VM7,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VF4, $VA2), o($VF4, $Vb3), o($VC3, $VE4), o($VI5, $VM3), o($VE3, $VN3), o($VI5, $VO3, {
      31: 3557,
      189: [1, 3558]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3559,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VC3, $VT3), o($VF3, $VN3), o($VC3, $VO3, {
      31: 3560,
      189: [1, 3561]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3562,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VH3, $VV3), o($VI3, $VW3), o($VI3, $VX3), o($VI3, $VY3), {
      96: [1, 3563]
    }, o($VI3, $VJ1), {
      96: [1, 3565],
      102: 3564,
      104: [1, 3566],
      105: [1, 3567],
      106: 3568,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3569]
    }, o($VJ5, $VU3), o($VG3, $VN3), o($VJ5, $VO3, {
      31: 3570,
      189: [1, 3571]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3572,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($VI3, $Vg4), {
      117: [1, 3573]
    }, {
      19: [1, 3576],
      21: [1, 3579],
      22: 3575,
      83: 3574,
      210: 3577,
      211: [1, 3578]
    }, o($VG4, $VU1), o($VG4, $VV1), o($VG4, $VW1), o($VE3, $Vz5), o($VE3, $VA5), {
      19: $VN7,
      21: $VO7,
      22: 3581,
      83: 3580,
      210: 2859,
      211: $VP7
    }, o($VH4, $VU1), o($VH4, $VV1), o($VH4, $VW1), o($VF3, $Vz5), o($VF3, $VA5), {
      19: $VQ7,
      21: $VR7,
      22: 3583,
      83: 3582,
      210: 2885,
      211: $VS7
    }, o($VI3, $VB5), o($VI3, $VE1), o($VI3, $Vq), o($VI3, $Vr), o($VI3, $Vt), o($VI3, $Vu), o($VJ4, $VU1), o($VJ4, $VV1), o($VJ4, $VW1), o($VG3, $Vz5), o($VG3, $VA5), {
      19: $VT7,
      21: $VU7,
      22: 3585,
      83: 3584,
      210: 2912,
      211: $VV7
    }, o($VG4, $VU1), o($VG4, $VV1), o($VG4, $VW1), o($VE3, $Vz5), o($VE3, $VA5), {
      19: $VW7,
      21: $VX7,
      22: 3587,
      83: 3586,
      210: 2939,
      211: $VY7
    }, o($VH4, $VU1), o($VH4, $VV1), o($VH4, $VW1), o($VF3, $Vz5), o($VF3, $VA5), {
      19: $VZ7,
      21: $V_7,
      22: 3589,
      83: 3588,
      210: 2965,
      211: $V$7
    }, o($VI3, $VB5), o($VI3, $VE1), o($VI3, $Vq), o($VI3, $Vr), o($VI3, $Vt), o($VI3, $Vu), o($VJ4, $VU1), o($VJ4, $VV1), o($VJ4, $VW1), o($VG3, $Vz5), o($VG3, $VA5), {
      19: $V08,
      21: $V18,
      22: 3591,
      83: 3590,
      210: 2992,
      211: $V28
    }, o($V38, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3592,
      210: 52,
      211: $Vp
    }, {
      19: $VM8,
      21: $VN8,
      22: 3594,
      96: [1, 3605],
      104: [1, 3606],
      105: [1, 3607],
      106: 3604,
      177: 3595,
      187: 3593,
      192: 3598,
      193: 3599,
      194: 3600,
      197: 3603,
      200: [1, 3608],
      201: [1, 3609],
      202: [1, 3614],
      203: [1, 3615],
      204: [1, 3616],
      205: [1, 3617],
      206: [1, 3610],
      207: [1, 3611],
      208: [1, 3612],
      209: [1, 3613],
      210: 3597,
      211: $VO8
    }, o($VG6, $Vd7, {
      57: 3618,
      49: [1, 3619]
    }), o($VI6, $Ve7), o($VI6, $Vf7, {
      70: 3620,
      72: 3621,
      74: 3622,
      40: 3623,
      114: 3624,
      75: [1, 3625],
      76: [1, 3626],
      77: [1, 3627],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($VI6, $Vg7), o($VI6, $Vh7, {
      73: 3628,
      69: 3629,
      88: 3630,
      90: 3631,
      91: 3635,
      95: 3636,
      92: [1, 3632],
      93: [1, 3633],
      94: [1, 3634],
      97: $VP8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 3638,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VI6, $Vj7), o($Vk7, $Vr1, {
      89: 3639
    }), o($Vl7, $Vs1, {
      95: 3329,
      91: 3640,
      97: $Vs8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vm7, $Vu1, {
      82: 3641
    }), o($Vm7, $Vu1, {
      82: 3642
    }), o($Vm7, $Vu1, {
      82: 3643
    }), o($VI6, $Vv1, {
      101: 3333,
      103: 3334,
      87: 3644,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vn7, $Vo7), o($Vn7, $Vp7), o($Vk7, $VA1), o($Vk7, $VB1), o($Vk7, $VC1), o($Vk7, $VD1), o($Vm7, $VE1), o($VF1, $VG1, {
      158: 3645
    }), o($Vq7, $VI1), {
      115: [1, 3646],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vn7, $V11), o($Vn7, $V21), {
      19: [1, 3650],
      21: [1, 3654],
      22: 3648,
      32: 3647,
      196: 3649,
      210: 3651,
      211: [1, 3653],
      212: [1, 3652]
    }, {
      96: [1, 3655]
    }, o($Vk7, $VJ1), o($Vm7, $Vq), o($Vm7, $Vr), {
      96: [1, 3657],
      102: 3656,
      104: [1, 3658],
      105: [1, 3659],
      106: 3660,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3661]
    }, o($Vm7, $Vt), o($Vm7, $Vu), o($VI6, $Ve7), o($VI6, $Vf7, {
      70: 3662,
      72: 3663,
      74: 3664,
      40: 3665,
      114: 3666,
      75: [1, 3667],
      76: [1, 3668],
      77: [1, 3669],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($VI6, $Vg7), o($VI6, $Vh7, {
      73: 3670,
      69: 3671,
      88: 3672,
      90: 3673,
      91: 3677,
      95: 3678,
      92: [1, 3674],
      93: [1, 3675],
      94: [1, 3676],
      97: $VQ8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 3680,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VI6, $Vj7), o($Vk7, $Vr1, {
      89: 3681
    }), o($Vl7, $Vs1, {
      95: 3362,
      91: 3682,
      97: $Vu8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vm7, $Vu1, {
      82: 3683
    }), o($Vm7, $Vu1, {
      82: 3684
    }), o($Vm7, $Vu1, {
      82: 3685
    }), o($VI6, $Vv1, {
      101: 3366,
      103: 3367,
      87: 3686,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vn7, $Vo7), o($Vn7, $Vp7), o($Vk7, $VA1), o($Vk7, $VB1), o($Vk7, $VC1), o($Vk7, $VD1), o($Vm7, $VE1), o($VF1, $VG1, {
      158: 3687
    }), o($Vq7, $VI1), {
      115: [1, 3688],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vn7, $V11), o($Vn7, $V21), {
      19: [1, 3692],
      21: [1, 3696],
      22: 3690,
      32: 3689,
      196: 3691,
      210: 3693,
      211: [1, 3695],
      212: [1, 3694]
    }, {
      96: [1, 3697]
    }, o($Vk7, $VJ1), o($Vm7, $Vq), o($Vm7, $Vr), {
      96: [1, 3699],
      102: 3698,
      104: [1, 3700],
      105: [1, 3701],
      106: 3702,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 3703]
    }, o($Vm7, $Vt), o($Vm7, $Vu), {
      117: [1, 3704]
    }, o($Vb8, $VV3), o($Vm7, $Vb3), o($Vm7, $Vc3), o($Vm7, $Vd3), o($Vm7, $Ve3), o($Vm7, $Vf3), {
      107: [1, 3705]
    }, o($Vm7, $Vk3), o($Vn7, $VY4), o($Vq7, $VB5), o($Vq7, $VE1), o($Vq7, $Vq), o($Vq7, $Vr), o($Vq7, $Vt), o($Vq7, $Vu), o($VR8, $Vv2, {
      79: 3706,
      80: 3707,
      188: 3708,
      186: $VS8
    }), o($Vj8, $V58), o($Vx, $Vg, {
      51: 3710,
      55: 3711,
      36: 3712,
      39: $Vy
    }), o($Vk8, $V68), o($Vx, $Vg, {
      55: 3713,
      36: 3714,
      39: $Vy
    }), o($Vk8, $V78), o($Vk8, $V88), o($Vk8, $Vo7), o($Vk8, $Vp7), {
      115: [1, 3715],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vk8, $V11), o($Vk8, $V21), {
      19: [1, 3719],
      21: [1, 3723],
      22: 3717,
      32: 3716,
      196: 3718,
      210: 3720,
      211: [1, 3722],
      212: [1, 3721]
    }, o($Vk8, $V98), o($Vk8, $Va8), o($VT8, $Vr1, {
      89: 3724
    }), o($Vk8, $Vs1, {
      95: 3407,
      91: 3725,
      97: $Vx8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA1), o($VT8, $VB1), o($VT8, $VC1), o($VT8, $VD1), {
      96: [1, 3726]
    }, o($VT8, $VJ1), {
      66: [1, 3727]
    }, o($Vz8, $Vz2, {
      95: 3080,
      91: 3728,
      97: $Vl8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vy8, $VA2), o($Vk8, $VB2, {
      86: 3729,
      91: 3730,
      87: 3731,
      95: 3732,
      101: 3734,
      103: 3735,
      97: $VU8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VD2, {
      86: 3729,
      91: 3730,
      87: 3731,
      95: 3732,
      101: 3734,
      103: 3735,
      97: $VU8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VE2, {
      86: 3729,
      91: 3730,
      87: 3731,
      95: 3732,
      101: 3734,
      103: 3735,
      97: $VU8,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VC8, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3736],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3737,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VB8, $VT1), o($VB8, $Vl), o($VB8, $Vm), o($VB8, $Vq), o($VB8, $Vr), o($VB8, $Vs), o($VB8, $Vt), o($VB8, $Vu), o($Vy8, $Vb3), o($VC8, $Vc3), o($VC8, $Vd3), o($VC8, $Ve3), o($VC8, $Vf3), {
      107: [1, 3738]
    }, o($VC8, $Vk3), o($VR8, $Vv2, {
      80: 3707,
      188: 3708,
      79: 3739,
      186: $VS8
    }), o($Vo1, $VY4), {
      189: [1, 3742],
      190: 3740,
      191: [1, 3741]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 3743,
      199: 3744,
      107: [1, 3745]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 3748],
      190: 3746,
      191: [1, 3747]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 3749,
      199: 3750,
      107: [1, 3751]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 3754],
      21: [1, 3757],
      22: 3753,
      83: 3752,
      210: 3755,
      211: [1, 3756]
    }, {
      189: [1, 3760],
      190: 3758,
      191: [1, 3759]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 3761,
      199: 3762,
      107: [1, 3763]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($Va1, $VU3), {
      117: [1, 3764]
    }, o($Va1, $VM3), o($Vn2, $VV3), o($Vu2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3765,
      210: 52,
      211: $Vp
    }, {
      19: $VV8,
      21: $VW8,
      22: 3767,
      96: [1, 3778],
      104: [1, 3779],
      105: [1, 3780],
      106: 3777,
      177: 3768,
      187: 3766,
      192: 3771,
      193: 3772,
      194: 3773,
      197: 3776,
      200: [1, 3781],
      201: [1, 3782],
      202: [1, 3787],
      203: [1, 3788],
      204: [1, 3789],
      205: [1, 3790],
      206: [1, 3783],
      207: [1, 3784],
      208: [1, 3785],
      209: [1, 3786],
      210: 3770,
      211: $VX8
    }, o($Vw2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3791,
      210: 52,
      211: $Vp
    }, {
      19: $VY8,
      21: $VZ8,
      22: 3793,
      96: [1, 3804],
      104: [1, 3805],
      105: [1, 3806],
      106: 3803,
      177: 3794,
      187: 3792,
      192: 3797,
      193: 3798,
      194: 3799,
      197: 3802,
      200: [1, 3807],
      201: [1, 3808],
      202: [1, 3813],
      203: [1, 3814],
      204: [1, 3815],
      205: [1, 3816],
      206: [1, 3809],
      207: [1, 3810],
      208: [1, 3811],
      209: [1, 3812],
      210: 3796,
      211: $V_8
    }, o($Vt1, $Vb3), o($Vt1, $Vc3), o($Vt1, $Vd3), o($Vt1, $Ve3), o($Vt1, $Vf3), {
      107: [1, 3817]
    }, o($Vt1, $Vk3), o($Vy2, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3818,
      210: 52,
      211: $Vp
    }, {
      19: $V$8,
      21: $V09,
      22: 3820,
      96: [1, 3831],
      104: [1, 3832],
      105: [1, 3833],
      106: 3830,
      177: 3821,
      187: 3819,
      192: 3824,
      193: 3825,
      194: 3826,
      197: 3829,
      200: [1, 3834],
      201: [1, 3835],
      202: [1, 3840],
      203: [1, 3841],
      204: [1, 3842],
      205: [1, 3843],
      206: [1, 3836],
      207: [1, 3837],
      208: [1, 3838],
      209: [1, 3839],
      210: 3823,
      211: $V19
    }, o($Vp1, $VY4), o($VH1, $VB5), o($VH1, $VE1), o($VH1, $Vq), o($VH1, $Vr), o($VH1, $Vt), o($VH1, $Vu), o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($VC3, $VU3), {
      117: [1, 3844]
    }, o($VC3, $VM3), o($VF4, $VV3), o($VG4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3845,
      210: 52,
      211: $Vp
    }, {
      19: $V29,
      21: $V39,
      22: 3847,
      96: [1, 3858],
      104: [1, 3859],
      105: [1, 3860],
      106: 3857,
      177: 3848,
      187: 3846,
      192: 3851,
      193: 3852,
      194: 3853,
      197: 3856,
      200: [1, 3861],
      201: [1, 3862],
      202: [1, 3867],
      203: [1, 3868],
      204: [1, 3869],
      205: [1, 3870],
      206: [1, 3863],
      207: [1, 3864],
      208: [1, 3865],
      209: [1, 3866],
      210: 3850,
      211: $V49
    }, o($VH4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3871,
      210: 52,
      211: $Vp
    }, {
      19: $V59,
      21: $V69,
      22: 3873,
      96: [1, 3884],
      104: [1, 3885],
      105: [1, 3886],
      106: 3883,
      177: 3874,
      187: 3872,
      192: 3877,
      193: 3878,
      194: 3879,
      197: 3882,
      200: [1, 3887],
      201: [1, 3888],
      202: [1, 3893],
      203: [1, 3894],
      204: [1, 3895],
      205: [1, 3896],
      206: [1, 3889],
      207: [1, 3890],
      208: [1, 3891],
      209: [1, 3892],
      210: 3876,
      211: $V79
    }, o($VI3, $Vb3), o($VI3, $Vc3), o($VI3, $Vd3), o($VI3, $Ve3), o($VI3, $Vf3), {
      107: [1, 3897]
    }, o($VI3, $Vk3), o($VJ4, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 3898,
      210: 52,
      211: $Vp
    }, {
      19: $V89,
      21: $V99,
      22: 3900,
      96: [1, 3911],
      104: [1, 3912],
      105: [1, 3913],
      106: 3910,
      177: 3901,
      187: 3899,
      192: 3904,
      193: 3905,
      194: 3906,
      197: 3909,
      200: [1, 3914],
      201: [1, 3915],
      202: [1, 3920],
      203: [1, 3921],
      204: [1, 3922],
      205: [1, 3923],
      206: [1, 3916],
      207: [1, 3917],
      208: [1, 3918],
      209: [1, 3919],
      210: 3903,
      211: $Va9
    }, o($VG3, $VY4), o($VJ3, $VB5), o($VJ3, $VE1), o($VJ3, $Vq), o($VJ3, $Vr), o($VJ3, $Vt), o($VJ3, $Vu), o($VE3, $V66), o($VE3, $VE1), o($VF3, $V66), o($VF3, $VE1), o($VG3, $V66), o($VG3, $VE1), o($VE3, $V66), o($VE3, $VE1), o($VF3, $V66), o($VF3, $VE1), o($VG3, $V66), o($VG3, $VE1), {
      189: [1, 3926],
      190: 3924,
      191: [1, 3925]
    }, o($Vy6, $VM5), o($Vy6, $VN5), o($Vy6, $VO5), o($Vy6, $Vq), o($Vy6, $Vr), o($Vy6, $Vj4), o($Vy6, $Vk4), o($Vy6, $Vl4), o($Vy6, $Vt), o($Vy6, $Vu), o($Vy6, $Vm4), o($Vy6, $Vn4, {
      198: 3927,
      199: 3928,
      107: [1, 3929]
    }), o($Vy6, $Vo4), o($Vy6, $Vp4), o($Vy6, $Vq4), o($Vy6, $Vr4), o($Vy6, $Vs4), o($Vy6, $Vt4), o($Vy6, $Vu4), o($Vy6, $Vv4), o($Vy6, $Vw4), o($Vb9, $Vg3), o($Vb9, $Vh3), o($Vb9, $Vi3), o($Vb9, $Vj3), o($VI6, $V68), o($Vx, $Vg, {
      55: 3930,
      36: 3931,
      39: $Vy
    }), o($VI6, $V78), o($VI6, $V88), o($VI6, $Vo7), o($VI6, $Vp7), {
      115: [1, 3932],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VI6, $V11), o($VI6, $V21), {
      19: [1, 3936],
      21: [1, 3940],
      22: 3934,
      32: 3933,
      196: 3935,
      210: 3937,
      211: [1, 3939],
      212: [1, 3938]
    }, o($VI6, $V98), o($VI6, $Va8), o($Vb8, $Vr1, {
      89: 3941
    }), o($VI6, $Vs1, {
      95: 3636,
      91: 3942,
      97: $VP8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA1), o($Vb8, $VB1), o($Vb8, $VC1), o($Vb8, $VD1), {
      96: [1, 3943]
    }, o($Vb8, $VJ1), {
      66: [1, 3944]
    }, o($Vl7, $Vz2, {
      95: 3329,
      91: 3945,
      97: $Vs8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vk7, $VA2), o($VI6, $VB2, {
      86: 3946,
      91: 3947,
      87: 3948,
      95: 3949,
      101: 3951,
      103: 3952,
      97: $Vc9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VD2, {
      86: 3946,
      91: 3947,
      87: 3948,
      95: 3949,
      101: 3951,
      103: 3952,
      97: $Vc9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VE2, {
      86: 3946,
      91: 3947,
      87: 3948,
      95: 3949,
      101: 3951,
      103: 3952,
      97: $Vc9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vq7, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3953],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3954,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vn7, $VT1), o($Vn7, $Vl), o($Vn7, $Vm), o($Vn7, $Vq), o($Vn7, $Vr), o($Vn7, $Vs), o($Vn7, $Vt), o($Vn7, $Vu), o($Vk7, $Vb3), o($Vq7, $Vc3), o($Vq7, $Vd3), o($Vq7, $Ve3), o($Vq7, $Vf3), {
      107: [1, 3955]
    }, o($Vq7, $Vk3), o($VI6, $V78), o($VI6, $V88), o($VI6, $Vo7), o($VI6, $Vp7), {
      115: [1, 3956],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VI6, $V11), o($VI6, $V21), {
      19: [1, 3960],
      21: [1, 3964],
      22: 3958,
      32: 3957,
      196: 3959,
      210: 3961,
      211: [1, 3963],
      212: [1, 3962]
    }, o($VI6, $V98), o($VI6, $Va8), o($Vb8, $Vr1, {
      89: 3965
    }), o($VI6, $Vs1, {
      95: 3678,
      91: 3966,
      97: $VQ8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA1), o($Vb8, $VB1), o($Vb8, $VC1), o($Vb8, $VD1), {
      96: [1, 3967]
    }, o($Vb8, $VJ1), {
      66: [1, 3968]
    }, o($Vl7, $Vz2, {
      95: 3362,
      91: 3969,
      97: $Vu8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vk7, $VA2), o($VI6, $VB2, {
      86: 3970,
      91: 3971,
      87: 3972,
      95: 3973,
      101: 3975,
      103: 3976,
      97: $Vd9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VD2, {
      86: 3970,
      91: 3971,
      87: 3972,
      95: 3973,
      101: 3975,
      103: 3976,
      97: $Vd9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VE2, {
      86: 3970,
      91: 3971,
      87: 3972,
      95: 3973,
      101: 3975,
      103: 3976,
      97: $Vd9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vq7, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 3977],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 3978,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vn7, $VT1), o($Vn7, $Vl), o($Vn7, $Vm), o($Vn7, $Vq), o($Vn7, $Vr), o($Vn7, $Vs), o($Vn7, $Vt), o($Vn7, $Vu), o($Vk7, $Vb3), o($Vq7, $Vc3), o($Vq7, $Vd3), o($Vq7, $Ve3), o($Vq7, $Vf3), {
      107: [1, 3979]
    }, o($Vq7, $Vk3), o($VI6, $VY4), {
      19: [1, 3982],
      21: [1, 3985],
      22: 3981,
      83: 3980,
      210: 3983,
      211: [1, 3984]
    }, o($V16, $Vq8), o($Vd8, $VN3), o($V16, $VO3, {
      31: 3986,
      189: [1, 3987]
    }), {
      19: $VP3,
      21: $VQ3,
      22: 627,
      125: 3988,
      195: $VR3,
      210: 630,
      211: $VS3
    }, o($Vj8, $Vr8), o($Vk8, $VJ6, {
      56: 3989
    }), o($VC, $VD, {
      59: 3990,
      69: 3991,
      71: 3992,
      72: 3993,
      88: 3996,
      90: 3997,
      83: 3999,
      84: 4000,
      85: 4001,
      74: 4002,
      40: 4003,
      91: 4007,
      22: 4008,
      87: 4010,
      114: 4011,
      95: 4015,
      210: 4018,
      101: 4019,
      103: 4020,
      19: [1, 4017],
      21: [1, 4022],
      65: [1, 3994],
      67: [1, 3995],
      75: [1, 4012],
      76: [1, 4013],
      77: [1, 4014],
      81: [1, 3998],
      92: [1, 4004],
      93: [1, 4005],
      94: [1, 4006],
      97: $Ve9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 4009],
      211: [1, 4021]
    }), o($Vk8, $Vt8), o($VC, $VD, {
      59: 4023,
      69: 4024,
      71: 4025,
      72: 4026,
      88: 4029,
      90: 4030,
      83: 4032,
      84: 4033,
      85: 4034,
      74: 4035,
      40: 4036,
      91: 4040,
      22: 4041,
      87: 4043,
      114: 4044,
      95: 4048,
      210: 4051,
      101: 4052,
      103: 4053,
      19: [1, 4050],
      21: [1, 4055],
      65: [1, 4027],
      67: [1, 4028],
      75: [1, 4045],
      76: [1, 4046],
      77: [1, 4047],
      81: [1, 4031],
      92: [1, 4037],
      93: [1, 4038],
      94: [1, 4039],
      97: $Vf9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 4042],
      211: [1, 4054]
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4056,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vk8, $VT1), o($Vk8, $Vl), o($Vk8, $Vm), o($Vk8, $Vq), o($Vk8, $Vr), o($Vk8, $Vs), o($Vk8, $Vt), o($Vk8, $Vu), o($Vk8, $Vz2, {
      95: 3407,
      91: 4057,
      97: $Vx8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA2), o($VT8, $Vb3), o($Vk8, $Vv8), o($Vy8, $VV3), o($VA8, $VW3), o($VA8, $VX3), o($VA8, $VY3), {
      96: [1, 4058]
    }, o($VA8, $VJ1), {
      96: [1, 4060],
      102: 4059,
      104: [1, 4061],
      105: [1, 4062],
      106: 4063,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4064]
    }, o($VA8, $Vg4), {
      117: [1, 4065]
    }, {
      19: [1, 4068],
      21: [1, 4071],
      22: 4067,
      83: 4066,
      210: 4069,
      211: [1, 4070]
    }, o($V16, $Vw8), o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VD8,
      21: $VE8,
      22: 4073,
      83: 4072,
      210: 3440,
      211: $VF8
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VG8,
      21: $VH8,
      22: 4075,
      83: 4074,
      210: 3466,
      211: $VI8
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $VJ8,
      21: $VK8,
      22: 4077,
      83: 4076,
      210: 3493,
      211: $VL8
    }, o($Vo1, $VY4), {
      189: [1, 4080],
      190: 4078,
      191: [1, 4079]
    }, o($Vm1, $VM5), o($Vm1, $VN5), o($Vm1, $VO5), o($Vm1, $Vq), o($Vm1, $Vr), o($Vm1, $Vj4), o($Vm1, $Vk4), o($Vm1, $Vl4), o($Vm1, $Vt), o($Vm1, $Vu), o($Vm1, $Vm4), o($Vm1, $Vn4, {
      198: 4081,
      199: 4082,
      107: [1, 4083]
    }), o($Vm1, $Vo4), o($Vm1, $Vp4), o($Vm1, $Vq4), o($Vm1, $Vr4), o($Vm1, $Vs4), o($Vm1, $Vt4), o($Vm1, $Vu4), o($Vm1, $Vv4), o($Vm1, $Vw4), o($VP5, $Vg3), o($VP5, $Vh3), o($VP5, $Vi3), o($VP5, $Vj3), {
      189: [1, 4086],
      190: 4084,
      191: [1, 4085]
    }, o($Vo1, $VM5), o($Vo1, $VN5), o($Vo1, $VO5), o($Vo1, $Vq), o($Vo1, $Vr), o($Vo1, $Vj4), o($Vo1, $Vk4), o($Vo1, $Vl4), o($Vo1, $Vt), o($Vo1, $Vu), o($Vo1, $Vm4), o($Vo1, $Vn4, {
      198: 4087,
      199: 4088,
      107: [1, 4089]
    }), o($Vo1, $Vo4), o($Vo1, $Vp4), o($Vo1, $Vq4), o($Vo1, $Vr4), o($Vo1, $Vs4), o($Vo1, $Vt4), o($Vo1, $Vu4), o($Vo1, $Vv4), o($Vo1, $Vw4), o($VQ5, $Vg3), o($VQ5, $Vh3), o($VQ5, $Vi3), o($VQ5, $Vj3), {
      19: [1, 4092],
      21: [1, 4095],
      22: 4091,
      83: 4090,
      210: 4093,
      211: [1, 4094]
    }, {
      189: [1, 4098],
      190: 4096,
      191: [1, 4097]
    }, o($Vp1, $VM5), o($Vp1, $VN5), o($Vp1, $VO5), o($Vp1, $Vq), o($Vp1, $Vr), o($Vp1, $Vj4), o($Vp1, $Vk4), o($Vp1, $Vl4), o($Vp1, $Vt), o($Vp1, $Vu), o($Vp1, $Vm4), o($Vp1, $Vn4, {
      198: 4099,
      199: 4100,
      107: [1, 4101]
    }), o($Vp1, $Vo4), o($Vp1, $Vp4), o($Vp1, $Vq4), o($Vp1, $Vr4), o($Vp1, $Vs4), o($Vp1, $Vt4), o($Vp1, $Vu4), o($Vp1, $Vv4), o($Vp1, $Vw4), o($VR5, $Vg3), o($VR5, $Vh3), o($VR5, $Vi3), o($VR5, $Vj3), o($VF3, $VY4), {
      189: [1, 4104],
      190: 4102,
      191: [1, 4103]
    }, o($VE3, $VM5), o($VE3, $VN5), o($VE3, $VO5), o($VE3, $Vq), o($VE3, $Vr), o($VE3, $Vj4), o($VE3, $Vk4), o($VE3, $Vl4), o($VE3, $Vt), o($VE3, $Vu), o($VE3, $Vm4), o($VE3, $Vn4, {
      198: 4105,
      199: 4106,
      107: [1, 4107]
    }), o($VE3, $Vo4), o($VE3, $Vp4), o($VE3, $Vq4), o($VE3, $Vr4), o($VE3, $Vs4), o($VE3, $Vt4), o($VE3, $Vu4), o($VE3, $Vv4), o($VE3, $Vw4), o($V37, $Vg3), o($V37, $Vh3), o($V37, $Vi3), o($V37, $Vj3), {
      189: [1, 4110],
      190: 4108,
      191: [1, 4109]
    }, o($VF3, $VM5), o($VF3, $VN5), o($VF3, $VO5), o($VF3, $Vq), o($VF3, $Vr), o($VF3, $Vj4), o($VF3, $Vk4), o($VF3, $Vl4), o($VF3, $Vt), o($VF3, $Vu), o($VF3, $Vm4), o($VF3, $Vn4, {
      198: 4111,
      199: 4112,
      107: [1, 4113]
    }), o($VF3, $Vo4), o($VF3, $Vp4), o($VF3, $Vq4), o($VF3, $Vr4), o($VF3, $Vs4), o($VF3, $Vt4), o($VF3, $Vu4), o($VF3, $Vv4), o($VF3, $Vw4), o($V47, $Vg3), o($V47, $Vh3), o($V47, $Vi3), o($V47, $Vj3), {
      19: [1, 4116],
      21: [1, 4119],
      22: 4115,
      83: 4114,
      210: 4117,
      211: [1, 4118]
    }, {
      189: [1, 4122],
      190: 4120,
      191: [1, 4121]
    }, o($VG3, $VM5), o($VG3, $VN5), o($VG3, $VO5), o($VG3, $Vq), o($VG3, $Vr), o($VG3, $Vj4), o($VG3, $Vk4), o($VG3, $Vl4), o($VG3, $Vt), o($VG3, $Vu), o($VG3, $Vm4), o($VG3, $Vn4, {
      198: 4123,
      199: 4124,
      107: [1, 4125]
    }), o($VG3, $Vo4), o($VG3, $Vp4), o($VG3, $Vq4), o($VG3, $Vr4), o($VG3, $Vs4), o($VG3, $Vt4), o($VG3, $Vu4), o($VG3, $Vv4), o($VG3, $Vw4), o($V57, $Vg3), o($V57, $Vh3), o($V57, $Vi3), o($V57, $Vj3), o($V38, $VU1), o($V38, $VV1), o($V38, $VW1), o($Vy6, $Vz5), o($Vy6, $VA5), {
      19: $VM8,
      21: $VN8,
      22: 4127,
      83: 4126,
      210: 3597,
      211: $VO8
    }, o($VI6, $Vt8), o($VC, $VD, {
      59: 4128,
      69: 4129,
      71: 4130,
      72: 4131,
      88: 4134,
      90: 4135,
      83: 4137,
      84: 4138,
      85: 4139,
      74: 4140,
      40: 4141,
      91: 4145,
      22: 4146,
      87: 4148,
      114: 4149,
      95: 4153,
      210: 4156,
      101: 4157,
      103: 4158,
      19: [1, 4155],
      21: [1, 4160],
      65: [1, 4132],
      67: [1, 4133],
      75: [1, 4150],
      76: [1, 4151],
      77: [1, 4152],
      81: [1, 4136],
      92: [1, 4142],
      93: [1, 4143],
      94: [1, 4144],
      97: $Vg9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 4147],
      211: [1, 4159]
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4161,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VI6, $VT1), o($VI6, $Vl), o($VI6, $Vm), o($VI6, $Vq), o($VI6, $Vr), o($VI6, $Vs), o($VI6, $Vt), o($VI6, $Vu), o($VI6, $Vz2, {
      95: 3636,
      91: 4162,
      97: $VP8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA2), o($Vb8, $Vb3), o($VI6, $Vv8), o($Vk7, $VV3), o($Vm7, $VW3), o($Vm7, $VX3), o($Vm7, $VY3), {
      96: [1, 4163]
    }, o($Vm7, $VJ1), {
      96: [1, 4165],
      102: 4164,
      104: [1, 4166],
      105: [1, 4167],
      106: 4168,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4169]
    }, o($Vm7, $Vg4), {
      117: [1, 4170]
    }, {
      19: [1, 4173],
      21: [1, 4176],
      22: 4172,
      83: 4171,
      210: 4174,
      211: [1, 4175]
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4177,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VI6, $VT1), o($VI6, $Vl), o($VI6, $Vm), o($VI6, $Vq), o($VI6, $Vr), o($VI6, $Vs), o($VI6, $Vt), o($VI6, $Vu), o($VI6, $Vz2, {
      95: 3678,
      91: 4178,
      97: $VQ8,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA2), o($Vb8, $Vb3), o($VI6, $Vv8), o($Vk7, $VV3), o($Vm7, $VW3), o($Vm7, $VX3), o($Vm7, $VY3), {
      96: [1, 4179]
    }, o($Vm7, $VJ1), {
      96: [1, 4181],
      102: 4180,
      104: [1, 4182],
      105: [1, 4183],
      106: 4184,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4185]
    }, o($Vm7, $Vg4), {
      117: [1, 4186]
    }, {
      19: [1, 4189],
      21: [1, 4192],
      22: 4188,
      83: 4187,
      210: 4190,
      211: [1, 4191]
    }, o($Vm7, $VB5), o($Vm7, $VE1), o($Vm7, $Vq), o($Vm7, $Vr), o($Vm7, $Vt), o($Vm7, $Vu), o($VR8, $VN4), {
      19: $Vn,
      21: $Vo,
      22: 4193,
      210: 52,
      211: $Vp
    }, {
      19: $Vh9,
      21: $Vi9,
      22: 4195,
      96: [1, 4206],
      104: [1, 4207],
      105: [1, 4208],
      106: 4205,
      177: 4196,
      187: 4194,
      192: 4199,
      193: 4200,
      194: 4201,
      197: 4204,
      200: [1, 4209],
      201: [1, 4210],
      202: [1, 4215],
      203: [1, 4216],
      204: [1, 4217],
      205: [1, 4218],
      206: [1, 4211],
      207: [1, 4212],
      208: [1, 4213],
      209: [1, 4214],
      210: 4198,
      211: $Vj9
    }, o($Vj8, $Vd7, {
      57: 4219,
      49: [1, 4220]
    }), o($Vk8, $Ve7), o($Vk8, $Vf7, {
      70: 4221,
      72: 4222,
      74: 4223,
      40: 4224,
      114: 4225,
      75: [1, 4226],
      76: [1, 4227],
      77: [1, 4228],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Vk8, $Vg7), o($Vk8, $Vh7, {
      73: 4229,
      69: 4230,
      88: 4231,
      90: 4232,
      91: 4236,
      95: 4237,
      92: [1, 4233],
      93: [1, 4234],
      94: [1, 4235],
      97: $Vk9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 4239,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Vk8, $Vj7), o($Vy8, $Vr1, {
      89: 4240
    }), o($Vz8, $Vs1, {
      95: 4015,
      91: 4241,
      97: $Ve9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VA8, $Vu1, {
      82: 4242
    }), o($VA8, $Vu1, {
      82: 4243
    }), o($VA8, $Vu1, {
      82: 4244
    }), o($Vk8, $Vv1, {
      101: 4019,
      103: 4020,
      87: 4245,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VB8, $Vo7), o($VB8, $Vp7), o($Vy8, $VA1), o($Vy8, $VB1), o($Vy8, $VC1), o($Vy8, $VD1), o($VA8, $VE1), o($VF1, $VG1, {
      158: 4246
    }), o($VC8, $VI1), {
      115: [1, 4247],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VB8, $V11), o($VB8, $V21), {
      19: [1, 4251],
      21: [1, 4255],
      22: 4249,
      32: 4248,
      196: 4250,
      210: 4252,
      211: [1, 4254],
      212: [1, 4253]
    }, {
      96: [1, 4256]
    }, o($Vy8, $VJ1), o($VA8, $Vq), o($VA8, $Vr), {
      96: [1, 4258],
      102: 4257,
      104: [1, 4259],
      105: [1, 4260],
      106: 4261,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4262]
    }, o($VA8, $Vt), o($VA8, $Vu), o($Vk8, $Ve7), o($Vk8, $Vf7, {
      70: 4263,
      72: 4264,
      74: 4265,
      40: 4266,
      114: 4267,
      75: [1, 4268],
      76: [1, 4269],
      77: [1, 4270],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Vk8, $Vg7), o($Vk8, $Vh7, {
      73: 4271,
      69: 4272,
      88: 4273,
      90: 4274,
      91: 4278,
      95: 4279,
      92: [1, 4275],
      93: [1, 4276],
      94: [1, 4277],
      97: $Vl9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 4281,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Vk8, $Vj7), o($Vy8, $Vr1, {
      89: 4282
    }), o($Vz8, $Vs1, {
      95: 4048,
      91: 4283,
      97: $Vf9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VA8, $Vu1, {
      82: 4284
    }), o($VA8, $Vu1, {
      82: 4285
    }), o($VA8, $Vu1, {
      82: 4286
    }), o($Vk8, $Vv1, {
      101: 4052,
      103: 4053,
      87: 4287,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VB8, $Vo7), o($VB8, $Vp7), o($Vy8, $VA1), o($Vy8, $VB1), o($Vy8, $VC1), o($Vy8, $VD1), o($VA8, $VE1), o($VF1, $VG1, {
      158: 4288
    }), o($VC8, $VI1), {
      115: [1, 4289],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VB8, $V11), o($VB8, $V21), {
      19: [1, 4293],
      21: [1, 4297],
      22: 4291,
      32: 4290,
      196: 4292,
      210: 4294,
      211: [1, 4296],
      212: [1, 4295]
    }, {
      96: [1, 4298]
    }, o($Vy8, $VJ1), o($VA8, $Vq), o($VA8, $Vr), {
      96: [1, 4300],
      102: 4299,
      104: [1, 4301],
      105: [1, 4302],
      106: 4303,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4304]
    }, o($VA8, $Vt), o($VA8, $Vu), {
      117: [1, 4305]
    }, o($VT8, $VV3), o($VA8, $Vb3), o($VA8, $Vc3), o($VA8, $Vd3), o($VA8, $Ve3), o($VA8, $Vf3), {
      107: [1, 4306]
    }, o($VA8, $Vk3), o($VB8, $VY4), o($VC8, $VB5), o($VC8, $VE1), o($VC8, $Vq), o($VC8, $Vr), o($VC8, $Vt), o($VC8, $Vu), o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($Vu2, $VU1), o($Vu2, $VV1), o($Vu2, $VW1), o($Vm1, $Vz5), o($Vm1, $VA5), {
      19: $VV8,
      21: $VW8,
      22: 4308,
      83: 4307,
      210: 3770,
      211: $VX8
    }, o($Vw2, $VU1), o($Vw2, $VV1), o($Vw2, $VW1), o($Vo1, $Vz5), o($Vo1, $VA5), {
      19: $VY8,
      21: $VZ8,
      22: 4310,
      83: 4309,
      210: 3796,
      211: $V_8
    }, o($Vt1, $VB5), o($Vt1, $VE1), o($Vt1, $Vq), o($Vt1, $Vr), o($Vt1, $Vt), o($Vt1, $Vu), o($Vy2, $VU1), o($Vy2, $VV1), o($Vy2, $VW1), o($Vp1, $Vz5), o($Vp1, $VA5), {
      19: $V$8,
      21: $V09,
      22: 4312,
      83: 4311,
      210: 3823,
      211: $V19
    }, o($VG4, $VU1), o($VG4, $VV1), o($VG4, $VW1), o($VE3, $Vz5), o($VE3, $VA5), {
      19: $V29,
      21: $V39,
      22: 4314,
      83: 4313,
      210: 3850,
      211: $V49
    }, o($VH4, $VU1), o($VH4, $VV1), o($VH4, $VW1), o($VF3, $Vz5), o($VF3, $VA5), {
      19: $V59,
      21: $V69,
      22: 4316,
      83: 4315,
      210: 3876,
      211: $V79
    }, o($VI3, $VB5), o($VI3, $VE1), o($VI3, $Vq), o($VI3, $Vr), o($VI3, $Vt), o($VI3, $Vu), o($VJ4, $VU1), o($VJ4, $VV1), o($VJ4, $VW1), o($VG3, $Vz5), o($VG3, $VA5), {
      19: $V89,
      21: $V99,
      22: 4318,
      83: 4317,
      210: 3903,
      211: $Va9
    }, o($Vy6, $V66), o($Vy6, $VE1), o($VI6, $Ve7), o($VI6, $Vf7, {
      70: 4319,
      72: 4320,
      74: 4321,
      40: 4322,
      114: 4323,
      75: [1, 4324],
      76: [1, 4325],
      77: [1, 4326],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($VI6, $Vg7), o($VI6, $Vh7, {
      73: 4327,
      69: 4328,
      88: 4329,
      90: 4330,
      91: 4334,
      95: 4335,
      92: [1, 4331],
      93: [1, 4332],
      94: [1, 4333],
      97: $Vm9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 4337,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($VI6, $Vj7), o($Vk7, $Vr1, {
      89: 4338
    }), o($Vl7, $Vs1, {
      95: 4153,
      91: 4339,
      97: $Vg9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vm7, $Vu1, {
      82: 4340
    }), o($Vm7, $Vu1, {
      82: 4341
    }), o($Vm7, $Vu1, {
      82: 4342
    }), o($VI6, $Vv1, {
      101: 4157,
      103: 4158,
      87: 4343,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vn7, $Vo7), o($Vn7, $Vp7), o($Vk7, $VA1), o($Vk7, $VB1), o($Vk7, $VC1), o($Vk7, $VD1), o($Vm7, $VE1), o($VF1, $VG1, {
      158: 4344
    }), o($Vq7, $VI1), {
      115: [1, 4345],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vn7, $V11), o($Vn7, $V21), {
      19: [1, 4349],
      21: [1, 4353],
      22: 4347,
      32: 4346,
      196: 4348,
      210: 4350,
      211: [1, 4352],
      212: [1, 4351]
    }, {
      96: [1, 4354]
    }, o($Vk7, $VJ1), o($Vm7, $Vq), o($Vm7, $Vr), {
      96: [1, 4356],
      102: 4355,
      104: [1, 4357],
      105: [1, 4358],
      106: 4359,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4360]
    }, o($Vm7, $Vt), o($Vm7, $Vu), {
      117: [1, 4361]
    }, o($Vb8, $VV3), o($Vm7, $Vb3), o($Vm7, $Vc3), o($Vm7, $Vd3), o($Vm7, $Ve3), o($Vm7, $Vf3), {
      107: [1, 4362]
    }, o($Vm7, $Vk3), o($Vn7, $VY4), o($Vq7, $VB5), o($Vq7, $VE1), o($Vq7, $Vq), o($Vq7, $Vr), o($Vq7, $Vt), o($Vq7, $Vu), {
      117: [1, 4363]
    }, o($Vb8, $VV3), o($Vm7, $Vb3), o($Vm7, $Vc3), o($Vm7, $Vd3), o($Vm7, $Ve3), o($Vm7, $Vf3), {
      107: [1, 4364]
    }, o($Vm7, $Vk3), o($Vn7, $VY4), o($Vq7, $VB5), o($Vq7, $VE1), o($Vq7, $Vq), o($Vq7, $Vr), o($Vq7, $Vt), o($Vq7, $Vu), {
      189: [1, 4367],
      190: 4365,
      191: [1, 4366]
    }, o($Vd8, $VM5), o($Vd8, $VN5), o($Vd8, $VO5), o($Vd8, $Vq), o($Vd8, $Vr), o($Vd8, $Vj4), o($Vd8, $Vk4), o($Vd8, $Vl4), o($Vd8, $Vt), o($Vd8, $Vu), o($Vd8, $Vm4), o($Vd8, $Vn4, {
      198: 4368,
      199: 4369,
      107: [1, 4370]
    }), o($Vd8, $Vo4), o($Vd8, $Vp4), o($Vd8, $Vq4), o($Vd8, $Vr4), o($Vd8, $Vs4), o($Vd8, $Vt4), o($Vd8, $Vu4), o($Vd8, $Vv4), o($Vd8, $Vw4), o($Vn9, $Vg3), o($Vn9, $Vh3), o($Vn9, $Vi3), o($Vn9, $Vj3), o($Vk8, $V68), o($Vx, $Vg, {
      55: 4371,
      36: 4372,
      39: $Vy
    }), o($Vk8, $V78), o($Vk8, $V88), o($Vk8, $Vo7), o($Vk8, $Vp7), {
      115: [1, 4373],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vk8, $V11), o($Vk8, $V21), {
      19: [1, 4377],
      21: [1, 4381],
      22: 4375,
      32: 4374,
      196: 4376,
      210: 4378,
      211: [1, 4380],
      212: [1, 4379]
    }, o($Vk8, $V98), o($Vk8, $Va8), o($VT8, $Vr1, {
      89: 4382
    }), o($Vk8, $Vs1, {
      95: 4237,
      91: 4383,
      97: $Vk9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA1), o($VT8, $VB1), o($VT8, $VC1), o($VT8, $VD1), {
      96: [1, 4384]
    }, o($VT8, $VJ1), {
      66: [1, 4385]
    }, o($Vz8, $Vz2, {
      95: 4015,
      91: 4386,
      97: $Ve9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vy8, $VA2), o($Vk8, $VB2, {
      86: 4387,
      91: 4388,
      87: 4389,
      95: 4390,
      101: 4392,
      103: 4393,
      97: $Vo9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VD2, {
      86: 4387,
      91: 4388,
      87: 4389,
      95: 4390,
      101: 4392,
      103: 4393,
      97: $Vo9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VE2, {
      86: 4387,
      91: 4388,
      87: 4389,
      95: 4390,
      101: 4392,
      103: 4393,
      97: $Vo9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VC8, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 4394],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4395,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VB8, $VT1), o($VB8, $Vl), o($VB8, $Vm), o($VB8, $Vq), o($VB8, $Vr), o($VB8, $Vs), o($VB8, $Vt), o($VB8, $Vu), o($Vy8, $Vb3), o($VC8, $Vc3), o($VC8, $Vd3), o($VC8, $Ve3), o($VC8, $Vf3), {
      107: [1, 4396]
    }, o($VC8, $Vk3), o($Vk8, $V78), o($Vk8, $V88), o($Vk8, $Vo7), o($Vk8, $Vp7), {
      115: [1, 4397],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vk8, $V11), o($Vk8, $V21), {
      19: [1, 4401],
      21: [1, 4405],
      22: 4399,
      32: 4398,
      196: 4400,
      210: 4402,
      211: [1, 4404],
      212: [1, 4403]
    }, o($Vk8, $V98), o($Vk8, $Va8), o($VT8, $Vr1, {
      89: 4406
    }), o($Vk8, $Vs1, {
      95: 4279,
      91: 4407,
      97: $Vl9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA1), o($VT8, $VB1), o($VT8, $VC1), o($VT8, $VD1), {
      96: [1, 4408]
    }, o($VT8, $VJ1), {
      66: [1, 4409]
    }, o($Vz8, $Vz2, {
      95: 4048,
      91: 4410,
      97: $Vf9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vy8, $VA2), o($Vk8, $VB2, {
      86: 4411,
      91: 4412,
      87: 4413,
      95: 4414,
      101: 4416,
      103: 4417,
      97: $Vp9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VD2, {
      86: 4411,
      91: 4412,
      87: 4413,
      95: 4414,
      101: 4416,
      103: 4417,
      97: $Vp9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VE2, {
      86: 4411,
      91: 4412,
      87: 4413,
      95: 4414,
      101: 4416,
      103: 4417,
      97: $Vp9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VC8, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 4418],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4419,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VB8, $VT1), o($VB8, $Vl), o($VB8, $Vm), o($VB8, $Vq), o($VB8, $Vr), o($VB8, $Vs), o($VB8, $Vt), o($VB8, $Vu), o($Vy8, $Vb3), o($VC8, $Vc3), o($VC8, $Vd3), o($VC8, $Ve3), o($VC8, $Vf3), {
      107: [1, 4420]
    }, o($VC8, $Vk3), o($Vk8, $VY4), {
      19: [1, 4423],
      21: [1, 4426],
      22: 4422,
      83: 4421,
      210: 4424,
      211: [1, 4425]
    }, o($Vm1, $V66), o($Vm1, $VE1), o($Vo1, $V66), o($Vo1, $VE1), o($Vp1, $V66), o($Vp1, $VE1), o($VE3, $V66), o($VE3, $VE1), o($VF3, $V66), o($VF3, $VE1), o($VG3, $V66), o($VG3, $VE1), o($VI6, $V78), o($VI6, $V88), o($VI6, $Vo7), o($VI6, $Vp7), {
      115: [1, 4427],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VI6, $V11), o($VI6, $V21), {
      19: [1, 4431],
      21: [1, 4435],
      22: 4429,
      32: 4428,
      196: 4430,
      210: 4432,
      211: [1, 4434],
      212: [1, 4433]
    }, o($VI6, $V98), o($VI6, $Va8), o($Vb8, $Vr1, {
      89: 4436
    }), o($VI6, $Vs1, {
      95: 4335,
      91: 4437,
      97: $Vm9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA1), o($Vb8, $VB1), o($Vb8, $VC1), o($Vb8, $VD1), {
      96: [1, 4438]
    }, o($Vb8, $VJ1), {
      66: [1, 4439]
    }, o($Vl7, $Vz2, {
      95: 4153,
      91: 4440,
      97: $Vg9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vk7, $VA2), o($VI6, $VB2, {
      86: 4441,
      91: 4442,
      87: 4443,
      95: 4444,
      101: 4446,
      103: 4447,
      97: $Vq9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VD2, {
      86: 4441,
      91: 4442,
      87: 4443,
      95: 4444,
      101: 4446,
      103: 4447,
      97: $Vq9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VI6, $VE2, {
      86: 4441,
      91: 4442,
      87: 4443,
      95: 4444,
      101: 4446,
      103: 4447,
      97: $Vq9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vq7, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 4448],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4449,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vn7, $VT1), o($Vn7, $Vl), o($Vn7, $Vm), o($Vn7, $Vq), o($Vn7, $Vr), o($Vn7, $Vs), o($Vn7, $Vt), o($Vn7, $Vu), o($Vk7, $Vb3), o($Vq7, $Vc3), o($Vq7, $Vd3), o($Vq7, $Ve3), o($Vq7, $Vf3), {
      107: [1, 4450]
    }, o($Vq7, $Vk3), o($VI6, $VY4), {
      19: [1, 4453],
      21: [1, 4456],
      22: 4452,
      83: 4451,
      210: 4454,
      211: [1, 4455]
    }, o($VI6, $VY4), {
      19: [1, 4459],
      21: [1, 4462],
      22: 4458,
      83: 4457,
      210: 4460,
      211: [1, 4461]
    }, o($VR8, $VU1), o($VR8, $VV1), o($VR8, $VW1), o($Vd8, $Vz5), o($Vd8, $VA5), {
      19: $Vh9,
      21: $Vi9,
      22: 4464,
      83: 4463,
      210: 4198,
      211: $Vj9
    }, o($Vk8, $Vt8), o($VC, $VD, {
      59: 4465,
      69: 4466,
      71: 4467,
      72: 4468,
      88: 4471,
      90: 4472,
      83: 4474,
      84: 4475,
      85: 4476,
      74: 4477,
      40: 4478,
      91: 4482,
      22: 4483,
      87: 4485,
      114: 4486,
      95: 4490,
      210: 4493,
      101: 4494,
      103: 4495,
      19: [1, 4492],
      21: [1, 4497],
      65: [1, 4469],
      67: [1, 4470],
      75: [1, 4487],
      76: [1, 4488],
      77: [1, 4489],
      81: [1, 4473],
      92: [1, 4479],
      93: [1, 4480],
      94: [1, 4481],
      97: $Vr9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT,
      157: [1, 4484],
      211: [1, 4496]
    }), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4498,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vk8, $VT1), o($Vk8, $Vl), o($Vk8, $Vm), o($Vk8, $Vq), o($Vk8, $Vr), o($Vk8, $Vs), o($Vk8, $Vt), o($Vk8, $Vu), o($Vk8, $Vz2, {
      95: 4237,
      91: 4499,
      97: $Vk9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA2), o($VT8, $Vb3), o($Vk8, $Vv8), o($Vy8, $VV3), o($VA8, $VW3), o($VA8, $VX3), o($VA8, $VY3), {
      96: [1, 4500]
    }, o($VA8, $VJ1), {
      96: [1, 4502],
      102: 4501,
      104: [1, 4503],
      105: [1, 4504],
      106: 4505,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4506]
    }, o($VA8, $Vg4), {
      117: [1, 4507]
    }, {
      19: [1, 4510],
      21: [1, 4513],
      22: 4509,
      83: 4508,
      210: 4511,
      211: [1, 4512]
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4514,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vk8, $VT1), o($Vk8, $Vl), o($Vk8, $Vm), o($Vk8, $Vq), o($Vk8, $Vr), o($Vk8, $Vs), o($Vk8, $Vt), o($Vk8, $Vu), o($Vk8, $Vz2, {
      95: 4279,
      91: 4515,
      97: $Vl9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA2), o($VT8, $Vb3), o($Vk8, $Vv8), o($Vy8, $VV3), o($VA8, $VW3), o($VA8, $VX3), o($VA8, $VY3), {
      96: [1, 4516]
    }, o($VA8, $VJ1), {
      96: [1, 4518],
      102: 4517,
      104: [1, 4519],
      105: [1, 4520],
      106: 4521,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4522]
    }, o($VA8, $Vg4), {
      117: [1, 4523]
    }, {
      19: [1, 4526],
      21: [1, 4529],
      22: 4525,
      83: 4524,
      210: 4527,
      211: [1, 4528]
    }, o($VA8, $VB5), o($VA8, $VE1), o($VA8, $Vq), o($VA8, $Vr), o($VA8, $Vt), o($VA8, $Vu), o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4530,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VI6, $VT1), o($VI6, $Vl), o($VI6, $Vm), o($VI6, $Vq), o($VI6, $Vr), o($VI6, $Vs), o($VI6, $Vt), o($VI6, $Vu), o($VI6, $Vz2, {
      95: 4335,
      91: 4531,
      97: $Vm9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vb8, $VA2), o($Vb8, $Vb3), o($VI6, $Vv8), o($Vk7, $VV3), o($Vm7, $VW3), o($Vm7, $VX3), o($Vm7, $VY3), {
      96: [1, 4532]
    }, o($Vm7, $VJ1), {
      96: [1, 4534],
      102: 4533,
      104: [1, 4535],
      105: [1, 4536],
      106: 4537,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4538]
    }, o($Vm7, $Vg4), {
      117: [1, 4539]
    }, {
      19: [1, 4542],
      21: [1, 4545],
      22: 4541,
      83: 4540,
      210: 4543,
      211: [1, 4544]
    }, o($Vm7, $VB5), o($Vm7, $VE1), o($Vm7, $Vq), o($Vm7, $Vr), o($Vm7, $Vt), o($Vm7, $Vu), o($Vm7, $VB5), o($Vm7, $VE1), o($Vm7, $Vq), o($Vm7, $Vr), o($Vm7, $Vt), o($Vm7, $Vu), o($Vd8, $V66), o($Vd8, $VE1), o($Vk8, $Ve7), o($Vk8, $Vf7, {
      70: 4546,
      72: 4547,
      74: 4548,
      40: 4549,
      114: 4550,
      75: [1, 4551],
      76: [1, 4552],
      77: [1, 4553],
      115: $VD,
      121: $VD,
      123: $VD,
      185: $VD,
      215: $VD
    }), o($Vk8, $Vg7), o($Vk8, $Vh7, {
      73: 4554,
      69: 4555,
      88: 4556,
      90: 4557,
      91: 4561,
      95: 4562,
      92: [1, 4558],
      93: [1, 4559],
      94: [1, 4560],
      97: $Vs9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vf, $Vg, {
      36: 182,
      40: 184,
      34: 4564,
      39: $Vk1,
      75: $Vh,
      76: $Vi,
      77: $Vj
    }), o($Vk8, $Vj7), o($Vy8, $Vr1, {
      89: 4565
    }), o($Vz8, $Vs1, {
      95: 4490,
      91: 4566,
      97: $Vr9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VA8, $Vu1, {
      82: 4567
    }), o($VA8, $Vu1, {
      82: 4568
    }), o($VA8, $Vu1, {
      82: 4569
    }), o($Vk8, $Vv1, {
      101: 4494,
      103: 4495,
      87: 4570,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VB8, $Vo7), o($VB8, $Vp7), o($Vy8, $VA1), o($Vy8, $VB1), o($Vy8, $VC1), o($Vy8, $VD1), o($VA8, $VE1), o($VF1, $VG1, {
      158: 4571
    }), o($VC8, $VI1), {
      115: [1, 4572],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($VB8, $V11), o($VB8, $V21), {
      19: [1, 4576],
      21: [1, 4580],
      22: 4574,
      32: 4573,
      196: 4575,
      210: 4577,
      211: [1, 4579],
      212: [1, 4578]
    }, {
      96: [1, 4581]
    }, o($Vy8, $VJ1), o($VA8, $Vq), o($VA8, $Vr), {
      96: [1, 4583],
      102: 4582,
      104: [1, 4584],
      105: [1, 4585],
      106: 4586,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4587]
    }, o($VA8, $Vt), o($VA8, $Vu), {
      117: [1, 4588]
    }, o($VT8, $VV3), o($VA8, $Vb3), o($VA8, $Vc3), o($VA8, $Vd3), o($VA8, $Ve3), o($VA8, $Vf3), {
      107: [1, 4589]
    }, o($VA8, $Vk3), o($VB8, $VY4), o($VC8, $VB5), o($VC8, $VE1), o($VC8, $Vq), o($VC8, $Vr), o($VC8, $Vt), o($VC8, $Vu), {
      117: [1, 4590]
    }, o($VT8, $VV3), o($VA8, $Vb3), o($VA8, $Vc3), o($VA8, $Vd3), o($VA8, $Ve3), o($VA8, $Vf3), {
      107: [1, 4591]
    }, o($VA8, $Vk3), o($VB8, $VY4), o($VC8, $VB5), o($VC8, $VE1), o($VC8, $Vq), o($VC8, $Vr), o($VC8, $Vt), o($VC8, $Vu), {
      117: [1, 4592]
    }, o($Vb8, $VV3), o($Vm7, $Vb3), o($Vm7, $Vc3), o($Vm7, $Vd3), o($Vm7, $Ve3), o($Vm7, $Vf3), {
      107: [1, 4593]
    }, o($Vm7, $Vk3), o($Vn7, $VY4), o($Vq7, $VB5), o($Vq7, $VE1), o($Vq7, $Vq), o($Vq7, $Vr), o($Vq7, $Vt), o($Vq7, $Vu), o($Vk8, $V78), o($Vk8, $V88), o($Vk8, $Vo7), o($Vk8, $Vp7), {
      115: [1, 4594],
      118: 195,
      119: 196,
      120: 197,
      121: $Vw1,
      123: $Vx1,
      185: $Vy1,
      213: 199,
      215: $Vz1
    }, o($Vk8, $V11), o($Vk8, $V21), {
      19: [1, 4598],
      21: [1, 4602],
      22: 4596,
      32: 4595,
      196: 4597,
      210: 4599,
      211: [1, 4601],
      212: [1, 4600]
    }, o($Vk8, $V98), o($Vk8, $Va8), o($VT8, $Vr1, {
      89: 4603
    }), o($Vk8, $Vs1, {
      95: 4562,
      91: 4604,
      97: $Vs9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA1), o($VT8, $VB1), o($VT8, $VC1), o($VT8, $VD1), {
      96: [1, 4605]
    }, o($VT8, $VJ1), {
      66: [1, 4606]
    }, o($Vz8, $Vz2, {
      95: 4490,
      91: 4607,
      97: $Vr9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($Vy8, $VA2), o($Vk8, $VB2, {
      86: 4608,
      91: 4609,
      87: 4610,
      95: 4611,
      101: 4613,
      103: 4614,
      97: $Vt9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VD2, {
      86: 4608,
      91: 4609,
      87: 4610,
      95: 4611,
      101: 4613,
      103: 4614,
      97: $Vt9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($Vk8, $VE2, {
      86: 4608,
      91: 4609,
      87: 4610,
      95: 4611,
      101: 4613,
      103: 4614,
      97: $Vt9,
      98: $VL,
      99: $VM,
      100: $VN,
      108: $VO,
      109: $VP,
      110: $VQ,
      111: $VR,
      112: $VS,
      113: $VT
    }), o($VC8, $VF2), {
      19: $VU2,
      21: $VV2,
      22: 396,
      67: $VW2,
      77: $VX2,
      96: $VY2,
      104: $VZ2,
      105: $V_2,
      106: 408,
      159: [1, 4615],
      160: 391,
      161: 392,
      162: 393,
      163: 394,
      177: 397,
      181: $V$2,
      192: 402,
      193: 403,
      194: 404,
      197: 407,
      200: $V03,
      201: $V13,
      202: $V23,
      203: $V33,
      204: $V43,
      205: $V53,
      206: $V63,
      207: $V73,
      208: $V83,
      209: $V93,
      210: 401,
      211: $Va3
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4616,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($VB8, $VT1), o($VB8, $Vl), o($VB8, $Vm), o($VB8, $Vq), o($VB8, $Vr), o($VB8, $Vs), o($VB8, $Vt), o($VB8, $Vu), o($Vy8, $Vb3), o($VC8, $Vc3), o($VC8, $Vd3), o($VC8, $Ve3), o($VC8, $Vf3), {
      107: [1, 4617]
    }, o($VC8, $Vk3), o($Vk8, $VY4), {
      19: [1, 4620],
      21: [1, 4623],
      22: 4619,
      83: 4618,
      210: 4621,
      211: [1, 4622]
    }, o($Vk8, $VY4), {
      19: [1, 4626],
      21: [1, 4629],
      22: 4625,
      83: 4624,
      210: 4627,
      211: [1, 4628]
    }, o($VI6, $VY4), {
      19: [1, 4632],
      21: [1, 4635],
      22: 4631,
      83: 4630,
      210: 4633,
      211: [1, 4634]
    }, o($VG2, $VH2, {
      122: 361,
      126: 362,
      127: 363,
      128: 364,
      132: 365,
      133: 366,
      134: 367,
      140: 368,
      142: 369,
      143: 370,
      116: 4636,
      117: $VI2,
      144: $VJ2,
      185: $VK2
    }), o($Vk8, $VT1), o($Vk8, $Vl), o($Vk8, $Vm), o($Vk8, $Vq), o($Vk8, $Vr), o($Vk8, $Vs), o($Vk8, $Vt), o($Vk8, $Vu), o($Vk8, $Vz2, {
      95: 4562,
      91: 4637,
      97: $Vs9,
      98: $VL,
      99: $VM,
      100: $VN
    }), o($VT8, $VA2), o($VT8, $Vb3), o($Vk8, $Vv8), o($Vy8, $VV3), o($VA8, $VW3), o($VA8, $VX3), o($VA8, $VY3), {
      96: [1, 4638]
    }, o($VA8, $VJ1), {
      96: [1, 4640],
      102: 4639,
      104: [1, 4641],
      105: [1, 4642],
      106: 4643,
      202: $VK1,
      203: $VL1,
      204: $VM1,
      205: $VN1
    }, {
      96: [1, 4644]
    }, o($VA8, $Vg4), {
      117: [1, 4645]
    }, {
      19: [1, 4648],
      21: [1, 4651],
      22: 4647,
      83: 4646,
      210: 4649,
      211: [1, 4650]
    }, o($VA8, $VB5), o($VA8, $VE1), o($VA8, $Vq), o($VA8, $Vr), o($VA8, $Vt), o($VA8, $Vu), o($VA8, $VB5), o($VA8, $VE1), o($VA8, $Vq), o($VA8, $Vr), o($VA8, $Vt), o($VA8, $Vu), o($Vm7, $VB5), o($Vm7, $VE1), o($Vm7, $Vq), o($Vm7, $Vr), o($Vm7, $Vt), o($Vm7, $Vu), {
      117: [1, 4652]
    }, o($VT8, $VV3), o($VA8, $Vb3), o($VA8, $Vc3), o($VA8, $Vd3), o($VA8, $Ve3), o($VA8, $Vf3), {
      107: [1, 4653]
    }, o($VA8, $Vk3), o($VB8, $VY4), o($VC8, $VB5), o($VC8, $VE1), o($VC8, $Vq), o($VC8, $Vr), o($VC8, $Vt), o($VC8, $Vu), o($Vk8, $VY4), {
      19: [1, 4656],
      21: [1, 4659],
      22: 4655,
      83: 4654,
      210: 4657,
      211: [1, 4658]
    }, o($VA8, $VB5), o($VA8, $VE1), o($VA8, $Vq), o($VA8, $Vr), o($VA8, $Vt), o($VA8, $Vu)],
    defaultActions: {
      6: [2, 11],
      30: [2, 1],
      102: [2, 115],
      103: [2, 116],
      104: [2, 117],
      111: [2, 128],
      112: [2, 129],
      210: [2, 248],
      211: [2, 249],
      212: [2, 250],
      213: [2, 251],
      333: [2, 31],
      361: [2, 138],
      362: [2, 142],
      364: [2, 144],
      569: [2, 29],
      570: [2, 33],
      607: [2, 30],
      1117: [2, 142],
      1119: [2, 144]
    },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
          stack = [0],
          tstack = [],
          vstack = [null],
          lstack = [],
          table = this.table,
          yytext = '',
          yylineno = 0,
          yyleng = 0,
          recovering = 0,
          TERROR = 2,
          EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = {
        yy: {}
      };

      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }

      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;

      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }

      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;

      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }

      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }

      _token_stack: var lex = function lex() {
        var token;
        token = lexer.lex() || EOF;

        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }

        return token;
      };

      var symbol,
          preErrorSymbol,
          state,
          action,
          a,
          r,
          yyval = {},
          p,
          len,
          newState,
          expected;

      while (true) {
        state = stack[stack.length - 1];

        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }

          action = table[state] && table[state][symbol];
        }

        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];

          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push('\'' + this.terminals_[p] + '\'');
            }
          }

          if (lexer.showPosition) {
            errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
          } else {
            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
          }

          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            expected: expected
          });
        }

        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }

        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;

            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;

              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }

            break;

          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column
            };

            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }

            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

            if (typeof r !== 'undefined') {
              return r;
            }

            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }

            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;

          case 3:
            return true;
        }
      }

      return true;
    }
  };
  /*
    ShEx parser in the Jison parser generator format.
  */

  var UNBOUNDED = -1;

  var ShExUtil = __webpack_require__(/*! @shexjs/core */ "../shex.js/packages/shex-core/shex-core.js").Util; // Common namespaces and entities


  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST = RDF + 'rest',
      RDF_NIL = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER = XSD + 'integer',
      XSD_DECIMAL = XSD + 'decimal',
      XSD_FLOAT = XSD + 'float',
      XSD_DOUBLE = XSD + 'double',
      XSD_BOOLEAN = XSD + 'boolean',
      XSD_TRUE = '"true"^^' + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN = XSD + 'pattern',
      XSD_MININCLUSIVE = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE = XSD + 'maxExclusive',
      XSD_LENGTH = XSD + 'length',
      XSD_MINLENGTH = XSD + 'minLength',
      XSD_MAXLENGTH = XSD + 'maxLength',
      XSD_TOTALDIGITS = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';
  var numericDatatypes = [XSD + "integer", XSD + "decimal", XSD + "float", XSD + "double", XSD + "string", XSD + "boolean", XSD + "dateTime", XSD + "nonPositiveInteger", XSD + "negativeInteger", XSD + "long", XSD + "int", XSD + "short", XSD + "byte", XSD + "nonNegativeInteger", XSD + "unsignedLong", XSD + "unsignedInt", XSD + "unsignedShort", XSD + "unsignedByte", XSD + "positiveInteger"];
  var absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
      schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
      dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;
  var numericFacets = ["mininclusive", "minexclusive", "maxinclusive", "maxexclusive"]; // Returns a lowercase version of the given string

  function lowercase(string) {
    return string.toLowerCase();
  } // Appends the item to the array and returns the array


  function appendTo(array, item) {
    return array.push(item), array;
  } // Appends the items to the array and returns the array


  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  } // Extends a base object with properties of other objects


  function extend(base) {
    if (!base) base = {};

    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++) {
      for (var name in arg) {
        base[name] = arg[name];
      }
    }

    return base;
  } // Creates an array that contains all items of the given arrays


  function unionAll() {
    var union = [];

    for (var i = 0, l = arguments.length; i < l; i++) {
      union = union.concat.apply(union, arguments[i]);
    }

    return union;
  } // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./Parser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.


  Parser._setBase = function (baseIRI) {
    if (!baseIRI) baseIRI = null; // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);
    // Set base IRI and its components

    if (Parser._base = baseIRI) {
      Parser._basePath = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      Parser._baseRoot = baseIRI[0];
      Parser._baseScheme = baseIRI[1];
    }
  }; // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.


  function _resolveIRI(iri) {
    switch (iri[0]) {
      // An empty relative IRI indicates the base IRI
      case undefined:
        return Parser._base;
      // Resolve relative fragment IRIs against the base IRI

      case '#':
        return Parser._base + iri;
      // Resolve relative query string IRIs by replacing the query string

      case '?':
        return Parser._base.replace(/(?:\?.*)?$/, iri);
      // Resolve root-relative IRIs at the root of the base IRI

      case '/':
        // Resolve scheme-relative IRIs to the scheme
        return (iri[1] === '/' ? Parser._baseScheme : Parser._baseRoot) + _removeDotSegments(iri);
      // Resolve all other IRIs at the base IRI's path

      default:
        {
          return _removeDotSegments(Parser._basePath + iri);
        }
    }
  } // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.


  function _removeDotSegments(iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri)) return iri; // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'

    var result = '',
        length = iri.length,
        i = -1,
        pathStart = -1,
        segmentStart = 0,
        next = '/';

    while (i < length) {
      switch (next) {
        // The path starts with the first slash after the authority
        case ':':
          if (pathStart < 0) {
            // Skip two slashes before the authority
            if (iri[++i] === '/' && iri[++i] === '/') // Skip to slash after the authority
              while ((pathStart = i + 1) < length && iri[pathStart] !== '/') {
                i = pathStart;
              }
          }

          break;
        // Don't modify a query string or fragment

        case '?':
        case '#':
          i = length;
          break;
        // Handle '/.' or '/..' path segments

        case '/':
          if (iri[i + 1] === '.') {
            next = iri[++i + 1];

            switch (next) {
              // Remove a '/.' segment
              case '/':
                result += iri.substring(segmentStart, i - 1);
                segmentStart = i + 1;
                break;
              // Remove a trailing '/.' segment

              case undefined:
              case '?':
              case '#':
                return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
              // Remove a '/..' segment

              case '.':
                next = iri[++i + 1];

                if (next === undefined || next === '/' || next === '?' || next === '#') {
                  result += iri.substring(segmentStart, i - 2); // Try to remove the parent path from result

                  if ((segmentStart = result.lastIndexOf('/')) >= pathStart) result = result.substr(0, segmentStart); // Remove a trailing '/..' segment

                  if (next !== '/') return result + '/' + iri.substr(i + 1);
                  segmentStart = i + 1;
                }

            }
          }

      }

      next = iri[++i];
    }

    return result + iri.substring(segmentStart);
  } // Creates an expression with the given type and attributes


  function expression(expr, attr) {
    var expression = {
      expression: expr
    };
    if (attr) for (var a in attr) {
      expression[a] = attr[a];
    }
    return expression;
  } // Creates a path with the given type and items


  function path(type, items) {
    return {
      type: 'path',
      pathType: type,
      items: items
    };
  } // Creates a literal with the given value and type


  function createLiteral(value, type) {
    return {
      value: value,
      type: type
    };
  } // Creates a new blank node identifier


  function blank() {
    return '_:b' + blankId++;
  }

  ;
  var blankId = 0;

  Parser._resetBlanks = function () {
    blankId = 0;
  };

  Parser.reset = function () {
    Parser._prefixes = Parser._imports = Parser._sourceMap = Parser.shapes = Parser.productions = Parser.start = Parser.startActs = null; // Reset state.

    Parser._base = Parser._baseIRI = Parser._baseIRIPath = Parser._baseIRIRoot = null;
  };

  var _fileName; // for debugging


  Parser._setFileName = function (fn) {
    _fileName = fn;
  }; // Regular expression and replacement strings to escape strings


  var stringEscapeReplacements = {
    '\\': '\\',
    "'": "'",
    '"': '"',
    't': '\t',
    'b': '\b',
    'n': '\n',
    'r': '\r',
    'f': '\f'
  },
      semactEscapeReplacements = {
    '\\': '\\',
    '%': '%'
  },
      pnameEscapeReplacements = {
    '\\': '\\',
    "'": "'",
    '"': '"',
    'n': '\n',
    'r': '\r',
    't': '\t',
    'f': '\f',
    'b': '\b',
    '_': '_',
    '~': '~',
    '.': '.',
    '-': '-',
    '!': '!',
    '$': '$',
    '&': '&',
    '(': '(',
    ')': ')',
    '*': '*',
    '+': '+',
    ',': ',',
    ';': ';',
    '=': '=',
    '/': '/',
    '?': '?',
    '#': '#',
    '@': '@',
    '%': '%'
  }; // Translates string escape codes in the string into their textual equivalent

  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return {
      value: ShExUtil.unescapeText(string, stringEscapeReplacements)
    };
  }

  function unescapeLangString(string, trimLength) {
    var at = string.lastIndexOf("@");
    var lang = string.substr(at);
    string = string.substr(0, at);
    var u = unescapeString(string, trimLength);
    return extend(u, {
      language: lowercase(lang.substr(1))
    });
  } // Translates regular expression escape codes in the string into their textual equivalent


  function unescapeRegexp(regexp) {
    var end = regexp.lastIndexOf("/");
    var s = regexp.substr(1, end - 1);

    var regexpEscapeReplacements = _defineProperty({
      '.': "\\.",
      '\\': "\\\\",
      '?': "\\?",
      '*': "\\*",
      '+': "\\+",
      '{': "\\{",
      '}': "\\}",
      '(': "\\(",
      ')': "\\)",
      '|': "\\|",
      '^': "\\^",
      '$': "\\$",
      '[': "\\[",
      ']': "\\]",
      '/': "\\/",
      't': '\\t',
      'n': '\\n',
      'r': '\\r',
      '-': "\\-"
    }, "/", '/');

    s = ShExUtil.unescapeText(s, regexpEscapeReplacements);
    var ret = {
      pattern: s
    };
    if (regexp.length > end + 1) ret.flags = regexp.substr(end + 1);
    return ret;
  } // Convenience function to return object with p1 key, value p2


  function keyValObject(key, val) {
    var ret = {};
    ret[key] = val;
    return ret;
  } // Return object with p1 key, p2 string value


  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  function error(e, yy) {
    var hash = {
      text: yy.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: yy.lexer.yylineno,
      loc: yy.lexer.yylloc,
      // expected: expected
      pos: yy.lexer.showPosition()
    };
    e.hash = hash;

    if (Parser.recoverable) {
      Parser.recoverable(e);
    } else {
      throw e;
      Parser.reset();
    }
  } // Expand declared prefix or throw Error


  function expandPrefix(prefix, yy) {
    if (!(prefix in Parser._prefixes)) error(new Error('Parse error; unknown prefix "' + prefix + ':"'), yy);
    return Parser._prefixes[prefix];
  } // Add a shape to the map


  function addShape(label, shape, yy) {
    if (shape === EmptyShape) shape = {
      type: "Shape"
    };
    if (Parser.productions && label in Parser.productions) error(new Error("Structural error: " + label + " is a triple expression"), yy);
    if (!Parser.shapes) Parser.shapes = new Map();

    if (label in Parser.shapes) {
      if (Parser.options.duplicateShape === "replace") Parser.shapes[label] = shape;else if (Parser.options.duplicateShape !== "ignore") error(new Error("Parse error: " + label + " already defined"), yy);
    } else {
      shape.id = label;
      Parser.shapes[label] = shape;
    }
  } // Add a production to the map


  function addProduction(label, production, yy) {
    if (Parser.shapes && label in Parser.shapes) error(new Error("Structural error: " + label + " is a shape expression"), yy);
    if (!Parser.productions) Parser.productions = new Map();

    if (label in Parser.productions) {
      if (Parser.options.duplicateShape === "replace") Parser.productions[label] = production;else if (Parser.options.duplicateShape !== "ignore") error(new Error("Parse error: " + label + " already defined"), yy);
    } else Parser.productions[label] = production;
  }

  function addSourceMap(obj, yy) {
    if (!Parser._sourceMap) Parser._sourceMap = new Map();

    var list = Parser._sourceMap.get(obj);

    if (!list) Parser._sourceMap.set(obj, list = []);
    list.push(yy.lexer.yylloc);
    return obj;
  } // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a `nested` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.


  function shapeJunction(type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return {
        type: type,
        shapeExprs: [nonest(shapeAtom)].concat(juncts)
      };
    }
  } // strip out .nested attribute


  function nonest(shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

  var EmptyObject = {};
  var EmptyShape = {
    type: "Shape"
  };
  /* generated by jison-lex 0.3.4 */

  var lexer = function () {
    var lexer = {
      EOF: 1,
      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },
      // resets the lexer, sets new input
      setInput: function setInput(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0
        };

        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }

        this.offset = 0;
        return this;
      },
      // consumes and returns one char from the input
      input: function input() {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }

        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },
      // unshifts one char (or a string) into the input
      unput: function unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);
        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;

        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }

        var r = this.yylloc.range;
        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }

        this.yyleng = this.yytext.length;
        return this;
      },
      // When called from action, caches matched text and appends it on next action
      more: function more() {
        this._more = true;
        return this;
      },
      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function reject() {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }

        return this;
      },
      // retain first n characters of the match
      less: function less(n) {
        this.unput(this.match.slice(n));
      },
      // displays already matched input, i.e. for error messages
      pastInput: function pastInput() {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
      },
      // displays upcoming input, i.e. for error messages
      upcomingInput: function upcomingInput() {
        var next = this.match;

        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }

        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },
      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function showPosition() {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
      },
      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function test_match(match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done
          };

          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);

        if (lines) {
          this.yylineno += lines.length;
        }

        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;

        if (this.options.ranges) {
          this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }

        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);

        if (this.done && this._input) {
          this.done = false;
        }

        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }

          return false; // rule action called reject() implying the next rule should be tested instead.
        }

        return false;
      },
      // return next match in input
      next: function next() {
        if (this.done) {
          return this.EOF;
        }

        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;

        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }

        var rules = this._currentRules();

        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);

          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;

            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);

              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }

        if (match) {
          token = this.test_match(match, rules[index]);

          if (token !== false) {
            return token;
          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)


          return false;
        }

        if (this._input === "") {
          return this.EOF;
        } else {
          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
            text: "",
            token: null,
            line: this.yylineno
          });
        }
      },
      // return next match that has a token
      lex: function lex() {
        var r = this.next();

        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },
      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },
      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;

        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },
      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions["INITIAL"].rules;
        }
      },
      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);

        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return "INITIAL";
        }
      },
      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },
      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;

        switch ($avoiding_name_collisions) {
          case 0:
            /**/
            break;

          case 1:
            return 75;
            break;

          case 2:
            return 76;
            break;

          case 3:
            yy_.yytext = yy_.yytext.substr(1);
            return 181;
            break;

          case 4:
            return 77;
            break;

          case 5:
            return 211;
            break;

          case 6:
            return 155;
            break;

          case 7:
            return 105;
            break;

          case 8:
            return 104;
            break;

          case 9:
            return 96;
            break;

          case 10:
            return 'ANON';
            break;

          case 11:
            return 19;
            break;

          case 12:
            return 21;
            break;

          case 13:
            return 195;
            break;

          case 14:
            return 97;
            break;

          case 15:
            return 212;
            break;

          case 16:
            return 191;
            break;

          case 17:
            return 207;
            break;

          case 18:
            return 209;
            break;

          case 19:
            return 206;
            break;

          case 20:
            return 208;
            break;

          case 21:
            return 203;
            break;

          case 22:
            return 205;
            break;

          case 23:
            return 202;
            break;

          case 24:
            return 204;
            break;

          case 25:
            return 18;
            break;

          case 26:
            return 20;
            break;

          case 27:
            return 23;
            break;

          case 28:
            return 26;
            break;

          case 29:
            return 35;
            break;

          case 30:
            return 'IT_VIRTUAL';
            break;

          case 31:
            return 121;
            break;

          case 32:
            return 123;
            break;

          case 33:
            return 81;
            break;

          case 34:
            return 93;
            break;

          case 35:
            return 92;
            break;

          case 36:
            return 94;
            break;

          case 37:
            return 49;
            break;

          case 38:
            return 47;
            break;

          case 39:
            return 39;
            break;

          case 40:
            return 108;
            break;

          case 41:
            return 109;
            break;

          case 42:
            return 110;
            break;

          case 43:
            return 111;
            break;

          case 44:
            return 98;
            break;

          case 45:
            return 99;
            break;

          case 46:
            return 100;
            break;

          case 47:
            return 112;
            break;

          case 48:
            return 113;
            break;

          case 49:
            return 27;
            break;

          case 50:
            return 186;
            break;

          case 51:
            return 115;
            break;

          case 52:
            return 117;
            break;

          case 53:
            return 185;
            break;

          case 54:
            return '||';
            break;

          case 55:
            return 131;
            break;

          case 56:
            return 136;
            break;

          case 57:
            return 65;
            break;

          case 58:
            return 66;
            break;

          case 59:
            return 157;
            break;

          case 60:
            return 159;
            break;

          case 61:
            return 144;
            break;

          case 62:
            return '!';
            break;

          case 63:
            return 107;
            break;

          case 64:
            return 156;
            break;

          case 65:
            return 67;
            break;

          case 66:
            return 174;
            break;

          case 67:
            return 137;
            break;

          case 68:
            return 152;
            break;

          case 69:
            return 153;
            break;

          case 70:
            return 154;
            break;

          case 71:
            return 175;
            break;

          case 72:
            return 189;
            break;

          case 73:
            return 200;
            break;

          case 74:
            return 201;
            break;

          case 75:
            return 7;
            break;

          case 76:
            return 'unexpected word "' + yy_.yytext + '"';
            break;

          case 77:
            return 'invalid character ' + yy_.yytext;
            break;
        }
      },
      rules: [/^(?:\s+|(#[^\u000a\u000d]*|\/\*([^*]|\*([^\/]|\\\/))*\*\/))/, /^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/, /^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/, /^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/, /^(?:@)/, /^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/, /^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/, /^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/, /^(?:(([+-])?([0-9])*\.([0-9])+))/, /^(?:(([+-])?([0-9])+))/, /^(?:{ANON})/, /^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/, /^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/, /^(?:a\b)/, /^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E\/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/, /^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/, /^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/, /^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/, /^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/, /^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/, /^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/, /^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/, /^(?:([Bb][Aa][Ss][Ee]))/, /^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/, /^(?:([iI][mM][pP][oO][rR][tT]))/, /^(?:([sS][tT][aA][rR][tT]))/, /^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/, /^(?:([Vv][Ii][Rr][Tt][Uu][Aa][Ll]))/, /^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/, /^(?:([Ee][Xx][Tt][Rr][Aa]))/, /^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/, /^(?:([Bb][Nn][Oo][Dd][Ee]))/, /^(?:([Ii][Rr][Ii]))/, /^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/, /^(?:([Aa][Nn][Dd]))/, /^(?:([Oo][Rr]))/, /^(?:([No][Oo][Tt]))/, /^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/, /^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/, /^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/, /^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/, /^(?:=)/, /^(?:\/\/)/, /^(?:\{)/, /^(?:\})/, /^(?:&)/, /^(?:\|\|)/, /^(?:\|)/, /^(?:,)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:\$)/, /^(?:!)/, /^(?:\^\^)/, /^(?:\^)/, /^(?:\.)/, /^(?:~)/, /^(?:;)/, /^(?:\*)/, /^(?:\+)/, /^(?:\?)/, /^(?:-)/, /^(?:%)/, /^(?:true\b)/, /^(?:false\b)/, /^(?:$)/, /^(?:[a-zA-Z0-9_-]+)/, /^(?:.)/],
      conditions: {
        "INITIAL": {
          "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77],
          "inclusive": true
        }
      }
    };
    return lexer;
  }();

  parser.lexer = lexer;

  function Parser() {
    this.yy = {};
  }

  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
}();

if (true) {
  exports.parser = ShExJison;
  exports.Parser = ShExJison.Parser;

  exports.parse = function () {
    return ShExJison.parse.apply(ShExJison, arguments);
  };

  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }

    var source = __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js").readFileSync(__webpack_require__(/*! path */ "../shex.js/node_modules/path-browserify/index.js").normalize(args[1]), "utf8");

    return exports.parser.parse(source);
  };

  if ( true && __webpack_require__.c[__webpack_require__.s] === module) {
    exports.main(process.argv.slice(1));
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webui/node_modules/process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../../../webui/node_modules/webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "../shex.js/packages/shex-parser/shex-parser.js":
/*!******************************************************!*\
  !*** ../shex.js/packages/shex-parser/shex-parser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ShExParser = function () {
  // stolen as much as possible from SPARQL.js
  if (true) {
    ShExJison = __webpack_require__(/*! ./lib/ShExJison */ "../shex.js/packages/shex-parser/lib/ShExJison.js").Parser; // node environment
  } else {} // Creates a ShEx parser with the given pre-defined prefixes


  var prepareParser = function prepareParser(baseIRI, prefixes, schemaOptions) {
    schemaOptions = schemaOptions || {}; // Create a copy of the prefixes

    var prefixesCopy = {};

    for (var prefix in prefixes || {}) {
      prefixesCopy[prefix] = prefixes[prefix];
    } // Create a new parser with the given prefixes
    // (Workaround for https://github.com/zaach/jison/issues/241)


    var parser = new ShExJison();

    function runParser() {
      // ShExJison.base = baseIRI || "";
      // ShExJison.basePath = ShExJison.base.replace(/[^\/]*$/, '');
      // ShExJison.baseRoot = ShExJison.base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
      ShExJison._prefixes = Object.create(prefixesCopy);
      ShExJison._imports = [];

      ShExJison._setBase(baseIRI);

      ShExJison._setFileName(baseIRI);

      ShExJison.options = schemaOptions;
      var errors = [];

      ShExJison.recoverable = function (e) {
        return errors.push(e);
      };

      var ret = null;

      try {
        ret = ShExJison.prototype.parse.apply(parser, arguments);
      } catch (e) {
        errors.push(e);
      }

      ShExJison.reset();
      errors.forEach(function (e) {
        if ("hash" in e) {
          var hash = e.hash;
          var location = hash.loc;
          delete hash.loc;
          Object.assign(e, hash, {
            location: location
          });
        }

        return e;
      });

      if (errors.length == 1) {
        errors[0].parsed = ret;
        throw errors[0];
      } else if (errors.length) {
        var all = new Error("" + errors.length + " parser errors:\n" + errors.map(function (e) {
          return contextError(e, parser.yy.lexer);
        }).join("\n"));
        all.errors = errors;
        all.parsed = ret;
        throw all;
      } else {
        return ret;
      }
    }

    parser.parse = runParser;

    parser._setBase = function (base) {
      ShExJison._setBase;
      baseIRI = base;
    };

    parser._setFileName = ShExJison._setFileName;

    parser._setOptions = function (opts) {
      ShExJison.options = opts;
    };

    parser._resetBlanks = ShExJison._resetBlanks;
    parser.reset = ShExJison.reset;
    ShExJison.options = schemaOptions;
    return parser;

    function contextError(e, lexer) {
      // use the lexer's pretty-printing
      var line = e.location.first_line;
      var col = e.location.first_column + 1;
      var posStr = "pos" in e.hash ? "\n" + e.hash.pos : "";
      return "".concat(baseIRI, "\n line: ").concat(line, ", column: ").concat(col, ": ").concat(e.message).concat(posStr);
    }
  };

  return {
    construct: prepareParser
  };
}();

if (true) module.exports = ShExParser;

/***/ }),

/***/ "./node_modules/babel-polyfill/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/babel-polyfill/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(/*! core-js/shim */ "./node_modules/core-js/shim.js");

__webpack_require__(/*! regenerator-runtime/runtime */ "./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js");

__webpack_require__(/*! core-js/fn/regexp/escape */ "./node_modules/core-js/fn/regexp/escape.js");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof global.process === "object" && global.process.domain) {
      invoke = global.process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/core-js/fn/regexp/escape.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/fn/regexp/escape.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/core.regexp.escape */ "./node_modules/core-js/modules/core.regexp.escape.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/modules/_core.js").RegExp.escape;


/***/ }),

/***/ "./node_modules/core-js/modules/_a-function.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_a-function.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_a-number-value.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_a-number-value.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = function (it, msg) {
  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
  return +it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_add-to-unscopables.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_add-to-unscopables.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(ArrayProto, UNSCOPABLES, {});
module.exports = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_advance-string-index.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_advance-string-index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

 // `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? at(S, index).length : 1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-instance.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_an-instance.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_an-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_an-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-copy-within.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-copy-within.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = toObject(this);
  var len = toLength(O.length);
  var to = toAbsoluteIndex(target, len);
  var from = toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-fill.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_array-fill.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)

var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = toLength(O.length);
  var aLen = arguments.length;
  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-from-iterable.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-from-iterable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-includes.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-includes.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-methods.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_array-methods.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-reduce.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_array-reduce.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

module.exports = function (that, callbackfn, aLen, memo, isRight) {
  aFunction(callbackfn);
  var O = toObject(that);
  var self = IObject(O);
  var length = toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-constructor.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-constructor.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_array-species-create.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_array-species-create.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_bind.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_bind.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /* , ...args */) {
  var fn = aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if (isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_classof.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_classof.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_cof.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_cof.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-strong.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-strong.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-to-json.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-to-json.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/modules/_array-from-iterable.js");
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection-weak.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_collection-weak.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var getWeak = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").getWeak;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
var $has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};


/***/ }),

/***/ "./node_modules/core-js/modules/_collection.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_collection.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_core.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_core.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.6.11' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_create-property.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_create-property.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_ctx.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_ctx.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-iso-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-iso-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
module.exports = (fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;


/***/ }),

/***/ "./node_modules/core-js/modules/_date-to-primitive.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_date-to-primitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var NUMBER = 'number';

module.exports = function (hint) {
  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_defined.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_defined.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_descriptors.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_descriptors.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_dom-create.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_dom-create.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-bug-keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-bug-keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/modules/_enum-keys.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_enum-keys.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_export.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_export.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/modules/_fails-is-regexp.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_fails-is-regexp.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fails.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_fails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_fix-re-wks.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_fix-re-wks.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");

var SPECIES = wks('species');

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  // #replace needs built-in support for named groups.
  // #match works fine because it just return the exec results, even if it has
  // a "grops" property.
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  return ''.replace(re, '$<a>') !== '7';
});

var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {
  // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length === 2 && result[0] === 'a' && result[1] === 'b';
})();

module.exports = function (KEY, length, exec) {
  var SYMBOL = wks(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;
    re.exec = function () { execCalled = true; return null; };
    if (KEY === 'split') {
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
    }
    re[SYMBOL]('');
    return !execCalled;
  }) : undefined;

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||
    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)
  ) {
    var nativeRegExpMethod = /./[SYMBOL];
    var fns = exec(
      defined,
      SYMBOL,
      ''[KEY],
      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
        if (regexp.exec === regexpExec) {
          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
            // The native String method already delegates to @@method (this
            // polyfilled function), leasing to infinite recursion.
            // We avoid it by directly calling the native @@method method.
            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
          }
          return { done: true, value: nativeMethod.call(str, regexp, arg2) };
        }
        return { done: false };
      }
    );
    var strfn = fns[0];
    var rxfn = fns[1];

    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flags.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_flags.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.2.5.3 get RegExp.prototype.flags
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_flatten-into-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_flatten-into-array.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var IS_CONCAT_SPREADABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetIndex = start;
  var sourceIndex = 0;
  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceIndex < sourceLen) {
    if (sourceIndex in source) {
      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
      } else {
        if (targetIndex >= 0x1fffffffffffff) throw TypeError();
        target[targetIndex] = element;
      }

      targetIndex++;
    }
    sourceIndex++;
  }
  return targetIndex;
}

module.exports = flattenIntoArray;


/***/ }),

/***/ "./node_modules/core-js/modules/_for-of.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_for-of.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/core-js/modules/_function-to-string.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/_function-to-string.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('native-function-to-string', Function.toString);


/***/ }),

/***/ "./node_modules/core-js/modules/_global.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/modules/_has.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_has.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_hide.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_hide.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_html.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_html.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/modules/_ie8-dom-define.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_ie8-dom-define.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/modules/_inherit-if-required.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_inherit-if-required.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var setPrototypeOf = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set;
module.exports = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
    setPrototypeOf(that, P);
  } return that;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_invoke.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_invoke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iobject.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_iobject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array-iter.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array-iter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-array.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_is-array.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/modules/_is-regexp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_is-regexp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.8 IsRegExp(argument)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var MATCH = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match');
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-call.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-call.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-create.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-create.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-define.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-define.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-detect.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-detect.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iter-step.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iter-step.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_iterators.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_iterators.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/modules/_library.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_library.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),

/***/ "./node_modules/core-js/modules/_math-expm1.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-expm1.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;


/***/ }),

/***/ "./node_modules/core-js/modules/_math-fround.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_math-fround.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

module.exports = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = sign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-log1p.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-log1p.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-scale.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-scale.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
  if (
    arguments.length === 0
      // eslint-disable-next-line no-self-compare
      || x != x
      // eslint-disable-next-line no-self-compare
      || inLow != inLow
      // eslint-disable-next-line no-self-compare
      || inHigh != inHigh
      // eslint-disable-next-line no-self-compare
      || outLow != outLow
      // eslint-disable-next-line no-self-compare
      || outHigh != outHigh
  ) return NaN;
  if (x === Infinity || x === -Infinity) return x;
  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_math-sign.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_math-sign.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_meta.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_meta.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/modules/_metadata.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_metadata.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Map = __webpack_require__(/*! ./es6.map */ "./node_modules/core-js/modules/es6.map.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('metadata');
var store = shared.store || (shared.store = new (__webpack_require__(/*! ./es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js"))());

var getOrCreateMetadataMap = function (target, targetKey, create) {
  var targetMetadata = store.get(target);
  if (!targetMetadata) {
    if (!create) return undefined;
    store.set(target, targetMetadata = new Map());
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if (!keyMetadata) {
    if (!create) return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map());
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function (target, targetKey) {
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
  var keys = [];
  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });
  return keys;
};
var toMetaKey = function (it) {
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function (O) {
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};


/***/ }),

/***/ "./node_modules/core-js/modules/_microtask.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_microtask.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_new-promise-capability.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/_new-promise-capability.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-assign.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-assign.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-create.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-create.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dp.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dp.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-dps.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-dps.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-forced-pam.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-forced-pam.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Forced replacement prototype accessors methods
module.exports = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  var K = Math.random();
  // In FF throws only define methods
  // eslint-disable-next-line no-undef, no-useless-call
  __defineSetter__.call(null, K, function () { /* empty */ });
  delete __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js")[K];
});


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopd.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopd.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gopn.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gopn.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gops.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gops.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-gpo.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-gpo.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys-internal.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys-internal.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-keys.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_object-keys.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-pie.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-pie.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/modules/_object-sap.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_object-sap.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_object-to-array.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_object-to-array.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var isEnum = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f;
module.exports = function (isEntries) {
  return function (it) {
    var O = toIObject(it);
    var keys = getKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || isEnum.call(O, key)) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_own-keys.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_own-keys.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all object keys, includes non-enumerable and symbols
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Reflect = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = gOPN.f(anObject(it));
  var getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_parse-float.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-float.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseFloat = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseFloat;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;

module.exports = 1 / $parseFloat(__webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js") + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;


/***/ }),

/***/ "./node_modules/core-js/modules/_parse-int.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_parse-int.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $parseInt = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").parseInt;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var ws = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var hex = /^[-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;


/***/ }),

/***/ "./node_modules/core-js/modules/_perform.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_perform.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "./node_modules/core-js/modules/_promise-resolve.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/_promise-resolve.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_property-desc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_property-desc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine-all.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine-all.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
module.exports = function (target, src, safe) {
  for (var key in src) redefine(target, key, src[key], safe);
  return target;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_redefine.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_redefine.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var SRC = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js")('src');
var $toString = __webpack_require__(/*! ./_function-to-string */ "./node_modules/core-js/modules/_function-to-string.js");
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);

__webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) has(val, 'name') || hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec-abstract.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec-abstract.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var builtinExec = RegExp.prototype.exec;

 // `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (typeof exec === 'function') {
    var result = exec.call(R, S);
    if (typeof result !== 'object') {
      throw new TypeError('RegExp exec method returned something other than an Object or null');
    }
    return result;
  }
  if (classof(R) !== 'RegExp') {
    throw new TypeError('RegExp#exec called on incompatible receiver');
  }
  return builtinExec.call(R, S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_regexp-exec.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_regexp-exec.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexpFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");

var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedExec = nativeExec;

var LAST_INDEX = 'lastIndex';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeExec.call(re1, 'a');
  nativeExec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];

    match = nativeExec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-next-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),

/***/ "./node_modules/core-js/modules/_replacer.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_replacer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (regExp, replace) {
  var replacer = replace === Object(replace) ? function (part) {
    return replace[part];
  } : replace;
  return function (it) {
    return String(it).replace(regExp, replacer);
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_same-value.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_same-value.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-from.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-collection-from.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-collection-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-collection-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-proto.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_set-proto.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-species.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_set-species.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_set-to-string-tag.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_set-to-string-tag.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared-key.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_shared-key.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_shared.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/_shared.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/modules/_species-constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_species-constructor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_strict-method.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_strict-method.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");

module.exports = function (method, arg) {
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-at.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-at.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-context.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-context.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// helper for String#{startsWith, endsWith, includes}
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-html.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-html.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-pad.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-pad.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function (that, maxLength, fillString, left) {
  var S = String(defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-repeat.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/_string-repeat.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");

module.exports = function repeat(count) {
  var str = String(defined(this));
  var res = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_string-trim.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_string-trim.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var spaces = __webpack_require__(/*! ./_string-ws */ "./node_modules/core-js/modules/_string-ws.js");
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = fails(function () {
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;


/***/ }),

/***/ "./node_modules/core-js/modules/_string-ws.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_string-ws.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "./node_modules/core-js/modules/_task.js":
/*!***********************************************!*\
  !*** ./node_modules/core-js/modules/_task.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-absolute-index.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/_to-absolute-index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-index.js":
/*!***************************************************!*\
  !*** ./node_modules/core-js/modules/_to-index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
module.exports = function (it) {
  if (it === undefined) return 0;
  var number = toInteger(it);
  var length = toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-integer.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-integer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-iobject.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-iobject.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-length.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-length.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-object.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/_to-object.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_to-primitive.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_to-primitive.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-array.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-array.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js")) {
  var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
  var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
  var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
  var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
  var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
  var $buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
  var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
  var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
  var propertyDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
  var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
  var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
  var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
  var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
  var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
  var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
  var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
  var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
  var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
  var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
  var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
  var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
  var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
  var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
  var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
  var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");
  var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
  var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
  var createArrayMethod = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js");
  var createArrayIncludes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js");
  var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
  var ArrayIterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
  var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
  var $iterDetect = __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js");
  var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js");
  var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
  var arrayCopyWithin = __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js");
  var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
  var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };


/***/ }),

/***/ "./node_modules/core-js/modules/_typed-buffer.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/_typed-buffer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toIndex = __webpack_require__(/*! ./_to-index */ "./node_modules/core-js/modules/_to-index.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var arrayFill = __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!$typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = toIndex(length);
    this._b = arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (DESCRIPTORS) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!fails(function () {
    $ArrayBuffer(1);
  }) || !fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance(this, $ArrayBuffer);
      return new BaseBuffer(toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;


/***/ }),

/***/ "./node_modules/core-js/modules/_typed.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/modules/_typed.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i < l) {
  if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};


/***/ }),

/***/ "./node_modules/core-js/modules/_uid.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_uid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/modules/_user-agent.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_user-agent.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/core-js/modules/_validate-collection.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/_validate-collection.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-define.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-define.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/core-js/modules/_wks-ext.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/_wks-ext.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");


/***/ }),

/***/ "./node_modules/core-js/modules/_wks.js":
/*!**********************************************!*\
  !*** ./node_modules/core-js/modules/_wks.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/modules/core.get-iterator-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/core.get-iterator-method.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/modules/core.regexp.escape.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/core.regexp.escape.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/benjamingr/RexExp.escape
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $re = __webpack_require__(/*! ./_replacer */ "./node_modules/core-js/modules/_replacer.js")(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.copy-within.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.copy-within.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { copyWithin: __webpack_require__(/*! ./_array-copy-within */ "./node_modules/core-js/modules/_array-copy-within.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('copyWithin');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.every.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.every.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $every = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(4);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.fill.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.fill.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Array', { fill: __webpack_require__(/*! ./_array-fill */ "./node_modules/core-js/modules/_array-fill.js") });

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('fill');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.filter.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.filter.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $filter = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(2);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find-index.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find-index.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.find.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.find.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $find = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")(KEY);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.for-each.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.for-each.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $forEach = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var STRICT = __webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.from.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.from.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/modules/_is-array-iter.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.index-of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.index-of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $indexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.is-array.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.is-array.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Array', { isArray: __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.join.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.join.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 22.1.3.13 Array.prototype.join(separator)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (__webpack_require__(/*! ./_iobject */ "./node_modules/core-js/modules/_iobject.js") != Object || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.last-index-of.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.last-index-of.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
    var O = toIObject(this);
    var length = toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.map.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.map.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $map = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(1);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.of.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.of.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

// WebKit Array.of isn't generic
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce-right.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce-right.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.reduce.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.reduce.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $reduce = __webpack_require__(/*! ./_array-reduce */ "./node_modules/core-js/modules/_array-reduce.js");

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.slice.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.slice.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/modules/_html.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  if (html) arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = toLength(this.length);
    var klass = cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice.call(this, begin, end);
    var start = toAbsoluteIndex(begin, len);
    var upTo = toAbsoluteIndex(end, len);
    var size = toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.some.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.some.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $some = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(3);

$export($export.P + $export.F * !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.sort.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.sort.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $sort = [].sort;
var test = [1, 2, 3];

$export($export.P + $export.F * (fails(function () {
  // IE8-
  test.sort(undefined);
}) || !fails(function () {
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !__webpack_require__(/*! ./_strict-method */ "./node_modules/core-js/modules/_strict-method.js")($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.array.species.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.array.species.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Array');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.now.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.now.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-iso-string.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-iso-string.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toISOString = __webpack_require__(/*! ./_date-to-iso-string */ "./node_modules/core-js/modules/_date-to-iso-string.js");

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
  toISOString: toISOString
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-json.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-json.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

$export($export.P + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = toObject(this);
    var pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var TO_PRIMITIVE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toPrimitive');
var proto = Date.prototype;

if (!(TO_PRIMITIVE in proto)) __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")(proto, TO_PRIMITIVE, __webpack_require__(/*! ./_date-to-primitive */ "./node_modules/core-js/modules/_date-to-primitive.js"));


/***/ }),

/***/ "./node_modules/core-js/modules/es6.date.to-string.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.date.to-string.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.bind.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.bind.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'Function', { bind: __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.has-instance.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.has-instance.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var HAS_INSTANCE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !isObject(O)) return false;
  if (!isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
  return false;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.function.name.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.function.name.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && dP(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.map.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.map.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.acosh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.acosh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.3 Math.acosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var log1p = __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js");
var sqrt = Math.sqrt;
var $acosh = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.asinh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.asinh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.5 Math.asinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.atanh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.atanh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.7 Math.atanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cbrt.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cbrt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.9 Math.cbrt(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var sign = __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js");

$export($export.S, 'Math', {
  cbrt: function cbrt(x) {
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.clz32.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.clz32.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.11 Math.clz32(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.cosh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.cosh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.12 Math.cosh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.expm1.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.expm1.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.14 Math.expm1(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.fround.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.fround.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.16 Math.fround(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { fround: __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.hypot.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.hypot.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var abs = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.imul.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.imul.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.18 Math.imul(x, y)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log10.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log10.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.21 Math.log10(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log1p.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log1p.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.20 Math.log1p(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { log1p: __webpack_require__(/*! ./_math-log1p */ "./node_modules/core-js/modules/_math-log1p.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.log2.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.log2.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.22 Math.log2(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sign.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sign.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.28 Math.sign(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { sign: __webpack_require__(/*! ./_math-sign */ "./node_modules/core-js/modules/_math-sign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.sinh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.sinh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.30 Math.sinh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.tanh.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.tanh.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.33 Math.tanh(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var expm1 = __webpack_require__(/*! ./_math-expm1 */ "./node_modules/core-js/modules/_math-expm1.js");
var exp = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.math.trunc.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.math.trunc.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.2.2.34 Math.trunc(x)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var $trim = __webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js").trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(__webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js")(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (has(Base, key = keys[j]) && !has($Number, key)) {
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, NUMBER, $Number);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.epsilon.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.epsilon.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.1 Number.EPSILON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-finite.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-finite.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.2 Number.isFinite(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var _isFinite = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-integer.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-integer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.3 Number.isInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { isInteger: __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-nan.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-nan.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.4 Number.isNaN(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.is-safe-integer.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.is-safe-integer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.5 Number.isSafeInteger(number)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isInteger = __webpack_require__(/*! ./_is-integer */ "./node_modules/core-js/modules/_is-integer.js");
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.max-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.max-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.min-safe-integer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.min-safe-integer.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-float.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-float.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.parse-int.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.parse-int.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-fixed.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-fixed.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var repeat = __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js");
var $toFixed = 1.0.toFixed;
var floor = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = aNumberValue(this, ERROR);
    var f = toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.number.to-precision.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.number.to-precision.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var aNumberValue = __webpack_require__(/*! ./_a-number-value */ "./node_modules/core-js/modules/_a-number-value.js");
var $toPrecision = 1.0.toPrecision;

$export($export.P + $export.F * ($fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.assign.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.assign.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.create.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.create.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-properties.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-properties.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperties: __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/modules/_object-dps.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.define-property.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.define-property.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js"), 'Object', { defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.freeze.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.freeze.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.5 Object.freeze(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js":
/*!********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var $getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-own-property-names.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-own-property-names.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 Object.getOwnPropertyNames(O)
__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getOwnPropertyNames', function () {
  return __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js").f;
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.get-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.get-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-extensible.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-extensible.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.11 Object.isExtensible(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-frozen.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-frozen.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.12 Object.isFrozen(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is-sealed.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is-sealed.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.13 Object.isSealed(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.is.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.is.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.10 Object.is(value1, value2)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { is: __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.keys.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.keys.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.prevent-extensions.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.prevent-extensions.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.15 Object.preventExtensions(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.seal.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.seal.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.17 Object.seal(O)
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").onFreeze;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/modules/_object-sap.js")('seal', function ($seal) {
  return function seal(it) {
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.set-prototype-of.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.set-prototype-of.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js").set });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.object.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.object.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.3.6 Object.prototype.toString()
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var test = {};
test[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-float.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-float.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseFloat = __webpack_require__(/*! ./_parse-float */ "./node_modules/core-js/modules/_parse-float.js");
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.parse-int.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.parse-int.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $parseInt = __webpack_require__(/*! ./_parse-int */ "./node_modules/core-js/modules/_parse-int.js");
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.promise.js":
/*!*****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.promise.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.apply.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.apply.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var rApply = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = aFunction(target);
    var L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.construct.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.construct.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var bind = __webpack_require__(/*! ./_bind */ "./node_modules/core-js/modules/_bind.js");
var rConstruct = (__webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function () {
  rConstruct(function () { /* empty */ });
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.define-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.define-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.delete-property.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.delete-property.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.enumerate.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.enumerate.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 26.1.5 Reflect.enumerate(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var Enumerate = function (iterated) {
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return gOPD.f(anObject(target), propertyKey);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.8 Reflect.getPrototypeOf(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var getProto = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return getProto(anObject(target));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.get.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.get.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");

function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (anObject(target) === receiver) return target[propertyKey];
  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', { get: get });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.has.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.has.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.9 Reflect.has(target, propertyKey)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.is-extensible.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.is-extensible.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.10 Reflect.isExtensible(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.own-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.own-keys.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.11 Reflect.ownKeys(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Reflect', { ownKeys: __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js":
/*!************************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.prevent-extensions.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.12 Reflect.preventExtensions(target)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set-prototype-of.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var setProto = __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/modules/_set-proto.js");

if (setProto) $export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.reflect.set.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.reflect.set.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");

function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = gOPD.f(anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (isObject(proto = getPrototypeOf(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if (has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !isObject(receiver)) return false;
    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
    } else dP.f(receiver, propertyKey, createDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', { set: set });


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.constructor.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.constructor.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var inheritIfRequired = __webpack_require__(/*! ./_inherit-if-required */ "./node_modules/core-js/modules/_inherit-if-required.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f;
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f;
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && (!CORRECT_NEW || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  re2[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = isRegExp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(global, 'RegExp', $RegExp);
}

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('RegExp');


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.exec.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.exec.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
__webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js")({
  target: 'RegExp',
  proto: true,
  forced: regexpExec !== /./.exec
}, {
  exec: regexpExec
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.flags.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.flags.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 21.2.5.3 get RegExp.prototype.flags()
if (__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && /./g.flags != 'g') __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js").f(RegExp.prototype, 'flags', {
  configurable: true,
  get: __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.match.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.match.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@match logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
    function (regexp) {
      var res = maybeCallNative($match, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      if (!rx.global) return regExpExec(rx, S);
      var fullUnicode = rx.unicode;
      rx.lastIndex = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regExpExec(rx, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.replace.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.replace.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// @@replace logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {
  return [
    // `String.prototype.replace` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = defined(this);
      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined
        ? fn.call(searchValue, O, replaceValue)
        : $replace.call(String(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
    function (regexp, replaceValue) {
      var res = maybeCallNative($replace, regexp, this, replaceValue);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var functionalReplace = typeof replaceValue === 'function';
      if (!functionalReplace) replaceValue = String(replaceValue);
      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;
        results.push(result);
        if (!global) break;
        var matchStr = String(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }
      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];
        var matched = String(result[0]);
        var position = max(min(toInteger(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = [matched].concat(captures, position, S);
          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
          var replacement = String(replaceValue.apply(undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + S.slice(nextSourcePosition);
    }
  ];

    // https://tc39.github.io/ecma262/#sec-getsubstitution
  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
    var tailPos = position + matched.length;
    var m = captures.length;
    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
    if (namedCaptures !== undefined) {
      namedCaptures = toObject(namedCaptures);
      symbols = SUBSTITUTION_SYMBOLS;
    }
    return $replace.call(replacement, symbols, function (match, ch) {
      var capture;
      switch (ch.charAt(0)) {
        case '$': return '$';
        case '&': return matched;
        case '`': return str.slice(0, position);
        case "'": return str.slice(tailPos);
        case '<':
          capture = namedCaptures[ch.slice(1, -1)];
          break;
        default: // \d\d?
          var n = +ch;
          if (n === 0) return match;
          if (n > m) {
            var f = floor(n / 10);
            if (f === 0) return match;
            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
            return match;
          }
          capture = captures[n - 1];
      }
      return capture === undefined ? '' : capture;
    });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.search.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var sameValue = __webpack_require__(/*! ./_same-value */ "./node_modules/core-js/modules/_same-value.js");
var regExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");

// @@search logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(regexp) {
      var O = defined(this);
      var fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
    function (regexp) {
      var res = maybeCallNative($search, regexp, this);
      if (res.done) return res.value;
      var rx = anObject(regexp);
      var S = String(this);
      var previousLastIndex = rx.lastIndex;
      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
      var result = regExpExec(rx, S);
      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
      return result === null ? -1 : result.index;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.split.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.split.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var advanceStringIndex = __webpack_require__(/*! ./_advance-string-index */ "./node_modules/core-js/modules/_advance-string-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var callRegExpExec = __webpack_require__(/*! ./_regexp-exec-abstract */ "./node_modules/core-js/modules/_regexp-exec-abstract.js");
var regexpExec = __webpack_require__(/*! ./_regexp-exec */ "./node_modules/core-js/modules/_regexp-exec.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 0xffffffff;

// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });

// @@split logic
__webpack_require__(/*! ./_fix-re-wks */ "./node_modules/core-js/modules/_fix-re-wks.js")('split', 2, function (defined, SPLIT, $split, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return $split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = regexpExec.call(separatorCopy, string)) {
        lastIndex = separatorCopy[LAST_INDEX];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
  } else {
    internalSplit = $split;
  }

  return [
    // `String.prototype.split` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = defined(this);
      var splitter = separator == undefined ? undefined : separator[SPLIT];
      return splitter !== undefined
        ? splitter.call(separator, O, limit)
        : internalSplit.call(String(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (regexp, limit) {
      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
      if (res.done) return res.value;

      var rx = anObject(regexp);
      var S = String(this);
      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (SUPPORTS_Y ? 'y' : 'g');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = SUPPORTS_Y ? q : 0;
        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
        var e;
        if (
          z === null ||
          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          A.push(S.slice(p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            A.push(z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      A.push(S.slice(p));
      return A;
    }
  ];
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.regexp.to-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.regexp.to-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

__webpack_require__(/*! ./es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var $flags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];

var define = function (fn) {
  __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js")(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (__webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString.name != TO_STRING) {
  define(function toString() {
    return $toString.call(this);
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.set.js":
/*!*************************************************!*\
  !*** ./node_modules/core-js/modules/es6.set.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var SET = 'Set';

// 23.2 Set Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
  }
}, strong);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.anchor.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.anchor.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.2 String.prototype.anchor(name)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.big.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.big.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.3 String.prototype.big()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.blink.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.blink.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.4 String.prototype.blink()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.bold.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.bold.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.5 String.prototype.bold()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.code-point-at.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.code-point-at.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at(this, pos);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.ends-with.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.ends-with.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = context(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fixed.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fixed.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.6 String.prototype.fixed()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontcolor.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontcolor.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.7 String.prototype.fontcolor(color)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.fontsize.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.fontsize.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.8 String.prototype.fontsize(size)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.from-code-point.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.from-code-point.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.includes.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.includes.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.7 String.prototype.includes(searchString, position = 0)

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var INCLUDES = 'includes';

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.italics.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.italics.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.9 String.prototype.italics()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.iterator.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.iterator.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.link.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.link.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.10 String.prototype.link(url)
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.raw.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.raw.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = toIObject(callSite.raw);
    var len = toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.repeat.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.repeat.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: __webpack_require__(/*! ./_string-repeat */ "./node_modules/core-js/modules/_string-repeat.js")
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.small.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.small.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.11 String.prototype.small()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.starts-with.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.starts-with.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var context = __webpack_require__(/*! ./_string-context */ "./node_modules/core-js/modules/_string-context.js");
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * __webpack_require__(/*! ./_fails-is-regexp */ "./node_modules/core-js/modules/_fails-is-regexp.js")(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = context(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.strike.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.strike.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.12 String.prototype.strike()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sub.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sub.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.13 String.prototype.sub()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.sup.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.sup.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// B.2.3.14 String.prototype.sup()
__webpack_require__(/*! ./_string-html */ "./node_modules/core-js/modules/_string-html.js")('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.string.trim.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es6.string.trim.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 21.1.3.25 String.prototype.trim()
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.symbol.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es6.symbol.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var $GOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/modules/_object-gops.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/modules/_object-pie.js").f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });

$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return $GOPS.f(toObject(it));
  }
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.array-buffer.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.array-buffer.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $typed = __webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js");
var buffer = __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/modules/_to-absolute-index.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var ArrayBuffer = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").ArrayBuffer;
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * __webpack_require__(/*! ./_fails */ "./node_modules/core-js/modules/_fails.js")(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
    var len = anObject(this).byteLength;
    var first = toAbsoluteIndex(start, len);
    var fin = toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")(ARRAY_BUFFER);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.data-view.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.data-view.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
$export($export.G + $export.W + $export.F * !__webpack_require__(/*! ./_typed */ "./node_modules/core-js/modules/_typed.js").ABV, {
  DataView: __webpack_require__(/*! ./_typed-buffer */ "./node_modules/core-js/modules/_typed-buffer.js").DataView
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float32-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float32-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.float64-array.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.float64-array.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int16-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int16-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int32-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int32-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.int8-array.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.int8-array.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint16-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint16-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint32-array.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint32-array.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-array.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-array.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});


/***/ }),

/***/ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_typed-array */ "./node_modules/core-js/modules/_typed-array.js")('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-map.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-map.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/modules/_array-methods.js")(0);
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/modules/_meta.js");
var assign = __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/modules/_object-assign.js");
var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/modules/_is-object.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var NATIVE_WEAK_MAP = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return weak.def(validate(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_MAP, wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}


/***/ }),

/***/ "./node_modules/core-js/modules/es6.weak-set.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es6.weak-set.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var weak = __webpack_require__(/*! ./_collection-weak */ "./node_modules/core-js/modules/_collection-weak.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/modules/_validate-collection.js");
var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
__webpack_require__(/*! ./_collection */ "./node_modules/core-js/modules/_collection.js")(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return weak.def(validate(this, WEAK_SET), value, true);
  }
}, weak, false, true);


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flat-map.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flat-map.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatMap: function flatMap(callbackfn /* , thisArg */) {
    var O = toObject(this);
    var sourceLen, A;
    aFunction(callbackfn);
    sourceLen = toLength(O.length);
    A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.flatten.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.flatten.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var flattenIntoArray = __webpack_require__(/*! ./_flatten-into-array */ "./node_modules/core-js/modules/_flatten-into-array.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/modules/_to-integer.js");
var arraySpeciesCreate = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/modules/_array-species-create.js");

$export($export.P, 'Array', {
  flatten: function flatten(/* depthArg = 1 */) {
    var depthArg = arguments[0];
    var O = toObject(this);
    var sourceLen = toLength(O.length);
    var A = arraySpeciesCreate(O, 0);
    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
    return A;
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('flatten');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.array.includes.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.array.includes.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/Array.prototype.includes
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $includes = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/modules/_array-includes.js")(true);

$export($export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

__webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/modules/_add-to-unscopables.js")('includes');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.asap.js":
/*!**************************************************!*\
  !*** ./node_modules/core-js/modules/es7.asap.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var process = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js").process;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js")(process) == 'process';

$export($export.G, {
  asap: function asap(fn) {
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.error.is-error.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.error.is-error.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/ljharb/proposal-is-error
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/modules/_cof.js");

$export($export.S, 'Error', {
  isError: function isError(it) {
    return cof(it) === 'Error';
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.global.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.global.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.G, { global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.from.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.of.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.of.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.map.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.map.to-json.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/core-js/modules/_collection-to-json.js")('Map') });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.clamp.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.clamp.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  clamp: function clamp(x, lower, upper) {
    return Math.min(upper, Math.max(lower, x));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.deg-per-rad.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.deg-per-rad.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.degrees.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.degrees.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var RAD_PER_DEG = 180 / Math.PI;

$export($export.S, 'Math', {
  degrees: function degrees(radians) {
    return radians * RAD_PER_DEG;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.fscale.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.fscale.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var scale = __webpack_require__(/*! ./_math-scale */ "./node_modules/core-js/modules/_math-scale.js");
var fround = __webpack_require__(/*! ./_math-fround */ "./node_modules/core-js/modules/_math-fround.js");

$export($export.S, 'Math', {
  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
    return fround(scale(x, inLow, inHigh, outLow, outHigh));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.iaddh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.iaddh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.imulh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.imulh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  imulh: function imulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >> 16;
    var v1 = $v >> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.isubh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.isubh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1) {
    var $x0 = x0 >>> 0;
    var $x1 = x1 >>> 0;
    var $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.rad-per-deg.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.rad-per-deg.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.radians.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.radians.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var DEG_PER_RAD = Math.PI / 180;

$export($export.S, 'Math', {
  radians: function radians(degrees) {
    return degrees * DEG_PER_RAD;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.scale.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.scale.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://rwaldron.github.io/proposal-math-extensions/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { scale: __webpack_require__(/*! ./_math-scale */ "./node_modules/core-js/modules/_math-scale.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.signbit.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.signbit.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// http://jfbastien.github.io/papers/Math.signbit.html
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', { signbit: function signbit(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.math.umulh.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.math.umulh.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'Math', {
  umulh: function umulh(u, v) {
    var UINT16 = 0xffff;
    var $u = +u;
    var $v = +v;
    var u0 = $u & UINT16;
    var v0 = $v & UINT16;
    var u1 = $u >>> 16;
    var v1 = $v >>> 16;
    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-getter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.define-getter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter) {
    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.define-setter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.define-setter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/modules/_object-dp.js");

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter) {
    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.entries.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.entries.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $entries = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(true);

$export($export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var ownKeys = __webpack_require__(/*! ./_own-keys */ "./node_modules/core-js/modules/_own-keys.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/modules/_to-iobject.js");
var gOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/modules/_create-property.js");

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = toIObject(object);
    var getDesc = gOPD.f;
    var keys = ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) createProperty(result, key, desc);
    }
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-getter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.lookup-getter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupGetter__: function __lookupGetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.get;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.lookup-setter.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.lookup-setter.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/modules/_to-object.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/modules/_to-primitive.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/modules/_object-gopd.js").f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/modules/_descriptors.js") && $export($export.P + __webpack_require__(/*! ./_object-forced-pam */ "./node_modules/core-js/modules/_object-forced-pam.js"), 'Object', {
  __lookupSetter__: function __lookupSetter__(P) {
    var O = toObject(this);
    var K = toPrimitive(P, true);
    var D;
    do {
      if (D = getOwnPropertyDescriptor(O, K)) return D.set;
    } while (O = getPrototypeOf(O));
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.object.values.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.object.values.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-object-values-entries
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $values = __webpack_require__(/*! ./_object-to-array */ "./node_modules/core-js/modules/_object-to-array.js")(false);

$export($export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.observable.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.observable.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/zenparsing/es-observable
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/modules/_microtask.js")();
var OBSERVABLE = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js")('observable');
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/modules/_an-instance.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/modules/_redefine-all.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/modules/_for-of.js");
var RETURN = forOf.RETURN;

var getMethod = function (fn) {
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function (subscription) {
  var cleanup = subscription._c;
  if (cleanup) {
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function (subscription) {
  return subscription._o === undefined;
};

var closeSubscription = function (subscription) {
  if (!subscriptionClosed(subscription)) {
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function (observer, subscriber) {
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup = subscriber(observer);
    var subscription = cleanup;
    if (cleanup != null) {
      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch (e) {
    observer.error(e);
    return;
  } if (subscriptionClosed(this)) cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe() { closeSubscription(this); }
});

var SubscriptionObserver = function (subscription) {
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if (m) return m.call(observer, value);
      } catch (e) {
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value) {
    var subscription = this._s;
    if (subscriptionClosed(subscription)) throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if (!m) throw value;
      value = m.call(observer, value);
    } catch (e) {
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value) {
    var subscription = this._s;
    if (!subscriptionClosed(subscription)) {
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber) {
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer) {
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn) {
    var that = this;
    return new (core.Promise || global.Promise)(function (resolve, reject) {
      aFunction(fn);
      var subscription = that.subscribe({
        next: function (value) {
          try {
            return fn(value);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x) {
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if (method) {
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function (observer) {
        return observable.subscribe(observer);
      });
    }
    return new C(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          try {
            if (forOf(x, false, function (it) {
              observer.next(it);
              if (done) return RETURN;
            }) === RETURN) return;
          } catch (e) {
            if (done) throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  },
  of: function of() {
    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function (observer) {
      var done = false;
      microtask(function () {
        if (!done) {
          for (var j = 0; j < items.length; ++j) {
            observer.next(items[j]);
            if (done) return;
          } observer.complete();
        }
      });
      return function () { done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function () { return this; });

$export($export.G, { Observable: $Observable });

__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/modules/_set-species.js")('Observable');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.finally.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.finally.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/modules/_species-constructor.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.promise.try.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.promise.try.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/modules/_perform.js");

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.define-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.define-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.delete-metadata.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;

metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {
  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
  if (metadataMap.size) return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(/*! ./es6.set */ "./node_modules/core-js/modules/es6.set.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/modules/_array-from-iterable.js");
var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

var ordinaryMetadataKeys = function (O, P) {
  var oKeys = ordinaryOwnMetadataKeys(O, P);
  var parent = getPrototypeOf(O);
  if (parent === null) return oKeys;
  var pKeys = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

var ordinaryGetMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.get-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;

metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-metadata.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-metadata.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/modules/_object-gpo.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

var ordinaryHasMetadata = function (MetadataKey, O, P) {
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if (hasOwn) return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.has-own-metadata.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;

metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.reflect.metadata.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.reflect.metadata.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $metadata = __webpack_require__(/*! ./_metadata */ "./node_modules/core-js/modules/_metadata.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/modules/_a-function.js");
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;

$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
  return function decorator(target, targetKey) {
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
} });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.from.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.from.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('Set');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.of.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.of.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('Set');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.set.to-json.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.set.to-json.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/core-js/modules/_collection-to-json.js")('Set') });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.at.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.at.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/mathiasbynens/String.prototype.at
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/modules/_string-at.js")(true);

$export($export.P, 'String', {
  at: function at(pos) {
    return $at(this, pos);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.match-all.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.match-all.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/String.prototype.matchAll/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/modules/_defined.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/modules/_to-length.js");
var isRegExp = __webpack_require__(/*! ./_is-regexp */ "./node_modules/core-js/modules/_is-regexp.js");
var getFlags = __webpack_require__(/*! ./_flags */ "./node_modules/core-js/modules/_flags.js");
var RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function (regexp, string) {
  this._r = regexp;
  this._s = string;
};

__webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/modules/_iter-create.js")($RegExpStringIterator, 'RegExp String', function next() {
  var match = this._r.exec(this._s);
  return { value: match, done: match === null };
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp) {
    defined(this);
    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
    var S = String(this);
    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-end.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-end.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.pad-start.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.pad-start.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-string-pad-start-end
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $pad = __webpack_require__(/*! ./_string-pad */ "./node_modules/core-js/modules/_string-pad.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");

// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);

$export($export.P + $export.F * WEBKIT_BUG, 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-left.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-left.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimLeft', function ($trim) {
  return function trimLeft() {
    return $trim(this, 1);
  };
}, 'trimStart');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.string.trim-right.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.string.trim-right.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
__webpack_require__(/*! ./_string-trim */ "./node_modules/core-js/modules/_string-trim.js")('trimRight', function ($trim) {
  return function trimRight() {
    return $trim(this, 2);
  };
}, 'trimEnd');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.async-iterator.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.async-iterator.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.symbol.observable.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/modules/es7.symbol.observable.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/modules/_wks-define.js")('observable');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.system.global.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.system.global.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-global
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");

$export($export.S, 'System', { global: __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js") });


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.from.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-map.from.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('WeakMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-map.of.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-map.of.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('WeakMap');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.from.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-set.from.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/modules/_set-collection-from.js")('WeakSet');


/***/ }),

/***/ "./node_modules/core-js/modules/es7.weak-set.of.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/modules/es7.weak-set.of.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/modules/_set-collection-of.js")('WeakSet');


/***/ }),

/***/ "./node_modules/core-js/modules/web.dom.iterable.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/modules/web.dom.iterable.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $iterators = __webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/modules/_object-keys.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/modules/_redefine.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/modules/_iterators.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/modules/_wks.js");
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
  }
}


/***/ }),

/***/ "./node_modules/core-js/modules/web.immediate.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/modules/web.immediate.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var $task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/modules/_task.js");
$export($export.G + $export.B, {
  setImmediate: $task.set,
  clearImmediate: $task.clear
});


/***/ }),

/***/ "./node_modules/core-js/modules/web.timers.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/modules/web.timers.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// ie9- setTimeout & setInterval additional parameters fix
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/modules/_export.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/modules/_user-agent.js");
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout: wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});


/***/ }),

/***/ "./node_modules/core-js/shim.js":
/*!**************************************!*\
  !*** ./node_modules/core-js/shim.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./modules/es6.symbol */ "./node_modules/core-js/modules/es6.symbol.js");
__webpack_require__(/*! ./modules/es6.object.create */ "./node_modules/core-js/modules/es6.object.create.js");
__webpack_require__(/*! ./modules/es6.object.define-property */ "./node_modules/core-js/modules/es6.object.define-property.js");
__webpack_require__(/*! ./modules/es6.object.define-properties */ "./node_modules/core-js/modules/es6.object.define-properties.js");
__webpack_require__(/*! ./modules/es6.object.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js");
__webpack_require__(/*! ./modules/es6.object.get-prototype-of */ "./node_modules/core-js/modules/es6.object.get-prototype-of.js");
__webpack_require__(/*! ./modules/es6.object.keys */ "./node_modules/core-js/modules/es6.object.keys.js");
__webpack_require__(/*! ./modules/es6.object.get-own-property-names */ "./node_modules/core-js/modules/es6.object.get-own-property-names.js");
__webpack_require__(/*! ./modules/es6.object.freeze */ "./node_modules/core-js/modules/es6.object.freeze.js");
__webpack_require__(/*! ./modules/es6.object.seal */ "./node_modules/core-js/modules/es6.object.seal.js");
__webpack_require__(/*! ./modules/es6.object.prevent-extensions */ "./node_modules/core-js/modules/es6.object.prevent-extensions.js");
__webpack_require__(/*! ./modules/es6.object.is-frozen */ "./node_modules/core-js/modules/es6.object.is-frozen.js");
__webpack_require__(/*! ./modules/es6.object.is-sealed */ "./node_modules/core-js/modules/es6.object.is-sealed.js");
__webpack_require__(/*! ./modules/es6.object.is-extensible */ "./node_modules/core-js/modules/es6.object.is-extensible.js");
__webpack_require__(/*! ./modules/es6.object.assign */ "./node_modules/core-js/modules/es6.object.assign.js");
__webpack_require__(/*! ./modules/es6.object.is */ "./node_modules/core-js/modules/es6.object.is.js");
__webpack_require__(/*! ./modules/es6.object.set-prototype-of */ "./node_modules/core-js/modules/es6.object.set-prototype-of.js");
__webpack_require__(/*! ./modules/es6.object.to-string */ "./node_modules/core-js/modules/es6.object.to-string.js");
__webpack_require__(/*! ./modules/es6.function.bind */ "./node_modules/core-js/modules/es6.function.bind.js");
__webpack_require__(/*! ./modules/es6.function.name */ "./node_modules/core-js/modules/es6.function.name.js");
__webpack_require__(/*! ./modules/es6.function.has-instance */ "./node_modules/core-js/modules/es6.function.has-instance.js");
__webpack_require__(/*! ./modules/es6.parse-int */ "./node_modules/core-js/modules/es6.parse-int.js");
__webpack_require__(/*! ./modules/es6.parse-float */ "./node_modules/core-js/modules/es6.parse-float.js");
__webpack_require__(/*! ./modules/es6.number.constructor */ "./node_modules/core-js/modules/es6.number.constructor.js");
__webpack_require__(/*! ./modules/es6.number.to-fixed */ "./node_modules/core-js/modules/es6.number.to-fixed.js");
__webpack_require__(/*! ./modules/es6.number.to-precision */ "./node_modules/core-js/modules/es6.number.to-precision.js");
__webpack_require__(/*! ./modules/es6.number.epsilon */ "./node_modules/core-js/modules/es6.number.epsilon.js");
__webpack_require__(/*! ./modules/es6.number.is-finite */ "./node_modules/core-js/modules/es6.number.is-finite.js");
__webpack_require__(/*! ./modules/es6.number.is-integer */ "./node_modules/core-js/modules/es6.number.is-integer.js");
__webpack_require__(/*! ./modules/es6.number.is-nan */ "./node_modules/core-js/modules/es6.number.is-nan.js");
__webpack_require__(/*! ./modules/es6.number.is-safe-integer */ "./node_modules/core-js/modules/es6.number.is-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.max-safe-integer */ "./node_modules/core-js/modules/es6.number.max-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.min-safe-integer */ "./node_modules/core-js/modules/es6.number.min-safe-integer.js");
__webpack_require__(/*! ./modules/es6.number.parse-float */ "./node_modules/core-js/modules/es6.number.parse-float.js");
__webpack_require__(/*! ./modules/es6.number.parse-int */ "./node_modules/core-js/modules/es6.number.parse-int.js");
__webpack_require__(/*! ./modules/es6.math.acosh */ "./node_modules/core-js/modules/es6.math.acosh.js");
__webpack_require__(/*! ./modules/es6.math.asinh */ "./node_modules/core-js/modules/es6.math.asinh.js");
__webpack_require__(/*! ./modules/es6.math.atanh */ "./node_modules/core-js/modules/es6.math.atanh.js");
__webpack_require__(/*! ./modules/es6.math.cbrt */ "./node_modules/core-js/modules/es6.math.cbrt.js");
__webpack_require__(/*! ./modules/es6.math.clz32 */ "./node_modules/core-js/modules/es6.math.clz32.js");
__webpack_require__(/*! ./modules/es6.math.cosh */ "./node_modules/core-js/modules/es6.math.cosh.js");
__webpack_require__(/*! ./modules/es6.math.expm1 */ "./node_modules/core-js/modules/es6.math.expm1.js");
__webpack_require__(/*! ./modules/es6.math.fround */ "./node_modules/core-js/modules/es6.math.fround.js");
__webpack_require__(/*! ./modules/es6.math.hypot */ "./node_modules/core-js/modules/es6.math.hypot.js");
__webpack_require__(/*! ./modules/es6.math.imul */ "./node_modules/core-js/modules/es6.math.imul.js");
__webpack_require__(/*! ./modules/es6.math.log10 */ "./node_modules/core-js/modules/es6.math.log10.js");
__webpack_require__(/*! ./modules/es6.math.log1p */ "./node_modules/core-js/modules/es6.math.log1p.js");
__webpack_require__(/*! ./modules/es6.math.log2 */ "./node_modules/core-js/modules/es6.math.log2.js");
__webpack_require__(/*! ./modules/es6.math.sign */ "./node_modules/core-js/modules/es6.math.sign.js");
__webpack_require__(/*! ./modules/es6.math.sinh */ "./node_modules/core-js/modules/es6.math.sinh.js");
__webpack_require__(/*! ./modules/es6.math.tanh */ "./node_modules/core-js/modules/es6.math.tanh.js");
__webpack_require__(/*! ./modules/es6.math.trunc */ "./node_modules/core-js/modules/es6.math.trunc.js");
__webpack_require__(/*! ./modules/es6.string.from-code-point */ "./node_modules/core-js/modules/es6.string.from-code-point.js");
__webpack_require__(/*! ./modules/es6.string.raw */ "./node_modules/core-js/modules/es6.string.raw.js");
__webpack_require__(/*! ./modules/es6.string.trim */ "./node_modules/core-js/modules/es6.string.trim.js");
__webpack_require__(/*! ./modules/es6.string.iterator */ "./node_modules/core-js/modules/es6.string.iterator.js");
__webpack_require__(/*! ./modules/es6.string.code-point-at */ "./node_modules/core-js/modules/es6.string.code-point-at.js");
__webpack_require__(/*! ./modules/es6.string.ends-with */ "./node_modules/core-js/modules/es6.string.ends-with.js");
__webpack_require__(/*! ./modules/es6.string.includes */ "./node_modules/core-js/modules/es6.string.includes.js");
__webpack_require__(/*! ./modules/es6.string.repeat */ "./node_modules/core-js/modules/es6.string.repeat.js");
__webpack_require__(/*! ./modules/es6.string.starts-with */ "./node_modules/core-js/modules/es6.string.starts-with.js");
__webpack_require__(/*! ./modules/es6.string.anchor */ "./node_modules/core-js/modules/es6.string.anchor.js");
__webpack_require__(/*! ./modules/es6.string.big */ "./node_modules/core-js/modules/es6.string.big.js");
__webpack_require__(/*! ./modules/es6.string.blink */ "./node_modules/core-js/modules/es6.string.blink.js");
__webpack_require__(/*! ./modules/es6.string.bold */ "./node_modules/core-js/modules/es6.string.bold.js");
__webpack_require__(/*! ./modules/es6.string.fixed */ "./node_modules/core-js/modules/es6.string.fixed.js");
__webpack_require__(/*! ./modules/es6.string.fontcolor */ "./node_modules/core-js/modules/es6.string.fontcolor.js");
__webpack_require__(/*! ./modules/es6.string.fontsize */ "./node_modules/core-js/modules/es6.string.fontsize.js");
__webpack_require__(/*! ./modules/es6.string.italics */ "./node_modules/core-js/modules/es6.string.italics.js");
__webpack_require__(/*! ./modules/es6.string.link */ "./node_modules/core-js/modules/es6.string.link.js");
__webpack_require__(/*! ./modules/es6.string.small */ "./node_modules/core-js/modules/es6.string.small.js");
__webpack_require__(/*! ./modules/es6.string.strike */ "./node_modules/core-js/modules/es6.string.strike.js");
__webpack_require__(/*! ./modules/es6.string.sub */ "./node_modules/core-js/modules/es6.string.sub.js");
__webpack_require__(/*! ./modules/es6.string.sup */ "./node_modules/core-js/modules/es6.string.sup.js");
__webpack_require__(/*! ./modules/es6.date.now */ "./node_modules/core-js/modules/es6.date.now.js");
__webpack_require__(/*! ./modules/es6.date.to-json */ "./node_modules/core-js/modules/es6.date.to-json.js");
__webpack_require__(/*! ./modules/es6.date.to-iso-string */ "./node_modules/core-js/modules/es6.date.to-iso-string.js");
__webpack_require__(/*! ./modules/es6.date.to-string */ "./node_modules/core-js/modules/es6.date.to-string.js");
__webpack_require__(/*! ./modules/es6.date.to-primitive */ "./node_modules/core-js/modules/es6.date.to-primitive.js");
__webpack_require__(/*! ./modules/es6.array.is-array */ "./node_modules/core-js/modules/es6.array.is-array.js");
__webpack_require__(/*! ./modules/es6.array.from */ "./node_modules/core-js/modules/es6.array.from.js");
__webpack_require__(/*! ./modules/es6.array.of */ "./node_modules/core-js/modules/es6.array.of.js");
__webpack_require__(/*! ./modules/es6.array.join */ "./node_modules/core-js/modules/es6.array.join.js");
__webpack_require__(/*! ./modules/es6.array.slice */ "./node_modules/core-js/modules/es6.array.slice.js");
__webpack_require__(/*! ./modules/es6.array.sort */ "./node_modules/core-js/modules/es6.array.sort.js");
__webpack_require__(/*! ./modules/es6.array.for-each */ "./node_modules/core-js/modules/es6.array.for-each.js");
__webpack_require__(/*! ./modules/es6.array.map */ "./node_modules/core-js/modules/es6.array.map.js");
__webpack_require__(/*! ./modules/es6.array.filter */ "./node_modules/core-js/modules/es6.array.filter.js");
__webpack_require__(/*! ./modules/es6.array.some */ "./node_modules/core-js/modules/es6.array.some.js");
__webpack_require__(/*! ./modules/es6.array.every */ "./node_modules/core-js/modules/es6.array.every.js");
__webpack_require__(/*! ./modules/es6.array.reduce */ "./node_modules/core-js/modules/es6.array.reduce.js");
__webpack_require__(/*! ./modules/es6.array.reduce-right */ "./node_modules/core-js/modules/es6.array.reduce-right.js");
__webpack_require__(/*! ./modules/es6.array.index-of */ "./node_modules/core-js/modules/es6.array.index-of.js");
__webpack_require__(/*! ./modules/es6.array.last-index-of */ "./node_modules/core-js/modules/es6.array.last-index-of.js");
__webpack_require__(/*! ./modules/es6.array.copy-within */ "./node_modules/core-js/modules/es6.array.copy-within.js");
__webpack_require__(/*! ./modules/es6.array.fill */ "./node_modules/core-js/modules/es6.array.fill.js");
__webpack_require__(/*! ./modules/es6.array.find */ "./node_modules/core-js/modules/es6.array.find.js");
__webpack_require__(/*! ./modules/es6.array.find-index */ "./node_modules/core-js/modules/es6.array.find-index.js");
__webpack_require__(/*! ./modules/es6.array.species */ "./node_modules/core-js/modules/es6.array.species.js");
__webpack_require__(/*! ./modules/es6.array.iterator */ "./node_modules/core-js/modules/es6.array.iterator.js");
__webpack_require__(/*! ./modules/es6.regexp.constructor */ "./node_modules/core-js/modules/es6.regexp.constructor.js");
__webpack_require__(/*! ./modules/es6.regexp.exec */ "./node_modules/core-js/modules/es6.regexp.exec.js");
__webpack_require__(/*! ./modules/es6.regexp.to-string */ "./node_modules/core-js/modules/es6.regexp.to-string.js");
__webpack_require__(/*! ./modules/es6.regexp.flags */ "./node_modules/core-js/modules/es6.regexp.flags.js");
__webpack_require__(/*! ./modules/es6.regexp.match */ "./node_modules/core-js/modules/es6.regexp.match.js");
__webpack_require__(/*! ./modules/es6.regexp.replace */ "./node_modules/core-js/modules/es6.regexp.replace.js");
__webpack_require__(/*! ./modules/es6.regexp.search */ "./node_modules/core-js/modules/es6.regexp.search.js");
__webpack_require__(/*! ./modules/es6.regexp.split */ "./node_modules/core-js/modules/es6.regexp.split.js");
__webpack_require__(/*! ./modules/es6.promise */ "./node_modules/core-js/modules/es6.promise.js");
__webpack_require__(/*! ./modules/es6.map */ "./node_modules/core-js/modules/es6.map.js");
__webpack_require__(/*! ./modules/es6.set */ "./node_modules/core-js/modules/es6.set.js");
__webpack_require__(/*! ./modules/es6.weak-map */ "./node_modules/core-js/modules/es6.weak-map.js");
__webpack_require__(/*! ./modules/es6.weak-set */ "./node_modules/core-js/modules/es6.weak-set.js");
__webpack_require__(/*! ./modules/es6.typed.array-buffer */ "./node_modules/core-js/modules/es6.typed.array-buffer.js");
__webpack_require__(/*! ./modules/es6.typed.data-view */ "./node_modules/core-js/modules/es6.typed.data-view.js");
__webpack_require__(/*! ./modules/es6.typed.int8-array */ "./node_modules/core-js/modules/es6.typed.int8-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint8-array */ "./node_modules/core-js/modules/es6.typed.uint8-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint8-clamped-array */ "./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js");
__webpack_require__(/*! ./modules/es6.typed.int16-array */ "./node_modules/core-js/modules/es6.typed.int16-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint16-array */ "./node_modules/core-js/modules/es6.typed.uint16-array.js");
__webpack_require__(/*! ./modules/es6.typed.int32-array */ "./node_modules/core-js/modules/es6.typed.int32-array.js");
__webpack_require__(/*! ./modules/es6.typed.uint32-array */ "./node_modules/core-js/modules/es6.typed.uint32-array.js");
__webpack_require__(/*! ./modules/es6.typed.float32-array */ "./node_modules/core-js/modules/es6.typed.float32-array.js");
__webpack_require__(/*! ./modules/es6.typed.float64-array */ "./node_modules/core-js/modules/es6.typed.float64-array.js");
__webpack_require__(/*! ./modules/es6.reflect.apply */ "./node_modules/core-js/modules/es6.reflect.apply.js");
__webpack_require__(/*! ./modules/es6.reflect.construct */ "./node_modules/core-js/modules/es6.reflect.construct.js");
__webpack_require__(/*! ./modules/es6.reflect.define-property */ "./node_modules/core-js/modules/es6.reflect.define-property.js");
__webpack_require__(/*! ./modules/es6.reflect.delete-property */ "./node_modules/core-js/modules/es6.reflect.delete-property.js");
__webpack_require__(/*! ./modules/es6.reflect.enumerate */ "./node_modules/core-js/modules/es6.reflect.enumerate.js");
__webpack_require__(/*! ./modules/es6.reflect.get */ "./node_modules/core-js/modules/es6.reflect.get.js");
__webpack_require__(/*! ./modules/es6.reflect.get-own-property-descriptor */ "./node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js");
__webpack_require__(/*! ./modules/es6.reflect.get-prototype-of */ "./node_modules/core-js/modules/es6.reflect.get-prototype-of.js");
__webpack_require__(/*! ./modules/es6.reflect.has */ "./node_modules/core-js/modules/es6.reflect.has.js");
__webpack_require__(/*! ./modules/es6.reflect.is-extensible */ "./node_modules/core-js/modules/es6.reflect.is-extensible.js");
__webpack_require__(/*! ./modules/es6.reflect.own-keys */ "./node_modules/core-js/modules/es6.reflect.own-keys.js");
__webpack_require__(/*! ./modules/es6.reflect.prevent-extensions */ "./node_modules/core-js/modules/es6.reflect.prevent-extensions.js");
__webpack_require__(/*! ./modules/es6.reflect.set */ "./node_modules/core-js/modules/es6.reflect.set.js");
__webpack_require__(/*! ./modules/es6.reflect.set-prototype-of */ "./node_modules/core-js/modules/es6.reflect.set-prototype-of.js");
__webpack_require__(/*! ./modules/es7.array.includes */ "./node_modules/core-js/modules/es7.array.includes.js");
__webpack_require__(/*! ./modules/es7.array.flat-map */ "./node_modules/core-js/modules/es7.array.flat-map.js");
__webpack_require__(/*! ./modules/es7.array.flatten */ "./node_modules/core-js/modules/es7.array.flatten.js");
__webpack_require__(/*! ./modules/es7.string.at */ "./node_modules/core-js/modules/es7.string.at.js");
__webpack_require__(/*! ./modules/es7.string.pad-start */ "./node_modules/core-js/modules/es7.string.pad-start.js");
__webpack_require__(/*! ./modules/es7.string.pad-end */ "./node_modules/core-js/modules/es7.string.pad-end.js");
__webpack_require__(/*! ./modules/es7.string.trim-left */ "./node_modules/core-js/modules/es7.string.trim-left.js");
__webpack_require__(/*! ./modules/es7.string.trim-right */ "./node_modules/core-js/modules/es7.string.trim-right.js");
__webpack_require__(/*! ./modules/es7.string.match-all */ "./node_modules/core-js/modules/es7.string.match-all.js");
__webpack_require__(/*! ./modules/es7.symbol.async-iterator */ "./node_modules/core-js/modules/es7.symbol.async-iterator.js");
__webpack_require__(/*! ./modules/es7.symbol.observable */ "./node_modules/core-js/modules/es7.symbol.observable.js");
__webpack_require__(/*! ./modules/es7.object.get-own-property-descriptors */ "./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js");
__webpack_require__(/*! ./modules/es7.object.values */ "./node_modules/core-js/modules/es7.object.values.js");
__webpack_require__(/*! ./modules/es7.object.entries */ "./node_modules/core-js/modules/es7.object.entries.js");
__webpack_require__(/*! ./modules/es7.object.define-getter */ "./node_modules/core-js/modules/es7.object.define-getter.js");
__webpack_require__(/*! ./modules/es7.object.define-setter */ "./node_modules/core-js/modules/es7.object.define-setter.js");
__webpack_require__(/*! ./modules/es7.object.lookup-getter */ "./node_modules/core-js/modules/es7.object.lookup-getter.js");
__webpack_require__(/*! ./modules/es7.object.lookup-setter */ "./node_modules/core-js/modules/es7.object.lookup-setter.js");
__webpack_require__(/*! ./modules/es7.map.to-json */ "./node_modules/core-js/modules/es7.map.to-json.js");
__webpack_require__(/*! ./modules/es7.set.to-json */ "./node_modules/core-js/modules/es7.set.to-json.js");
__webpack_require__(/*! ./modules/es7.map.of */ "./node_modules/core-js/modules/es7.map.of.js");
__webpack_require__(/*! ./modules/es7.set.of */ "./node_modules/core-js/modules/es7.set.of.js");
__webpack_require__(/*! ./modules/es7.weak-map.of */ "./node_modules/core-js/modules/es7.weak-map.of.js");
__webpack_require__(/*! ./modules/es7.weak-set.of */ "./node_modules/core-js/modules/es7.weak-set.of.js");
__webpack_require__(/*! ./modules/es7.map.from */ "./node_modules/core-js/modules/es7.map.from.js");
__webpack_require__(/*! ./modules/es7.set.from */ "./node_modules/core-js/modules/es7.set.from.js");
__webpack_require__(/*! ./modules/es7.weak-map.from */ "./node_modules/core-js/modules/es7.weak-map.from.js");
__webpack_require__(/*! ./modules/es7.weak-set.from */ "./node_modules/core-js/modules/es7.weak-set.from.js");
__webpack_require__(/*! ./modules/es7.global */ "./node_modules/core-js/modules/es7.global.js");
__webpack_require__(/*! ./modules/es7.system.global */ "./node_modules/core-js/modules/es7.system.global.js");
__webpack_require__(/*! ./modules/es7.error.is-error */ "./node_modules/core-js/modules/es7.error.is-error.js");
__webpack_require__(/*! ./modules/es7.math.clamp */ "./node_modules/core-js/modules/es7.math.clamp.js");
__webpack_require__(/*! ./modules/es7.math.deg-per-rad */ "./node_modules/core-js/modules/es7.math.deg-per-rad.js");
__webpack_require__(/*! ./modules/es7.math.degrees */ "./node_modules/core-js/modules/es7.math.degrees.js");
__webpack_require__(/*! ./modules/es7.math.fscale */ "./node_modules/core-js/modules/es7.math.fscale.js");
__webpack_require__(/*! ./modules/es7.math.iaddh */ "./node_modules/core-js/modules/es7.math.iaddh.js");
__webpack_require__(/*! ./modules/es7.math.isubh */ "./node_modules/core-js/modules/es7.math.isubh.js");
__webpack_require__(/*! ./modules/es7.math.imulh */ "./node_modules/core-js/modules/es7.math.imulh.js");
__webpack_require__(/*! ./modules/es7.math.rad-per-deg */ "./node_modules/core-js/modules/es7.math.rad-per-deg.js");
__webpack_require__(/*! ./modules/es7.math.radians */ "./node_modules/core-js/modules/es7.math.radians.js");
__webpack_require__(/*! ./modules/es7.math.scale */ "./node_modules/core-js/modules/es7.math.scale.js");
__webpack_require__(/*! ./modules/es7.math.umulh */ "./node_modules/core-js/modules/es7.math.umulh.js");
__webpack_require__(/*! ./modules/es7.math.signbit */ "./node_modules/core-js/modules/es7.math.signbit.js");
__webpack_require__(/*! ./modules/es7.promise.finally */ "./node_modules/core-js/modules/es7.promise.finally.js");
__webpack_require__(/*! ./modules/es7.promise.try */ "./node_modules/core-js/modules/es7.promise.try.js");
__webpack_require__(/*! ./modules/es7.reflect.define-metadata */ "./node_modules/core-js/modules/es7.reflect.define-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.delete-metadata */ "./node_modules/core-js/modules/es7.reflect.delete-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-metadata */ "./node_modules/core-js/modules/es7.reflect.get-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-metadata-keys.js");
__webpack_require__(/*! ./modules/es7.reflect.get-own-metadata */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.get-own-metadata-keys */ "./node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js");
__webpack_require__(/*! ./modules/es7.reflect.has-metadata */ "./node_modules/core-js/modules/es7.reflect.has-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.has-own-metadata */ "./node_modules/core-js/modules/es7.reflect.has-own-metadata.js");
__webpack_require__(/*! ./modules/es7.reflect.metadata */ "./node_modules/core-js/modules/es7.reflect.metadata.js");
__webpack_require__(/*! ./modules/es7.asap */ "./node_modules/core-js/modules/es7.asap.js");
__webpack_require__(/*! ./modules/es7.observable */ "./node_modules/core-js/modules/es7.observable.js");
__webpack_require__(/*! ./modules/web.timers */ "./node_modules/core-js/modules/web.timers.js");
__webpack_require__(/*! ./modules/web.immediate */ "./node_modules/core-js/modules/web.immediate.js");
__webpack_require__(/*! ./modules/web.dom.iterable */ "./node_modules/core-js/modules/web.dom.iterable.js");
module.exports = __webpack_require__(/*! ./modules/_core */ "./node_modules/core-js/modules/_core.js");


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/util/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./worker.js":
/*!*******************!*\
  !*** ./worker.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib_loader_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/loader.js */ "../lib/loader.js");
/* harmony import */ var _lib_materialize_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/materialize.js */ "../lib/materialize.js");
/* harmony import */ var _lib_schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/schema.js */ "../lib/schema.js");
/* harmony import */ var fp_ts_es6_Either_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fp-ts/es6/Either.js */ "../node_modules/fp-ts/es6/Either.js");




self.addEventListener("message", function (_ref) {
  var _ref$data = _ref.data,
      id = _ref$data.id,
      shex = _ref$data.shex,
      assertions = _ref$data.assertions;
  Object(_lib_loader_js__WEBPACK_IMPORTED_MODULE_0__["loadText"])(shex, null).then(function (schema) {
    var result = _lib_schema_js__WEBPACK_IMPORTED_MODULE_2__["Schema"].decode(schema);

    if (result._tag === "Left") {
      throw JSON.stringify(result.left, null, "  ");
    }

    var view = Object(_lib_materialize_js__WEBPACK_IMPORTED_MODULE_1__["materialize"])(result.right, assertions);

    for (var i = 0; i < view.length; i++) {
      view[i] = view[i].toJSON();
    }

    postMessage({
      id: id,
      result: Object(fp_ts_es6_Either_js__WEBPACK_IMPORTED_MODULE_3__["right"])(view)
    });
  })["catch"](function (err) {
    return postMessage({
      id: id,
      result: Object(fp_ts_es6_Either_js__WEBPACK_IMPORTED_MODULE_3__["left"])(err.toString())
    });
  });
});

/***/ }),

/***/ 10:
/*!*************************!*\
  !*** request (ignored) ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 11:
/*!**********************!*\
  !*** http (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 12:
/*!****************************************!*\
  !*** multi babel-polyfill ./worker.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! babel-polyfill */"./node_modules/babel-polyfill/lib/index.js");
module.exports = __webpack_require__(/*! ./worker.js */"./worker.js");


/***/ }),

/***/ 2:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 8:
/*!*************************************!*\
  !*** rdf-canonize-native (ignored) ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 9:
/*!************************!*\
  !*** xmldom (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
//# sourceMappingURL=worker.min.js.map